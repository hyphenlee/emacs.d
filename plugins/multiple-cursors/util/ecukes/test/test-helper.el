(defmacro with-hooks (&rest body)
  `(let ((ecukes-hooks-before)
         (ecukes-hooks-after)
         (ecukes-hooks-setup)
         (ecukes-hooks-teardown))
     ,@body))

(defmacro with-steps (&rest body)
  `(let ((ecukes-steps-definitions))
     ,@body))

(defun with-parse-step (name fn)
  (let* ((feature-file (feature-file-path "step" name))
         (feature (ecukes-parse-feature feature-file))
         (scenarios (ecukes-feature-scenarios feature))
         (scenario (car scenarios))
         (steps (ecukes-scenario-steps scenario))
         (step (car steps))
         (name (ecukes-step-name step))
         (type (ecukes-step-type step))
         (arg (ecukes-step-arg step)))
    (funcall fn name type arg)))

(defun with-parse-scenario (name fn)
  (let* ((feature-file (feature-file-path "scenario" name))
         (feature (ecukes-parse-feature feature-file))
         (scenarios (ecukes-feature-scenarios feature))
         (scenario (car scenarios))
         (name) (step-names) (tags))
    (condition-case err
        (progn
          (setq name (ecukes-scenario-name scenario))
          (setq step-names (mapcar 'ecukes-step-name (ecukes-scenario-steps scenario)))
          (setq tags (ecukes-scenario-tags scenario)))
      (error))
    (funcall fn scenario name step-names tags)))

(defun feature-file-path (category nameb)
  (let ((category-path (expand-file-name category ecukes-test-features-path)))
    (expand-file-name (format "%s.feature" name) category-path)))
