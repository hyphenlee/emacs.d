;; Object lisp/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "lisp/"
  :tables (list 
   (semanticdb-table "org.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("org-inhibit-highlight-removal" variable nil nil [2800 2842])
            ("org-table-formula-constants-local" variable nil nil [2870 2968])
            ("make-variable-buffer-local" code nil nil [2969 3032])
            ("cl" include nil nil [3084 3097])
            ("gnus-sum" include nil nil [3100 3119])
            ("calendar" include nil nil [3122 3141])
            ("find-func" include nil nil [3142 3162])
            ("format-spec" include nil nil [3163 3185])
            ("load" code nil nil [3187 3217])
            ("org-macs" include nil nil [3219 3238])
            ("org-compat" include nil nil [3239 3260])
            ("org-outline-regexp" variable (:default-value "\\*+ ") nil [3637 3707])
            ("org-outline-regexp-bol" variable (:default-value "^\\*+ ") nil [3709 3894])
            ("org-heading-regexp" variable (:default-value "^\\(\\*+\\)\\(?: +\\(.*?\\)\\)?[ 	]*$") nil [3896 4082])
            ("unless" code nil nil [4163 4316])
            ("unless" code nil nil [4317 4460])
            ("unless" code nil nil [4461 4558])
            ("declare-function" code nil nil [4560 4623])
            ("declare-function" code nil nil [4624 4692])
            ("declare-function" code nil nil [4693 4764])
            ("declare-function" code nil nil [4765 4868])
            ("declare-function" code nil nil [4869 4936])
            ("declare-function" code nil nil [4937 5005])
            ("declare-function" code nil nil [5006 5076])
            ("declare-function" code nil nil [5077 5153])
            ("declare-function" code nil nil [5155 5213])
            ("declare-function" code nil nil [5214 5307])
            ("declare-function" code nil nil [5308 5357])
            ("declare-function" code nil nil [5358 5415])
            ("declare-function" code nil nil [5416 5492])
            ("declare-function" code nil nil [5493 5550])
            ("declare-function" code nil nil [5551 5626])
            ("declare-function" code nil nil [5627 5690])
            ("declare-function" code nil nil [5691 5743])
            ("declare-function" code nil nil [5744 5817])
            ("declare-function" code nil nil [5818 5896])
            ("declare-function" code nil nil [5897 5960])
            ("declare-function" code nil nil [5961 6010])
            ("declare-function" code nil nil [6011 6070])
            ("declare-function" code nil nil [6071 6133])
            ("declare-function" code nil nil [6134 6200])
            ("declare-function" code nil nil [6202 6291])
            ("declare-function" code nil nil [6292 6368])
            ("declare-function" code nil nil [6369 6432])
            ("declare-function" code nil nil [6433 6505])
            ("declare-function" code nil nil [6506 6593])
            ("declare-function" code nil nil [6594 6703])
            ("declare-function" code nil nil [6704 6773])
            ("declare-function" code nil nil [6774 6872])
            ("declare-function" code nil nil [6873 6945])
            ("declare-function" code nil nil [6946 7032])
            ("declare-function" code nil nil [7033 7102])
            ("declare-function" code nil nil [7103 7192])
            ("declare-function" code nil nil [7193 7291])
            ("declare-function" code nil nil [7292 7358])
            ("declare-function" code nil nil [7359 7418])
            ("org-babel-load-languages" variable nil nil [7483 7516])
            ("org-babel-do-load-languages" function (:arguments ("sym" "value")) nil [7533 8017])
            ("org-babel-load-file" function
               (:user-visible-flag t
                :arguments ("file" "compile"))
                nil [8034 9111])
            ("org-babel-load-languages" variable (:default-value (quote ((emacs-lisp . t)))) nil [9113 11148])
            ("org-clone-delete-id" variable nil nil [11179 11447])
            ("org-check-version" code nil nil [11461 11480])
            ("org-version" function
               (:user-visible-flag t
                :arguments ("here" "full" "message"))
                nil [11497 12771])
            ("org-version" variable
               (:constant-flag t
                :default-value (org-version))
                nil [12773 12809])
            ("org" customgroup (:user-visible-flag t) nil [12866 12985])
            ("org-mode-hook" variable nil nil [12987 13106])
            ("org-load-hook" variable nil nil [13108 13216])
            ("org-log-buffer-setup-hook" variable nil nil [13218 13362])
            ("org-modules" variable nil nil [13364 13384])
            ("org-modules-loaded" variable nil nil [13402 13475])
            ("org-load-modules-maybe" function (:arguments ("force")) nil [13477 13806])
            ("org-set-modules" function (:arguments ("var" "value")) nil [13808 13998])
            ("org-modules" variable (:default-value (quote (org-w3m org-bbdb org-bibtex org-docview org-gnus org-info org-irc org-mhe org-rmail))) nil [14000 19634])
            ("org-export--registered-backends" variable nil nil [19636 19676])
            ("declare-function" code nil nil [19691 19768])
            ("declare-function" code nil nil [19769 19826])
            ("org-export-backends" variable (:default-value (quote (ascii html icalendar latex))) nil [19827 24068])
            ("eval-after-load" code nil nil [24070 24302])
            ("org-support-shift-select" variable nil nil [24304 26443])
            ("org-loop-over-headlines-in-active-region" variable nil nil [26445 27537])
            ("org-startup" customgroup (:user-visible-flag t) nil [27539 27644])
            ("org-startup-folded" variable (:default-value t) nil [27646 28439])
            ("org-startup-truncated" variable (:default-value t) nil [28441 28704])
            ("org-startup-indented" variable nil nil [28706 29082])
            ("org-use-sub-superscripts" variable (:default-value t) nil [29084 30245])
            ("org-startup-with-beamer-mode" variable nil nil [30247 30535])
            ("org-startup-align-all-tables" variable nil nil [30537 30981])
            ("org-startup-with-inline-images" variable nil nil [30983 31317])
            ("org-startup-with-latex-preview" variable nil nil [31319 31692])
            ("org-insert-mode-line-in-empty-file" variable nil nil [31694 32162])
            ("org-replace-disputed-keys" variable nil nil [32164 32890])
            ("org-use-extra-keys" variable nil nil [32892 33412])
            ("org-defvaralias" code nil nil [33414 33478])
            ("org-disputed-keys" variable (:default-value (quote (([(shift up)] . [(meta p)]) ([(shift down)] . [(meta n)]) ([(shift left)] . [(meta -)]) ([(shift right)] . [(meta +)]) ([(control shift right)] . [(meta shift +)]) ([(control shift left)] . [(meta shift -)])))) nil [33480 34166])
            ("org-key" function (:arguments ("key")) nil [34168 34701])
            ("org-find-if" function (:arguments ("predicate" "seq")) nil [34703 34849])
            ("org-defkey" function (:arguments ("keymap" "key" "def")) nil [34851 34991])
            ("org-ellipsis" variable nil nil [34993 35522])
            ("org-display-table" variable nil nil [35524 35625])
            ("org-keywords" customgroup (:user-visible-flag t) nil [35627 35716])
            ("org-deadline-string" variable (:default-value "DEADLINE:") nil [35718 36060])
            ("org-scheduled-string" variable (:default-value "SCHEDULED:") nil [36062 36412])
            ("org-closed-string" variable (:default-value "CLOSED:") nil [36414 36567])
            ("org-clock-string" variable (:default-value "CLOCK:") nil [36569 36718])
            ("org-closed-keep-when-no-todo" variable nil nil [36720 36946])
            ("org-planning-or-clock-line-re" variable
               (:constant-flag t
                :default-value (concat "^[ 	]*\\(" org-scheduled-string "\\|" org-deadline-string "\\|" org-closed-string "\\|" org-clock-string "\\)"))
                nil [36948 37182])
            ("org-comment-string" variable (:default-value "COMMENT") nil [37184 37460])
            ("org-quote-string" variable (:default-value "QUOTE") nil [37462 37849])
            ("org-repeat-re" variable
               (:constant-flag t
                :default-value "<[0-9]\\{4\\}-[0-9][0-9]-[0-9][0-9] [^>
]*?\\([.+]?\\+[0-9]+[hdwmy]\\(/[0-9]+[hdwmy]\\)?\\)")
                nil [37851 38082])
            ("org-structure" customgroup (:user-visible-flag t) nil [38084 38213])
            ("org-reveal-location" customgroup (:user-visible-flag t) nil [38215 38363])
            ("org-context-choice" variable
               (:constant-flag t
                :default-value (quote (choice (const :tag "Always" t) (const :tag "Never" nil) (repeat :greedy t :tag "Individual contexts" (cons (choice :tag "Context" (const agenda) (const org-goto) (const occur-tree) (const tags-tree) (const link-search) (const mark-goto) (const bookmark-jump) (const isearch) (const default)) (boolean))))))
                nil [38365 38832])
            ("org-show-hierarchy-above" variable (:default-value (quote ((default . t)))) nil [38834 39911])
            ("org-show-following-heading" variable (:default-value (quote ((default)))) nil [39913 40582])
            ("org-show-siblings" variable (:default-value (quote ((default) (isearch t) (bookmark-jump t)))) nil [40584 41535])
            ("org-show-entry-below" variable (:default-value (quote ((default)))) nil [41537 42072])
            ("org-indirect-buffer-display" variable (:default-value (quote other-window)) nil [42074 42970])
            ("org-use-speed-commands" variable nil nil [42972 43324])
            ("org-speed-commands-user" variable nil nil [43326 44287])
            ("org-bookmark-names-plist" variable (:default-value (quote (:last-capture "org-capture-last-stored" :last-refile "org-refile-last-stored" :last-capture-marker "org-capture-last-stored-marker"))) nil [44289 44853])
            ("org-cycle" customgroup (:user-visible-flag t) nil [44855 44977])
            ("org-cycle-skip-children-state-if-no-children" variable (:default-value t) nil [44979 45144])
            ("org-cycle-max-level" variable nil nil [45146 45802])
            ("org-drawers" variable (:default-value (quote ("PROPERTIES" "CLOCK" "LOGBOOK" "RESULTS"))) nil [45804 46346])
            ("org-hide-block-startup" variable nil nil [46348 46597])
            ("org-cycle-global-at-bob" variable nil nil [46599 47189])
            ("org-cycle-level-after-item/entry-creation" variable (:default-value t) nil [47191 47910])
            ("org-cycle-emulate-tab" variable (:default-value t) nil [47912 48618])
            ("org-cycle-separator-lines" variable (:default-value 2) nil [48620 49382])
            ("put" code nil nil [49383 49446])
            ("org-pre-cycle-hook" variable nil nil [49448 49917])
            ("org-cycle-hook" variable (:default-value (quote (org-cycle-hide-archived-subtrees org-cycle-hide-drawers org-cycle-hide-inline-tasks org-cycle-show-empty-lines org-optimize-window-after-visibility-change))) nil [49919 50583])
            ("org-edit-structure" customgroup (:user-visible-flag t) nil [50585 50724])
            ("org-odd-levels-only" variable nil nil [50726 51320])
            ("org-adapt-indentation" variable (:default-value t) nil [51322 52387])
            ("org-special-ctrl-a/e" variable nil nil [52389 54009])
            ("org-defvaralias" code nil nil [54010 54069])
            ("org-special-ctrl-k" variable nil nil [54071 54590])
            ("org-ctrl-k-protect-subtree" variable nil nil [54592 55205])
            ("org-catch-invisible-edits" variable nil nil [55207 56372])
            ("org-yank-folded-subtrees" variable (:default-value t) nil [56374 56796])
            ("org-yank-adjusted-subtrees" variable nil nil [56798 57046])
            ("org-M-RET-may-split-line" variable (:default-value (quote ((default . t)))) nil [57048 57823])
            ("org-insert-heading-respect-content" variable nil nil [57826 58207])
            ("org-blank-before-new-entry" variable (:default-value (quote ((heading . auto) (plain-list-item . auto)))) nil [58209 59106])
            ("org-insert-heading-hook" variable nil nil [59108 59240])
            ("org-enable-fixed-width-editor" variable (:default-value t) nil [59242 59544])
            ("org-goto-auto-isearch" variable (:default-value t) nil [59546 59998])
            ("org-sparse-trees" customgroup (:user-visible-flag t) nil [60000 60130])
            ("org-highlight-sparse-tree-matches" variable (:default-value t) nil [60132 60390])
            ("org-remove-highlights-with-change" variable (:default-value t) nil [60392 60805])
            ("org-occur-hook" variable (:default-value (quote (org-first-headline-recenter))) nil [60808 61062])
            ("org-imenu-and-speedbar" customgroup (:user-visible-flag t) nil [61064 61212])
            ("org-imenu-depth" variable (:default-value 2) nil [61214 61394])
            ("org-table" customgroup (:user-visible-flag t) nil [61396 61496])
            ("org-enable-table-editor" variable (:default-value (quote optimized)) nil [61498 62979])
            ("org-self-insert-cluster-for-undo" variable (:default-value (or (featurep (quote xemacs)) (version<= emacs-version "24.1"))) nil [62981 63375])
            ("org-table-tab-recognizes-table.el" variable (:default-value t) nil [63377 63637])
            ("org-link" customgroup (:user-visible-flag t) nil [63639 63736])
            ("org-link-abbrev-alist-local" variable nil nil [63738 63892])
            ("make-variable-buffer-local" code nil nil [63893 63950])
            ("org-link-abbrev-alist" variable nil nil [63952 65173])
            ("org-descriptive-links" variable (:default-value t) nil [65175 65631])
            ("org-link-file-path-type" variable (:default-value (quote adaptive)) nil [65633 66258])
            ("org-activate-links" variable (:default-value (quote (bracket angle plain radio tag date footnote))) nil [66260 67505])
            ("org-make-link-description-function" variable nil nil [67507 67910])
            ("org-link-store" customgroup (:user-visible-flag t) nil [67912 68034])
            ("org-url-hexify-p" variable (:default-value t) nil [68036 68177])
            ("org-email-link-description-format" variable (:default-value "Email %c: %.30s") nil [68179 68980])
            ("org-from-is-user-regexp" variable (:default-value (let (r1 r2) (when (and user-mail-address (not (string= user-mail-address ""))) (setq r1 (concat "\\<" (regexp-quote user-mail-address) "\\>"))) (when (and user-full-name (not (string= user-full-name ""))) (setq r2 (concat "\\<" (regexp-quote user-full-name) "\\>"))) (if (and r1 r2) (concat r1 "\\|" r2) (or r1 r2)))) nil [68982 69542])
            ("org-context-in-file-links" variable (:default-value t) nil [69544 70181])
            ("org-keep-stored-link-after-insertion" variable nil nil [70183 70771])
            ("org-link-follow" customgroup (:user-visible-flag t) nil [70773 70899])
            ("org-link-translation-function" variable nil nil [70901 71609])
            ("org-follow-link-hook" variable nil nil [71611 71740])
            ("org-tab-follows-link" variable nil nil [71742 72002])
            ("org-return-follows-link" variable nil nil [72004 72194])
            ("org-mouse-1-follows-link" variable (:default-value (if (boundp (quote mouse-1-click-follows-link)) mouse-1-click-follows-link t)) nil [72196 72516])
            ("org-mark-ring-length" variable (:default-value 4) nil [72518 72718])
            ("org-link-search-must-match-exact-headline" variable (:default-value (quote query-to-create)) nil [72720 73184])
            ("org-link-frame-setup" variable (:default-value (quote ((vm . vm-visit-folder-other-frame) (vm-imap . vm-visit-imap-folder-other-frame) (gnus . org-gnus-no-new-news) (file . find-file-other-window) (wl . wl-other-frame)))) nil [73186 74759])
            ("org-display-internal-link-with-indirect-buffer" variable nil nil [74761 75350])
            ("org-open-non-existing-files" variable nil nil [75352 75721])
            ("org-open-directory-means-index-dot-org" variable nil nil [75723 75991])
            ("org-link-mailto-program" variable (:default-value (quote (browse-url "mailto:%a?subject=%s"))) nil [75993 76703])
            ("org-confirm-shell-link-function" variable (:default-value (quote yes-or-no-p)) nil [76705 77419])
            ("put" code nil nil [77420 77539])
            ("org-confirm-shell-link-not-regexp" variable nil nil [77541 77700])
            ("org-confirm-elisp-link-function" variable (:default-value (quote yes-or-no-p)) nil [77702 78441])
            ("put" code nil nil [78442 78561])
            ("org-confirm-elisp-link-not-regexp" variable nil nil [78563 78722])
            ("org-file-apps-defaults-gnu" variable
               (:constant-flag t
                :default-value (quote ((remote . emacs) (system . mailcap) (t . mailcap))))
                nil [78724 78906])
            ("org-file-apps-defaults-macosx" variable
               (:constant-flag t
                :default-value (quote ((remote . emacs) (t . "open %s") (system . "open %s") ("ps.gz" . "gv %s") ("eps.gz" . "gv %s") ("dvi" . "xdvi %s") ("fig" . "xfig %s"))))
                nil [78908 79324])
            ("org-file-apps-defaults-windowsnt" variable
               (:constant-flag t
                :default-value (list (quote (remote . emacs)) (cons t (list (if (featurep (quote xemacs)) (quote mswindows-shell-execute) (quote w32-shell-execute)) "open" (quote file))) (cons (quote system) (list (if (featurep (quote xemacs)) (quote mswindows-shell-execute) (quote w32-shell-execute)) "open" (quote file)))))
                nil [79326 79760])
            ("org-file-apps" variable (:default-value (quote ((auto-mode . emacs) ("\\.mm\\'" . default) ("\\.x?html?\\'" . default) ("\\.pdf\\'" . default)))) nil [79762 84493])
            ("org-doi-server-url" variable (:default-value "http://dx.doi.org/") nil [84495 84637])
            ("org-refile" customgroup (:user-visible-flag t) nil [84639 84751])
            ("org-directory" variable (:default-value "~/org") nil [84753 85413])
            ("org-default-notes-file" variable (:default-value (convert-standard-filename "~/.notes")) nil [85415 85786])
            ("org-goto-interface" variable (:default-value (quote outline)) nil [85788 86461])
            ("org-goto-max-level" variable (:default-value 5) nil [86463 86605])
            ("org-reverse-note-order" variable nil nil [86607 87113])
            ("org-log-refile" variable nil nil [87115 87926])
            ("org-refile-targets" variable nil nil [87928 90250])
            ("org-refile-target-verify-function" variable nil nil [90252 90938])
            ("org-refile-use-cache" variable nil nil [90940 91476])
            ("org-refile-use-outline-path" variable nil nil [91478 92089])
            ("org-outline-path-complete-in-steps" variable (:default-value t) nil [92091 92698])
            ("org-refile-allow-creating-parent-nodes" variable nil nil [92700 93414])
            ("org-refile-active-region-within-subtree" variable nil nil [93416 93820])
            ("org-todo" customgroup (:user-visible-flag t) nil [93822 93924])
            ("org-progress" customgroup (:user-visible-flag t) nil [93926 94047])
            ("org-todo-interpretation-widgets" variable (:default-value (quote ((:tag "Sequence (cycling hits every state)" sequence) (:tag "Type     (cycling directly to DONE)" type)))) nil [94049 94326])
            ("org-todo-keywords" variable (:default-value (quote ((sequence "TODO" "DONE")))) nil [94328 97151])
            ("org-todo-keywords-1" variable nil nil [97153 97236])
            ("make-variable-buffer-local" code nil nil [97237 97286])
            ("org-todo-keywords-for-agenda" variable nil nil [97287 97328])
            ("org-done-keywords-for-agenda" variable nil nil [97329 97370])
            ("org-drawers-for-agenda" variable nil nil [97371 97406])
            ("org-todo-keyword-alist-for-agenda" variable nil nil [97407 97453])
            ("org-tag-alist-for-agenda" variable nil nil [97454 97536])
            ("org-tag-groups-alist-for-agenda" variable nil nil [97537 97641])
            ("org-tag-groups-alist" variable nil nil [97642 97675])
            ("make-variable-buffer-local" code nil nil [97676 97726])
            ("org-agenda-contributing-files" variable nil nil [97727 97769])
            ("org-not-done-keywords" variable nil nil [97770 97804])
            ("make-variable-buffer-local" code nil nil [97805 97856])
            ("org-done-keywords" variable nil nil [97857 97887])
            ("make-variable-buffer-local" code nil nil [97888 97935])
            ("org-todo-heads" variable nil nil [97936 97963])
            ("make-variable-buffer-local" code nil nil [97964 98008])
            ("org-todo-sets" variable nil nil [98009 98035])
            ("make-variable-buffer-local" code nil nil [98036 98079])
            ("org-todo-log-states" variable nil nil [98080 98112])
            ("make-variable-buffer-local" code nil nil [98113 98162])
            ("org-todo-kwd-alist" variable nil nil [98163 98194])
            ("make-variable-buffer-local" code nil nil [98195 98243])
            ("org-todo-key-alist" variable nil nil [98244 98275])
            ("make-variable-buffer-local" code nil nil [98276 98324])
            ("org-todo-key-trigger" variable nil nil [98325 98358])
            ("make-variable-buffer-local" code nil nil [98359 98409])
            ("org-todo-interpretation" variable (:default-value (quote sequence)) nil [98411 98806])
            ("org-use-fast-todo-selection" variable (:default-value t) nil [98808 99726])
            ("org-provide-todo-statistics" variable (:default-value t) nil [99728 100424])
            ("org-hierarchical-todo-statistics" variable (:default-value t) nil [100426 100813])
            ("org-after-todo-state-change-hook" variable nil nil [100815 101062])
            ("org-blocker-hook" variable nil nil [101064 101412])
            ("org-trigger-hook" variable nil nil [101414 102014])
            ("org-enforce-todo-dependencies" variable nil nil [102016 102648])
            ("org-enforce-todo-checkbox-dependencies" variable nil nil [102650 103409])
            ("org-treat-insert-todo-heading-as-state-change" variable nil nil [103411 103772])
            ("org-treat-S-cursor-todo-selection-as-state-change" variable (:default-value t) nil [103774 104103])
            ("org-todo-state-tags-triggers" variable nil nil [104105 104821])
            ("org-log-done" variable nil nil [104823 105548])
            ("cond" code nil nil [105589 105728])
            ("org-log-reschedule" variable nil nil [105730 106357])
            ("org-log-redeadline" variable nil nil [106359 107101])
            ("org-log-note-clock-out" variable nil nil [107103 107436])
            ("org-log-done-with-time" variable (:default-value t) nil [107438 107624])
            ("org-log-note-headings" variable (:default-value (quote ((done . "CLOSING NOTE %t") (state . "State %-12s from %-12S %t") (note . "Note taken on %t") (reschedule . "Rescheduled from %S on %t") (delschedule . "Not scheduled, was %S on %t") (redeadline . "New deadline from %S on %t") (deldeadline . "Removed deadline, was %S on %t") (refile . "Refiled on %t") (clock-out . "")))) nil [107626 109571])
            ("unless" code nil nil [109573 109662])
            ("org-log-into-drawer" variable nil nil [109664 110597])
            ("org-defvaralias" code nil nil [110599 110670])
            ("org-log-into-drawer" function nil nil [110672 111067])
            ("org-log-state-notes-insert-after-drawers" variable nil nil [111069 111530])
            ("org-log-states-order-reversed" variable (:default-value t) nil [111532 111900])
            ("org-todo-repeat-to-state" variable nil nil [111902 112339])
            ("org-log-repeat" variable (:default-value (quote time)) nil [112341 113387])
            ("org-priorities" customgroup (:user-visible-flag t) nil [113390 113490])
            ("org-enable-priority-commands" variable (:default-value t) nil [113492 113714])
            ("org-highest-priority" variable (:default-value 65) nil [113716 113926])
            ("org-lowest-priority" variable (:default-value 67) nil [113928 114136])
            ("org-default-priority" variable (:default-value 66) nil [114138 114817])
            ("org-priority-start-cycle-with-default" variable (:default-value t) nil [114819 115148])
            ("org-get-priority-function" variable nil nil [115150 115651])
            ("org-time" customgroup (:user-visible-flag t) nil [115653 115770])
            ("org-insert-labeled-timestamps-at-point" variable nil nil [115772 116146])
            ("org-time-stamp-formats" variable
               (:constant-flag t
                :default-value (quote ("<%Y-%m-%d %a>" . "<%Y-%m-%d %a %H:%M>")))
                nil [116148 116340])
            ("org-time-stamp-rounding-minutes" variable (:default-value (quote (0 5))) nil [116342 117355])
            ("when" code nil nil [117407 117576])
            ("org-display-custom-times" variable nil nil [117578 117903])
            ("make-variable-buffer-local" code nil nil [117904 117958])
            ("org-time-stamp-custom-formats" variable (:default-value (quote ("<%m/%d/%y %a>" . "<%m/%d/%y %a %H:%M>"))) nil [117960 118442])
            ("org-time-stamp-format" function (:arguments ("long" "inactive")) nil [118444 118694])
            ("org-time-clocksum-format" variable (:default-value (quote (:days "%dd " :hours "%d" :require-hours t :minutes ":%02d" :require-minutes t))) nil [118696 121508])
            ("org-time-clocksum-use-fractional" variable nil nil [121510 121758])
            ("org-time-clocksum-use-effort-durations" variable nil nil [121760 122293])
            ("org-time-clocksum-fractional-format" variable (:default-value "%.2f") nil [122295 123569])
            ("org-deadline-warning-days" variable (:default-value 14) nil [123571 124029])
            ("org-scheduled-delay-days" variable nil nil [124031 124585])
            ("org-read-date-prefer-future" variable (:default-value t) nil [124587 125673])
            ("org-agenda-jump-prefer-future" variable (:default-value (quote org-read-date-prefer-future)) nil [125675 126219])
            ("org-read-date-force-compatible-dates" variable (:default-value t) nil [126221 127637])
            ("org-read-date-display-live" variable (:default-value t) nil [127639 127840])
            ("org-read-date-popup-calendar" variable (:default-value t) nil [127842 128177])
            ("org-defvaralias" code nil nil [128178 128263])
            ("make-obsolete-variable" code nil nil [128265 128387])
            ("org-read-date-minibuffer-setup-hook" variable nil nil [128388 128718])
            ("org-extend-today-until" variable nil nil [128720 129459])
            ("org-use-effective-time" variable nil nil [129461 129796])
            ("org-use-last-clock-out-time-as-effective-time" variable nil nil [129798 130126])
            ("org-edit-timestamp-down-means-later" variable nil nil [130128 130310])
            ("org-calendar-follow-timestamp-change" variable (:default-value t) nil [130312 130566])
            ("org-tags" customgroup (:user-visible-flag t) nil [130568 130664])
            ("org-tag-alist" variable nil nil [130666 131479])
            ("org-tag-persistent-alist" variable nil nil [131481 132372])
            ("org-complete-tags-always-offer-all-agenda-tags" variable nil nil [132374 132945])
            ("org-file-tags" variable nil nil [132947 133180])
            ("org-use-fast-tag-selection" variable (:default-value (quote auto)) nil [133182 133841])
            ("org-fast-tag-selection-single-key" variable nil nil [133843 134326])
            ("org-fast-tag-selection-include-todo" variable nil nil [134328 134513])
            ("org-tags-column" variable (:default-value (if (featurep (quote xemacs)) -76 -77)) nil [134515 134950])
            ("org-auto-align-tags" variable (:default-value t) nil [134952 135283])
            ("org-use-tag-inheritance" variable (:default-value t) nil [135285 136270])
            ("org-tags-exclude-from-inheritance" variable nil nil [136272 136603])
            ("org-tag-inherit-p" function (:arguments ("tag")) nil [136605 137054])
            ("org-tags-match-list-sublevels" variable (:default-value t) nil [137056 138039])
            ("org-tags-sort-function" variable nil nil [138041 138343])
            ("org-tags-history" variable nil nil [138345 138416])
            ("org-last-tags-completion-table" variable nil nil [138417 138505])
            ("org-after-tags-change-hook" variable nil nil [138506 138605])
            ("org-properties" customgroup (:user-visible-flag t) nil [138607 138721])
            ("org-property-format" variable (:default-value "%-10s %s") nil [138723 139051])
            ("org-properties-postprocess-alist" variable nil nil [139053 140029])
            ("org-use-property-inheritance" variable nil nil [140031 141337])
            ("org-property-inherit-p" function (:arguments ("property")) nil [141339 141792])
            ("org-columns-default-format" variable (:default-value "%25ITEM %TODO %3PRIORITY %TAGS") nil [141794 142067])
            ("org-columns-ellipses" variable (:default-value "..") nil [142069 142577])
            ("org-columns-modify-value-for-display-function" variable nil nil [142579 143102])
            ("org-effort-property" variable (:default-value "Effort") nil [143104 143367])
            ("org-global-properties-fixed" variable
               (:constant-flag t
                :default-value (quote (("VISIBILITY_ALL" . "folded children content all") ("CLOCK_MODELINE_TOTAL_ALL" . "current today repeat all auto"))))
                nil [143369 143942])
            ("org-global-properties" variable nil nil [143944 144481])
            ("org-file-properties" variable nil nil [144483 144664])
            ("make-variable-buffer-local" code nil nil [144665 144714])
            ("org-agenda" customgroup (:user-visible-flag t) nil [144716 144824])
            ("org-category" variable nil nil [144826 145152])
            ("make-variable-buffer-local" code nil nil [145153 145195])
            ("put" code nil nil [145196 145280])
            ("org-agenda-files" variable nil nil [145282 146106])
            ("org-agenda-file-regexp" variable (:default-value "\\`[^.].*\\.org\\'") nil [146108 146443])
            ("org-agenda-text-search-extra-files" variable nil nil [146445 147258])
            ("org-defvaralias" code nil nil [147260 147351])
            ("org-agenda-skip-unavailable-files" variable nil nil [147353 147578])
            ("org-calendar-to-agenda-key" variable (:default-value [99]) nil [147580 147921])
            ("org-calendar-insert-diary-entry-key" variable (:default-value [105]) nil [147923 148452])
            ("org-agenda-diary-file" variable (:default-value (quote diary-file)) nil [148454 148930])
            ("eval-after-load" code nil nil [148932 149280])
            ("org-latex" customgroup (:user-visible-flag t) nil [149282 149391])
            ("org-format-latex-options" variable (:default-value (quote (:foreground default :background default :scale 1.0 :html-foreground "Black" :html-background "Transparent" :html-scale 1.0 :matchers ("begin" "$1" "$" "$$" "\\(" "\\[")))) nil [149393 150843])
            ("org-format-latex-signal-error" variable (:default-value t) nil [150845 151057])
            ("org-latex-to-mathml-jar-file" variable nil nil [151059 151440])
            ("org-latex-to-mathml-convert-command" variable nil nil [151442 152094])
            ("org-latex-create-formula-image-program" variable (:default-value (quote dvipng)) nil [152096 152656])
            ("org-latex-preview-ltxpng-directory" variable (:default-value "ltxpng/") nil [152658 152958])
            ("org-format-latex-mathml-available-p" function nil nil [152960 153461])
            ("org-format-latex-header" variable (:default-value "\\documentclass{article}
\\usepackage[usenames]{color}
\\usepackage{amsmath}
\\usepackage[mathscr]{eucal}
[PACKAGES]
[DEFAULT-PACKAGES]
\\pagestyle{empty}             % do not remove
% The settings below are copied from fullpage.sty
\\setlength{\\textwidth}{\\paperwidth}
\\addtolength{\\textwidth}{-3cm}
\\setlength{\\oddsidemargin}{1.5cm}
\\addtolength{\\oddsidemargin}{-2.54cm}
\\setlength{\\evensidemargin}{\\oddsidemargin}
\\setlength{\\textheight}{\\paperheight}
\\addtolength{\\textheight}{-\\headheight}
\\addtolength{\\textheight}{-\\headsep}
\\addtolength{\\textheight}{-\\footskip}
\\addtolength{\\textheight}{-3cm}
\\setlength{\\topmargin}{1.5cm}
\\addtolength{\\topmargin}{-2.54cm}") nil [153463 154576])
            ("org-set-packages-alist" function (:arguments ("var" "val")) nil [154578 154818])
            ("org-get-packages-alist" function (:arguments ("var")) nil [154820 155054])
            ("org-latex-default-packages-alist" variable (:default-value (quote (("AUTO" "inputenc" t) ("T1" "fontenc" t) ("" "fixltx2e" nil) ("" "graphicx" t) ("" "longtable" nil) ("" "float" nil) ("" "wrapfig" nil) ("normalem" "ulem" t) ("" "textcomp" t) ("" "marvosym" t) ("" "wasysym" t) ("" "latexsym" t) ("" "amssymb" t) ("" "amstext" nil) ("" "hyperref" nil) "\\tolerance=1000"))) nil [155056 157031])
            ("org-latex-packages-alist" variable nil nil [157033 157944])
            ("org-appearance" customgroup (:user-visible-flag t) nil [157946 158051])
            ("org-level-color-stars-only" variable nil nil [158053 158344])
            ("org-hide-leading-stars" variable nil nil [158346 158931])
            ("org-hidden-keywords" variable nil nil [158933 159372])
            ("org-custom-properties" variable nil nil [159374 159707])
            ("org-fontify-done-headline" variable nil nil [159709 160050])
            ("org-fontify-emphasized-text" variable (:default-value t) nil [160052 160268])
            ("org-fontify-whole-heading-line" variable nil nil [160270 160487])
            ("org-highlight-latex-and-related" variable nil nil [160489 161148])
            ("org-hide-emphasis-markers" variable nil nil [161150 161304])
            ("org-pretty-entities" variable nil nil [161306 161502])
            ("org-pretty-entities-include-sub-superscripts" variable (:default-value t) nil [161504 161701])
            ("org-emph-re" variable nil nil [161703 162272])
            ("org-verbatim-re" variable nil nil [162273 162352])
            ("org-emphasis-regexp-components" variable nil nil [162353 162392])
            ("org-emphasis-alist" variable nil nil [162414 162441])
            ("org-set-emph-re" function (:arguments ("var" "val")) nil [162463 164236])
            ("org-emphasis-regexp-components" variable (:default-value (quote (" 	('\"{" "- 	.,:!?;'\")}\\" " 	
,\"'" "." 1))) nil [164424 165412])
            ("org-emphasis-alist" variable (:default-value (\` (("*" bold) ("/" italic) ("_" underline) ("=" org-code verbatim) ("~" org-verbatim verbatim) ("+" (\, (if (featurep (quote xemacs)) (quote org-table) (quote (:strike-through t)))))))) nil [165414 166267])
            ("org-protecting-blocks" variable (:default-value (quote ("src" "example" "latex" "ascii" "html" "ditaa" "dot" "r" "R"))) nil [166269 166480])
            ("org-completion" customgroup (:user-visible-flag t) nil [166509 166604])
            ("org-completion-use-ido" variable nil nil [166606 166962])
            ("org-completion-use-iswitchb" variable nil nil [166964 167374])
            ("org-completion-fallback-command" variable (:default-value (quote hippie-expand)) nil [167376 167590])
            ("outline-mode-menu-heading" variable nil nil [167701 167735])
            ("outline-mode-menu-show" variable nil nil [167736 167767])
            ("outline-mode-menu-hide" variable nil nil [167768 167799])
            ("zmacs-regions" variable nil nil [167800 167822])
            ("mark-active" variable nil nil [167855 167875])
            ("declare-function" code nil nil [167897 167965])
            ("declare-function" code nil nil [167966 168033])
            ("declare-function" code nil nil [168034 168102])
            ("declare-function" code nil nil [168103 168167])
            ("declare-function" code nil nil [168168 168236])
            ("calc-embedded-close-formula" variable nil nil [168237 168273])
            ("calc-embedded-open-formula" variable nil nil [168274 168309])
            ("declare-function" code nil nil [168310 168357])
            ("declare-function" code nil nil [168358 168416])
            ("declare-function" code nil nil [168417 168503])
            ("font-lock-unfontify-region-function" variable nil nil [168504 168548])
            ("declare-function" code nil nil [168549 168676])
            ("iswitchb-temp-buflist" variable nil nil [168677 168707])
            ("declare-function" code nil nil [168708 168784])
            ("org-agenda-tags-todo-honor-ignore-options" variable nil nil [168785 168835])
            ("declare-function" code nil nil [168836 168886])
            ("declare-function" code nil nil [168887 169018])
            ("declare-function" code nil nil [169019 169088])
            ("declare-function" code nil nil [169089 169199])
            ("declare-function" code nil nil [169200 169280])
            ("declare-function" code nil nil [169281 169337])
            ("declare-function" code nil nil [169338 169425])
            ("declare-function" code nil nil [169426 169494])
            ("declare-function" code nil nil [169495 169607])
            ("declare-function" code nil nil [169608 169678])
            ("declare-function" code nil nil [169679 169742])
            ("declare-function" code nil nil [169743 169811])
            ("declare-function" code nil nil [169812 169874])
            ("declare-function" code nil nil [169875 169938])
            ("declare-function" code nil nil [169939 169997])
            ("declare-function" code nil nil [169998 170069])
            ("declare-function" code nil nil [170070 170136])
            ("remember-data-file" variable nil nil [170137 170164])
            ("texmathp-why" variable nil nil [170165 170186])
            ("declare-function" code nil nil [170187 170258])
            ("declare-function" code nil nil [170259 170340])
            ("org-latex-regexps" variable nil nil [170342 170368])
            ("org-table-any-line-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*\\(|\\|\\+-[-+]\\)")
                nil [170555 170663])
            ("org-table-line-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*|")
                nil [170664 170742])
            ("org-table-dataline-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*|[^-]")
                nil [170743 170829])
            ("org-table-hline-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*|-")
                nil [170830 170911])
            ("org-table1-hline-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*\\+-[-+]")
                nil [170912 171001])
            ("org-table-any-border-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*[^|+ 	]")
                nil [171002 171164])
            ("org-autoload" code nil nil [171264 171347])
            ("org-TBLFM-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*#\\+TBLFM: ")
                nil [171350 171425])
            ("turn-on-orgtbl" function nil nil [171442 171551])
            ("org-at-table-p" function (:arguments ("table-type")) nil [171553 171888])
            ("org-table-p" function nil nil [171889 171931])
            ("org-at-table.el-p" function nil nil [171933 172147])
            ("org-table-recognize-table.el" function nil nil [172149 172913])
            ("org-at-table-hline-p" function nil nil [172915 173125])
            ("org-table-map-tables" function (:arguments ("function" "quietly")) nil [173127 173908])
            ("org-autoload" code nil nil [173984 174077])
            ("declare-function" code nil nil [174080 174161])
            ("declare-function" code nil nil [174162 174222])
            ("declare-function" code nil nil [174223 174326])
            ("org-at-TBLFM-p" function (:arguments ("pos")) nil [174328 174553])
            ("org-clock-start-time" variable nil nil [174555 174584])
            ("org-clock-marker" variable (:default-value (make-marker)) nil [174585 174664])
            ("org-clock-hd-marker" variable (:default-value (make-marker)) nil [174665 174774])
            ("org-clock-heading" variable nil nil [174775 174848])
            ("org-clock-is-active" function nil nil [174849 175009])
            ("org-autoload" code nil nil [175031 175153])
            ("org-check-running-clock" function nil nil [175156 175569])
            ("org-clocktable-try-shift" function (:arguments ("dir" "n")) nil [175571 175784])
            ("org-clock-persistence-insinuate" function nil nil [175801 175996])
            ("org-indent-mode" variable nil nil [176060 176190])
            ("org-archive" customgroup (:user-visible-flag t) nil [176293 176410])
            ("org-archive-location" variable (:default-value "%s_archive::") nil [176412 178826])
            ("org-archive-tag" variable (:default-value "ARCHIVE") nil [178828 179187])
            ("org-agenda-skip-archived-trees" variable (:default-value t) nil [179189 179585])
            ("org-columns-skip-archived-trees" variable (:default-value t) nil [179587 179763])
            ("org-cycle-open-archived-trees" variable nil nil [179765 180130])
            ("org-sparse-tree-open-archived-trees" variable nil nil [180132 180418])
            ("org-sparse-tree-default-date-type" variable (:default-value (quote scheduled-or-deadline)) nil [180420 181252])
            ("org-cycle-hide-archived-subtrees" function (:arguments ("state")) nil [181254 181920])
            ("org-force-cycle-archived" function (:user-visible-flag t) nil [181922 182128])
            ("org-hide-archived-subtrees" function (:arguments ("beg" "end")) nil [182130 182453])
            ("declare-function" code nil nil [182455 182509])
            ("declare-function" code nil nil [182510 182573])
            ("org-flag-subtree" function (:arguments ("flag")) nil [182574 182767])
            ("defalias" code nil nil [182769 182832])
            ("org-autoload" code nil nil [182854 182909])
            ("declare-function" code nil nil [182942 183028])
            ("declare-function" code nil nil [183029 183101])
            ("declare-function" code nil nil [183102 183165])
            ("org-autoload" code nil nil [183167 183370])
            ("declare-function" code nil nil [183393 183438])
            ("declare-function" code nil nil [183439 183488])
            ("declare-function" code nil nil [183489 183538])
            ("org-id-track-globally" variable nil nil [183539 183569])
            ("org-autoload" code nil nil [183570 183705])
            ("org-drawer-regexp" variable (:default-value "^[ 	]*:PROPERTIES:[ 	]*$") nil [183777 183874])
            ("make-variable-buffer-local" code nil nil [183875 183922])
            ("org-todo-regexp" variable nil nil [183923 183995])
            ("make-variable-buffer-local" code nil nil [183996 184041])
            ("org-not-done-regexp" variable nil nil [184042 184138])
            ("make-variable-buffer-local" code nil nil [184139 184188])
            ("org-not-done-heading-regexp" variable nil nil [184189 184275])
            ("make-variable-buffer-local" code nil nil [184276 184325])
            ("org-todo-line-regexp" variable nil nil [184326 184427])
            ("make-variable-buffer-local" code nil nil [184428 184478])
            ("org-complex-heading-regexp" variable nil nil [184479 184688])
            ("make-variable-buffer-local" code nil nil [184689 184745])
            ("org-complex-heading-regexp-format" variable nil nil [184746 185012])
            ("make-variable-buffer-local" code nil nil [185013 185076])
            ("org-todo-line-tags-regexp" variable nil nil [185077 185231])
            ("make-variable-buffer-local" code nil nil [185232 185287])
            ("org-ds-keyword-length" variable (:default-value 12) nil [185288 185380])
            ("make-variable-buffer-local" code nil nil [185381 185432])
            ("org-deadline-regexp" variable nil nil [185433 185499])
            ("make-variable-buffer-local" code nil nil [185500 185549])
            ("org-deadline-time-regexp" variable nil nil [185550 185648])
            ("make-variable-buffer-local" code nil nil [185649 185703])
            ("org-deadline-time-hour-regexp" variable nil nil [185704 185816])
            ("make-variable-buffer-local" code nil nil [185817 185876])
            ("org-deadline-line-regexp" variable nil nil [185877 185973])
            ("make-variable-buffer-local" code nil nil [185974 186028])
            ("org-scheduled-regexp" variable nil nil [186029 186097])
            ("make-variable-buffer-local" code nil nil [186098 186148])
            ("org-scheduled-time-regexp" variable nil nil [186149 186249])
            ("make-variable-buffer-local" code nil nil [186250 186305])
            ("org-scheduled-time-hour-regexp" variable nil nil [186306 186420])
            ("make-variable-buffer-local" code nil nil [186421 186481])
            ("org-closed-time-regexp" variable nil nil [186482 186576])
            ("make-variable-buffer-local" code nil nil [186577 186629])
            ("org-keyword-time-regexp" variable nil nil [186631 186732])
            ("make-variable-buffer-local" code nil nil [186733 186786])
            ("org-keyword-time-not-clock-regexp" variable nil nil [186787 186898])
            ("make-variable-buffer-local" code nil nil [186899 186962])
            ("org-maybe-keyword-time-regexp" variable nil nil [186963 187062])
            ("make-variable-buffer-local" code nil nil [187063 187122])
            ("org-all-time-keywords" variable nil nil [187123 187184])
            ("make-variable-buffer-local" code nil nil [187185 187236])
            ("org-plain-time-of-day-regexp" variable
               (:constant-flag t
                :default-value (concat "\\(\\<[012]?[0-9]" "\\(\\(:\\([0-5][0-9]\\([AaPp][Mm]\\)?\\)\\)\\|\\([AaPp][Mm]\\)\\)\\>\\)" "\\(--?" "\\(\\<[012]?[0-9]" "\\(\\(:\\([0-5][0-9]\\([AaPp][Mm]\\)?\\)\\)\\|\\([AaPp][Mm]\\)\\)\\>\\)" "\\)?"))
                nil [187238 187770])
            ("org-plain-time-extension-regexp" variable
               (:constant-flag t
                :default-value (concat "\\(\\<[012]?[0-9]" "\\(\\(:\\([0-5][0-9]\\([AaPp][Mm]\\)?\\)\\)\\|\\([AaPp][Mm]\\)\\)\\>\\)" "\\+\\([0-9]+\\)\\(:\\([0-5][0-9]\\)\\)?"))
                nil [187772 188220])
            ("org-stamp-time-of-day-regexp" variable
               (:constant-flag t
                :default-value (concat "<\\([0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\} +\\sw+ +\\)" "\\([012][0-9]:[0-5][0-9]\\(-\\([012][0-9]:[0-5][0-9]\\)\\)?[^
>]*?\\)>" "\\(--?" "<\\1\\([012][0-9]:[0-5][0-9]\\)>\\)?"))
                nil [188222 188769])
            ("org-startup-options" variable
               (:constant-flag t
                :default-value (quote (("fold" org-startup-folded t) ("overview" org-startup-folded t) ("nofold" org-startup-folded nil) ("showall" org-startup-folded nil) ("showeverything" org-startup-folded showeverything) ("content" org-startup-folded content) ("indent" org-startup-indented t) ("noindent" org-startup-indented nil) ("hidestars" org-hide-leading-stars t) ("showstars" org-hide-leading-stars nil) ("odd" org-odd-levels-only t) ("oddeven" org-odd-levels-only nil) ("align" org-startup-align-all-tables t) ("noalign" org-startup-align-all-tables nil) ("inlineimages" org-startup-with-inline-images t) ("noinlineimages" org-startup-with-inline-images nil) ("latexpreview" org-startup-with-latex-preview t) ("nolatexpreview" org-startup-with-latex-preview nil) ("customtime" org-display-custom-times t) ("logdone" org-log-done time) ("lognotedone" org-log-done note) ("nologdone" org-log-done nil) ("lognoteclock-out" org-log-note-clock-out t) ("nolognoteclock-out" org-log-note-clock-out nil) ("logrepeat" org-log-repeat state) ("lognoterepeat" org-log-repeat note) ("logdrawer" org-log-into-drawer t) ("nologdrawer" org-log-into-drawer nil) ("logstatesreversed" org-log-states-order-reversed t) ("nologstatesreversed" org-log-states-order-reversed nil) ("nologrepeat" org-log-repeat nil) ("logreschedule" org-log-reschedule time) ("lognotereschedule" org-log-reschedule note) ("nologreschedule" org-log-reschedule nil) ("logredeadline" org-log-redeadline time) ("lognoteredeadline" org-log-redeadline note) ("nologredeadline" org-log-redeadline nil) ("logrefile" org-log-refile time) ("lognoterefile" org-log-refile note) ("nologrefile" org-log-refile nil) ("fninline" org-footnote-define-inline t) ("nofninline" org-footnote-define-inline nil) ("fnlocal" org-footnote-section nil) ("fnauto" org-footnote-auto-label t) ("fnprompt" org-footnote-auto-label nil) ("fnconfirm" org-footnote-auto-label confirm) ("fnplain" org-footnote-auto-label plain) ("fnadjust" org-footnote-auto-adjust t) ("nofnadjust" org-footnote-auto-adjust nil) ("constcgs" constants-unit-system cgs) ("constSI" constants-unit-system SI) ("noptag" org-tag-persistent-alist nil) ("hideblocks" org-hide-block-startup t) ("nohideblocks" org-hide-block-startup nil) ("beamer" org-startup-with-beamer-mode t) ("entitiespretty" org-pretty-entities t) ("entitiesplain" org-pretty-entities nil))))
                nil [188771 191697])
            ("org-update-property-plist" function (:arguments ("key" "val" "props")) nil [191699 192157])
            ("org-block-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*#\\+begin_?\\([^ 
]+\\)\\(\\([^
]+\\)\\)?
\\([^ ]+?\\)#\\+end_?\\1[ 	]*$")
                nil [192159 192319])
            ("org-heading-keyword-regexp-format" variable
               (:constant-flag t
                :default-value "^\\(\\*+\\)\\(?: +%s\\)\\(?: +\\(.*?\\)\\)?[ 	]*$")
                nil [192320 192670])
            ("org-heading-keyword-maybe-regexp-format" variable
               (:constant-flag t
                :default-value "^\\(\\*+\\)\\(?: +%s\\)?\\(?: +\\(.*?\\)\\)?[ 	]*$")
                nil [192671 193018])
            ("org-group-tags" variable (:default-value t) nil [193020 193214])
            ("org-toggle-tags-groups" function (:user-visible-flag t) nil [193216 193699])
            ("org-set-regexps-and-options-for-tags" function nil nil [193701 196381])
            ("org-ota" variable nil nil [196383 196403])
            ("org-set-regexps-and-options" function nil nil [196404 207549])
            ("org-file-contents" function (:arguments ("file" "noerror")) nil [207551 207884])
            ("org-extract-log-state-settings" function (:arguments ("x")) nil [207886 208490])
            ("org-remove-keyword-keys" function (:arguments ("list")) nil [208492 208712])
            ("org-assign-fast-keys" function (:arguments ("alist")) nil [208714 209356])
            ("org-window-configuration" variable nil nil [209401 209498])
            ("org-selected-window" variable nil nil [209499 209591])
            ("org-finish-function" variable nil nil [209592 209731])
            ("org-no-warnings" code nil nil [209867 209899])
            ("org-last-state" variable nil nil [209932 209955])
            ("org-no-warnings" code nil nil [209956 209987])
            ("org-entities" variable nil nil [210084 210105])
            ("org-struct-menu" variable nil nil [210140 210164])
            ("org-org-menu" variable nil nil [210165 210186])
            ("org-tbl-menu" variable nil nil [210187 210208])
            ("org-table-may-need-update" variable (:default-value t) nil [210316 210494])
            ("org-before-change-function" function (:arguments ("beg" "end")) nil [210495 210638])
            ("org-mode-map" variable nil nil [210639 210660])
            ("org-inhibit-startup" variable nil nil [210661 210693])
            ("org-inhibit-startup-visibility-stuff" variable nil nil [210729 210778])
            ("org-agenda-keep-modes" variable nil nil [210807 210841])
            ("org-inhibit-logging" variable nil nil [210875 210907])
            ("org-inhibit-blocking" variable nil nil [210943 210976])
            ("org-table-buffer-is-an" variable nil nil [211011 211046])
            ("bidi-paragraph-direction" variable nil nil [211048 211081])
            ("buffer-face-mode-face" variable nil nil [211082 211112])
            ("outline" include nil nil [211114 211132])
            ("if" code nil nil [211133 211350])
            ("noutline" include (:directory "noutline") nil [211351 211390])
            ("time-date" include nil nil [211449 211469])
            ("unless" code nil nil [211470 211544])
            ("easymenu" include nil nil [211545 211564])
            ("overlay" include nil nil [211565 211583])
            ("org-entities" include nil nil [211660 211683])
            ("org-faces" include nil nil [211761 211781])
            ("org-list" include nil nil [211782 211801])
            ("org-pcomplete" include nil nil [211802 211826])
            ("org-src" include nil nil [211827 211845])
            ("org-footnote" include nil nil [211846 211869])
            ("org-macro" include nil nil [211870 211890])
            ("ob" include nil nil [211901 211914])
            ("define-derived-mode" code nil nil [211931 218694])
            ("add-to-list" code nil nil [218746 218916])
            ("org-mode-transpose-word-syntax-table" variable (:default-value (let ((st (make-syntax-table))) (mapc (lambda (c) (modify-syntax-entry (string-to-char (car c)) "w p" st)) org-emphasis-alist) st)) nil [218918 219114])
            ("when" code nil nil [219116 219238])
            ("put" code nil nil [219240 219306])
            ("org-fix-ellipsis-at-bol" function nil nil [219308 219404])
            ("org-find-invisible-foreground" function nil nil [219406 219888])
            ("org-current-time" function (:arguments ("rounding-minutes" "past")) nil [219890 220619])
            ("org-today" function nil nil [220621 220800])
            ("org-mouse-map" variable (:default-value (make-sparse-keymap)) nil [220850 220893])
            ("org-defkey" code nil nil [220894 220949])
            ("org-defkey" code nil nil [220950 221010])
            ("when" code nil nil [221011 221097])
            ("when" code nil nil [221098 221236])
            ("font-lock" include nil nil [221238 221258])
            ("org-non-link-chars" variable
               (:constant-flag t
                :default-value "]	
<>")
                nil [221260 221301])
            ("org-link-types" variable (:default-value (quote ("http" "https" "ftp" "mailto" "file" "news" "shell" "elisp" "doi" "message"))) nil [221302 221408])
            ("org-link-types-re" variable nil nil [221409 221500])
            ("org-link-re-with-space" variable nil nil [221501 221605])
            ("org-link-re-with-space2" variable nil nil [221606 221711])
            ("org-link-re-with-space3" variable nil nil [221712 221821])
            ("org-angle-link-re" variable nil nil [221822 221912])
            ("org-plain-link-re" variable nil nil [221913 221983])
            ("org-bracket-link-regexp" variable nil nil [221984 222059])
            ("org-bracket-link-analytic-regexp" variable nil nil [222060 222247])
            ("org-bracket-link-analytic-regexp++" variable nil nil [222248 222375])
            ("org-any-link-re" variable nil nil [222376 222446])
            ("org-match-sexp-depth" variable
               (:constant-flag t
                :default-value 3)
                nil [222448 222540])
            ("org-create-multibrace-regexp" function (:arguments ("left" "right" "n")) nil [222542 223343])
            ("org-match-substring-regexp" variable (:default-value (concat "\\(\\S-\\)\\([_^]\\)\\(" "\\(" (org-create-multibrace-regexp "{" "}" org-match-sexp-depth) "\\)" "\\|" "\\(" (org-create-multibrace-regexp "(" ")" org-match-sexp-depth) "\\)" "\\|" "\\(\\(?:\\*\\|[-+]?[^-+*!@#$%^_ 	
,:\"?<>~;./{}=()]+\\)\\)\\)")) nil [223345 223718])
            ("org-match-substring-with-braces-regexp" variable (:default-value (concat "\\(\\S-\\)\\([_^]\\)\\(" "\\(" (org-create-multibrace-regexp "{" "}" org-match-sexp-depth) "\\)" "\\)")) nil [223720 223966])
            ("org-make-link-regexps" function nil nil [223968 225751])
            ("org-make-link-regexps" code nil nil [225753 225776])
            ("org-ts-regexp" variable
               (:constant-flag t
                :default-value "<\\([0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\} ?[^
>]*?\\)>")
                nil [225778 225916])
            ("org-ts-regexp-both" variable
               (:constant-flag t
                :default-value "[[<]\\([0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\} ?[^]
>]*?\\)[]>]")
                nil [225917 226067])
            ("org-ts-regexp0" variable
               (:constant-flag t
                :default-value "\\(\\([0-9]\\{4\\}\\)-\\([0-9]\\{2\\}\\)-\\([0-9]\\{2\\}\\)\\( +[^]+0-9>
 -]+\\)?\\( +\\([0-9]\\{1,2\\}\\):\\([0-9]\\{2\\}\\)\\)?\\)")
                nil [226068 226418])
            ("org-ts-regexp1" variable
               (:constant-flag t
                :default-value "\\(\\([0-9]\\{4\\}\\)-\\([0-9]\\{2\\}\\)-\\([0-9]\\{2\\}\\) *\\([^]+0-9>
 -]*\\)\\( \\([0-9]\\{1,2\\}\\):\\([0-9]\\{2\\}\\)\\)?\\)")
                nil [226419 226639])
            ("org-ts-regexp2" variable
               (:constant-flag t
                :default-value (concat "<" org-ts-regexp1 "[^>
]\\{0,16\\}>"))
                nil [226640 226771])
            ("org-ts-regexp3" variable
               (:constant-flag t
                :default-value (concat "[[<]" org-ts-regexp1 "[^]>
]\\{0,16\\}[]>]"))
                nil [226772 226922])
            ("org-tr-regexp" variable
               (:constant-flag t
                :default-value (concat org-ts-regexp "--?-?" org-ts-regexp))
                nil [226923 227044])
            ("org-tr-regexp-both" variable
               (:constant-flag t
                :default-value (concat org-ts-regexp-both "--?-?" org-ts-regexp-both))
                nil [227045 227183])
            ("org-tsr-regexp" variable
               (:constant-flag t
                :default-value (concat org-ts-regexp "\\(--?-?" org-ts-regexp "\\)?"))
                nil [227184 227335])
            ("org-tsr-regexp-both" variable
               (:constant-flag t
                :default-value (concat org-ts-regexp-both "\\(--?-?" org-ts-regexp-both "\\)?"))
                nil [227336 227552])
            ("org-emph-face" variable nil nil [227554 227580])
            ("org-do-emphasis-faces" function (:arguments ("limit")) nil [227582 228513])
            ("org-emphasize" function
               (:user-visible-flag t
                :arguments ("char"))
                nil [228515 230210])
            ("org-nonsticky-props" variable
               (:constant-flag t
                :default-value (quote (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link)))
                nil [230212 230335])
            ("org-rear-nonsticky-at" function (:arguments ("pos")) nil [230337 230455])
            ("org-activate-plain-links" function (:arguments ("limit")) nil [230457 231166])
            ("org-activate-code" function (:arguments ("limit")) nil [231168 231459])
            ("org-src-fontify-natively" variable nil nil [231461 231628])
            ("org-allow-promoting-top-level-subtree" variable nil nil [231630 231866])
            ("org-fontify-meta-lines-and-blocks" function (:arguments ("limit")) nil [231868 232043])
            ("org-fontify-meta-lines-and-blocks-1" function (:arguments ("limit")) nil [232045 236389])
            ("org-activate-angle-links" function (:arguments ("limit")) nil [236391 236824])
            ("org-activate-footnote-links" function (:arguments ("limit")) nil [236826 237398])
            ("org-activate-bracket-links" function (:arguments ("limit")) nil [237400 239010])
            ("org-activate-dates" function (:arguments ("limit")) nil [239012 239650])
            ("org-target-link-regexp" variable nil nil [239652 239748])
            ("make-variable-buffer-local" code nil nil [239749 239801])
            ("org-target-regexp" variable (:default-value "<<\\([^<>
]+\\)>>") nil [239802 239898])
            ("org-radio-target-regexp" variable (:default-value "<<<\\([^<>
]+\\)>>>") nil [239899 240004])
            ("org-any-target-regexp" variable (:default-value "<<<?\\([^<>
]+\\)>>>?") nil [240005 240167])
            ("org-activate-target-links" function (:arguments ("limit")) nil [240169 240735])
            ("org-update-radio-target-regexp" function (:user-visible-flag t) nil [240737 241031])
            ("org-hide-wide-columns" function (:arguments ("limit")) nil [241033 241351])
            ("org-latex-and-related-regexp" variable nil nil [241353 241471])
            ("org-match-substring-regexp" variable nil nil [241472 241507])
            ("org-match-substring-with-braces-regexp" variable nil nil [241508 241555])
            ("org-compute-latex-and-related-regexp" function nil nil [241557 242546])
            ("org-do-latex-and-related" function (:arguments ("limit")) nil [242548 243448])
            ("org-restart-font-lock" function nil nil [243450 243640])
            ("org-all-targets" function (:arguments ("radio")) nil [243642 244207])
            ("org-make-target-link-regexp" function (:arguments ("targets")) nil [244209 244614])
            ("org-activate-tags" function (:arguments ("limit")) nil [244616 244989])
            ("org-outline-level" function nil nil [244991 245406])
            ("org-font-lock-keywords" variable nil nil [245408 245443])
            ("org-re-property" function (:arguments ("property" "literal")) nil [245445 245748])
            ("org-property-re" variable
               (:constant-flag t
                :default-value (org-re-property ".*?" (quote literal)))
                nil [245750 246109])
            ("org-font-lock-hook" variable nil nil [246111 246198])
            ("org-font-lock-set-keywords-hook" variable nil nil [246200 246530])
            ("org-font-lock-hook" function (:arguments ("limit")) nil [246532 246658])
            ("org-set-font-lock-defaults" function nil nil [246660 251044])
            ("org-toggle-pretty-entities" function (:user-visible-flag t) nil [251046 251497])
            ("org-custom-properties-overlays" variable nil nil [251499 251591])
            ("make-variable-buffer-local" code nil nil [251592 251652])
            ("org-toggle-custom-properties-visibility" function (:user-visible-flag t) nil [251654 252406])
            ("org-fontify-entities" function (:arguments ("limit")) nil [252408 253089])
            ("org-fontify-like-in-org-mode" function (:arguments ("s" "odd-levels")) nil [253091 253344])
            ("org-m" variable nil nil [253346 253364])
            ("org-l" variable nil nil [253365 253383])
            ("org-f" variable nil nil [253384 253402])
            ("org-get-level-face" function (:arguments ("n")) nil [253403 253929])
            ("org-get-todo-face" function (:arguments ("kwd")) nil [253932 254286])
            ("org-face-from-face-or-color" function (:arguments ("context" "inherit" "face-or-color")) nil [254288 254635])
            ("org-font-lock-add-tag-faces" function (:arguments ("limit")) nil [254637 254986])
            ("org-font-lock-add-priority-faces" function (:arguments ("limit")) nil [254988 255462])
            ("org-get-tag-face" function (:arguments ("kwd")) nil [255464 255752])
            ("org-unfontify-region" function (:arguments ("beg" "end" "maybe_loudly")) nil [255754 256345])
            ("org-script-display" variable
               (:constant-flag t
                :default-value (quote (((raise -0.3) (height 0.7)) ((raise 0.3) (height 0.7)) ((raise -0.5)) ((raise 0.5)))))
                nil [256347 256541])
            ("org-remove-font-lock-display-properties" function (:arguments ("beg" "end")) nil [256543 257029])
            ("org-raise-scripts" function (:arguments ("limit")) nil [257031 258622])
            ("org-cycle-global-status" variable nil nil [258702 258738])
            ("make-variable-buffer-local" code nil nil [258739 258792])
            ("put" code nil nil [258793 258836])
            ("org-cycle-subtree-status" variable nil nil [258837 258874])
            ("make-variable-buffer-local" code nil nil [258875 258929])
            ("put" code nil nil [258930 258974])
            ("org-inlinetask-min-level" variable nil nil [258976 259009])
            ("org-cycle" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [259026 265249])
            ("org-cycle-internal-global" function nil nil [265251 266626])
            ("org-cycle-internal-local" function nil nil [266628 271041])
            ("org-global-cycle" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [271058 271702])
            ("org-set-startup-visibility" function nil nil [271704 272287])
            ("org-set-visibility-according-to-property" function
               (:user-visible-flag t
                :arguments ("no-cleanup"))
                nil [272289 273199])
            ("org-overview" function (:user-visible-flag t) nil [273382 274032])
            ("org-content" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [274034 274639])
            ("org-optimize-window-after-visibility-change" function (:arguments ("state")) nil [274642 275127])
            ("org-remove-empty-overlays-at" function (:arguments ("pos")) nil [275129 275452])
            ("org-clean-visibility-after-subtree-move" function nil nil [275454 276440])
            ("org-cycle-show-empty-lines" function (:arguments ("state")) nil [276442 278220])
            ("org-show-empty-lines-in-parent" function nil nil [278222 278467])
            ("org-files-list" function nil nil [278469 278967])
            ("org-entry-beginning-position" function nil nil [278969 279122])
            ("org-entry-end-position" function nil nil [279124 279260])
            ("org-cycle-hide-drawers" function (:arguments ("state")) nil [279262 279830])
            ("org-cycle-hide-inline-tasks" function (:arguments ("state")) nil [279832 280104])
            ("org-flag-drawer" function (:arguments ("flag")) nil [280106 280559])
            ("org-subtree-end-visible-p" function nil nil [280561 280723])
            ("org-first-headline-recenter" function (:arguments ("N")) nil [280725 281081])
            ("org-outline-overlay-data" function (:arguments ("use-markers")) nil [281120 281879])
            ("org-set-outline-overlay-data" function (:arguments ("data")) nil [281881 282194])
            ("org-hide-block-overlays" variable nil nil [282219 282283])
            ("make-variable-buffer-local" code nil nil [282284 282337])
            ("org-block-map" function (:arguments ("function" "start" "end")) nil [282339 282844])
            ("org-hide-block-toggle-all" function nil nil [282846 282987])
            ("org-hide-block-all" function (:user-visible-flag t) nil [282989 283148])
            ("org-show-block-all" function (:user-visible-flag t) nil [283150 283326])
            ("org-hide-block-toggle-maybe" function (:user-visible-flag t) nil [283328 283652])
            ("org-hide-block-toggle" function
               (:user-visible-flag t
                :arguments ("force"))
                nil [283683 285367])
            ("add-hook" code nil nil [285409 285468])
            ("add-hook" code nil nil [285513 285634])
            ("org-goto-window-configuration" variable nil nil [285650 285692])
            ("org-goto-marker" variable nil nil [285693 285721])
            ("org-goto-map" variable nil nil [285722 285743])
            ("org-goto-map" function nil nil [285744 287334])
            ("org-goto-help" variable
               (:constant-flag t
                :default-value "Browse buffer copy, to find location or copy text.%s
RET=jump to location             C-g=quit and return to previous location
[Up]/[Down]=next/prev headline   TAB=cycle visibility   [/] org-occur")
                nil [287336 287562])
            ("org-goto-start-pos" variable nil nil [287564 287591])
            ("org-goto" function
               (:user-visible-flag t
                :arguments ("alternative-interface"))
                nil [287624 289418])
            ("org-goto-selected-point" variable nil nil [289420 289456])
            ("org-goto-exit-command" variable nil nil [289488 289522])
            ("org-goto-local-auto-isearch-map" variable nil nil [289554 289594])
            ("org-get-location" function (:arguments ("buf" "help")) nil [289612 291353])
            ("org-goto-local-auto-isearch-map" variable (:default-value (make-sparse-keymap)) nil [291355 291416])
            ("set-keymap-parent" code nil nil [291417 291485])
            ("define-key" code nil nil [291486 291565])
            ("define-key" code nil nil [291566 291645])
            ("org-goto-local-search-headings" function (:arguments ("string" "bound" "noerror")) nil [291647 292100])
            ("org-goto-local-auto-isearch" function (:user-visible-flag t) nil [292102 292393])
            ("org-goto-ret" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [292395 292595])
            ("org-goto-left" function (:user-visible-flag t) nil [292597 292882])
            ("org-goto-right" function (:user-visible-flag t) nil [292884 293148])
            ("org-goto-quit" function (:user-visible-flag t) nil [293150 293329])
            ("org-indirect-dedicated-frame" variable nil nil [293372 293473])
            ("org-last-indirect-buffer" variable nil nil [293474 293511])
            ("org-tree-to-indirect-buffer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [293513 296238])
            ("org-get-indirect-buffer" function (:arguments ("buffer")) nil [296240 296631])
            ("org-set-frame-title" function (:arguments ("title")) nil [296633 296883])
            ("org-previous-line-empty-p" function (:arguments ("next")) nil [296934 297206])
            ("org-insert-heading" function
               (:user-visible-flag t
                :arguments ("arg" "invisible-ok"))
                nil [297208 301912])
            ("org-N-empty-lines-before-current" function (:arguments ("N")) nil [301914 302265])
            ("org-get-heading" function (:arguments ("no-tags" "no-todo")) nil [302267 302925])
            ("orgstruct-mode" variable nil nil [302927 302950])
            ("org-heading-components" function nil nil [302970 304141])
            ("org-get-entry" function nil nil [304143 304332])
            ("org-insert-heading-after-current" function (:user-visible-flag t) nil [304334 304560])
            ("org-insert-heading-respect-content" function
               (:user-visible-flag t
                :arguments ("arg" "invisible-ok"))
                nil [304562 304816])
            ("org-insert-todo-heading-respect-content" function
               (:user-visible-flag t
                :arguments ("force-state"))
                nil [304818 305078])
            ("org-insert-todo-heading" function
               (:user-visible-flag t
                :arguments ("arg" "force-heading"))
                nil [305080 306315])
            ("org-insert-subheading" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [306317 306584])
            ("org-insert-todo-subheading" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [306586 306893])
            ("org-after-demote-entry-hook" variable nil nil [306923 307131])
            ("org-after-promote-entry-hook" variable nil nil [307133 307344])
            ("org-promote-subtree" function (:user-visible-flag t) nil [307346 307560])
            ("org-demote-subtree" function (:user-visible-flag t) nil [307562 307792])
            ("org-do-promote" function (:user-visible-flag t) nil [307795 308142])
            ("org-do-demote" function (:user-visible-flag t) nil [308144 308487])
            ("org-fix-position-after-promote" function nil nil [308489 308885])
            ("org-current-level" function nil nil [308887 309187])
            ("org-get-previous-line-level" function nil nil [309189 309683])
            ("org-reduced-level" function (:arguments ("l")) nil [309685 309903])
            ("org-level-increment" function nil nil [309905 310119])
            ("org-get-valid-level" function (:arguments ("level" "change")) nil [310121 310705])
            ("if" code nil nil [310707 310980])
            ("org-called-with-limited-levels" variable nil nil [310982 311025])
            ("org-promote" function nil nil [311079 312023])
            ("org-demote" function nil nil [312025 312709])
            ("org-cycle-level" function (:user-visible-flag t) nil [312711 314259])
            ("org-map-tree" function (:arguments ("fun")) nil [314261 314582])
            ("org-map-region" function (:arguments ("fun" "beg" "end")) nil [314584 315000])
            ("org-property-end-re" variable nil nil [315002 315030])
            ("org-fixup-indentation" function (:arguments ("diff")) nil [315055 315836])
            ("org-convert-to-odd-levels" function (:user-visible-flag t) nil [315838 316420])
            ("org-convert-to-oddeven-levels" function (:user-visible-flag t) nil [316422 317400])
            ("org-tr-level" function (:arguments ("n")) nil [317402 317496])
            ("org-move-subtree-up" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [317557 317747])
            ("org-move-subtree-down" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [317749 320430])
            ("org-subtree-clip" variable nil nil [320432 320652])
            ("org-subtree-clip-folded" variable nil nil [320654 320780])
            ("org-cut-subtree" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [320782 321035])
            ("org-copy-subtree" function
               (:user-visible-flag t
                :arguments ("n" "cut" "force-store-markers" "nosubtrees"))
                nil [321037 322493])
            ("org-paste-subtree" function
               (:user-visible-flag t
                :arguments ("level" "tree" "for-yank"))
                nil [322495 326585])
            ("org-kill-is-subtree-p" function (:arguments ("txt")) nil [326587 327595])
            ("org-markers-to-move" variable nil nil [327597 327786])
            ("org-save-markers-in-region" function (:arguments ("beg" "end")) nil [327788 328431])
            ("org-check-and-save-marker" function (:arguments ("marker" "beg" "end")) nil [328433 328775])
            ("org-reinstall-markers-in-region" function (:arguments ("beg")) nil [328777 329006])
            ("org-narrow-to-subtree" function (:user-visible-flag t) nil [329008 329357])
            ("org-narrow-to-block" function (:user-visible-flag t) nil [329359 329657])
            ("org-property-drawer-re" variable nil nil [329680 329711])
            ("org-property-start-re" variable nil nil [329714 329744])
            ("org-clone-subtree-with-time-shift" function
               (:user-visible-flag t
                :arguments ("n" "shift"))
                nil [329763 333707])
            ("org-sort" function
               (:user-visible-flag t
                :arguments ("with-case"))
                nil [333730 334115])
            ("org-sort-remove-invisible" function (:arguments ("s")) nil [334117 334599])
            ("org-priority-regexp" variable nil nil [334601 334629])
            ("org-after-sorting-entries-or-items-hook" variable nil nil [334659 334978])
            ("org-sort-entries" function
               (:user-visible-flag t
                :arguments ("with-case" "sorting-type" "getkey-func" "compare-func" "property"))
                nil [334980 342700])
            ("org-do-sort" function (:arguments ("table" "what" "with-case" "sorting-type")) nil [342702 344275])
            ("orgstruct-heading-prefix-regexp" variable nil nil [345259 345470])
            ("orgstruct-setup-hook" variable nil nil [345555 345720])
            ("orgstruct-initialized" variable nil nil [345722 345756])
            ("org-local-vars" variable nil nil [345758 345843])
            ("define-minor-mode" code nil nil [345860 346458])
            ("turn-on-orgstruct" function nil nil [346475 346570])
            ("org-fb-vars" variable nil nil [346572 346596])
            ("make-variable-buffer-local" code nil nil [346597 346638])
            ("orgstruct++-mode" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [346639 347756])
            ("orgstruct-is-++" variable nil nil [347758 347847])
            ("make-variable-buffer-local" code nil nil [347848 347893])
            ("turn-on-orgstruct++" function nil nil [347910 348011])
            ("orgstruct-error" function (:user-visible-flag t) nil [348013 348249])
            ("orgstruct-setup" function nil nil [348251 350233])
            ("orgstruct-make-binding" function (:arguments ("fun" "key" "disable-when-heading-prefix")) nil [350235 353089])
            ("org-contextualize-keys" function (:arguments ("alist" "contexts")) nil [353091 354525])
            ("org-contextualize-validate-key" function (:arguments ("key" "contexts")) nil [354527 355474])
            ("org-context-p" function (:arguments ("contexts")) nil [355476 356021])
            ("org-get-local-variables" function nil nil [356023 356822])
            ("org-clone-local-variables" function (:arguments ("from-buffer" "regexp")) nil [356824 357222])
            ("org-run-like-in-org-mode" function (:arguments ("cmd")) nil [357239 357876])
            ("org-get-category" function (:arguments ("pos" "force-refresh")) nil [357894 358242])
            ("org-refresh-category-properties" function nil nil [358244 359331])
            ("org-refresh-properties" function (:arguments ("dprop" "tprop")) nil [359333 359934])
            ("org-link-expand-abbrev" function (:arguments ("link")) nil [359978 360781])
            ("org-insert-link-history" variable nil nil [360816 360918])
            ("org-stored-links" variable nil nil [360920 361002])
            ("org-store-link-plist" variable nil nil [361004 361117])
            ("org-link-protocols" variable nil nil [361119 361214])
            ("org-store-link-functions" variable nil nil [361216 362171])
            ("org-add-link-type" function (:arguments ("type" "follow" "export")) nil [362173 363670])
            ("org-agenda-buffer-name" variable nil nil [363672 363703])
            ("org-id-link-to-org-use-id" variable nil nil [363731 363765])
            ("org-store-link" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [363805 372096])
            ("org-store-link-props" function (:arguments ("plist")) nil [372098 372946])
            ("org-add-link-props" function (:arguments ("plist")) nil [372948 373207])
            ("org-email-link-description" function (:arguments ("fmt")) nil [373209 374325])
            ("org-make-org-heading-search-string" function (:arguments ("string")) nil [374327 375130])
            ("org-make-link-string" function (:arguments ("link" "description")) nil [375132 376393])
            ("org-link-escape-chars" variable
               (:constant-flag t
                :default-value (quote (32 91 93 59 61 43)))
                nil [376395 376563])
            ("org-link-escape-chars-browser" variable
               (:constant-flag t
                :default-value (quote (32 34)))
                nil [376565 376750])
            ("org-link-escape" function (:arguments ("text" "table" "merge")) nil [376752 377704])
            ("org-link-unescape" function (:arguments ("str")) nil [377706 378194])
            ("org-link-unescape-compound" function (:arguments ("hex")) nil [378196 379296])
            ("org-link-unescape-single-byte-sequence" function (:arguments ("hex")) nil [379298 379528])
            ("org-xor" function (:arguments ("a" "b")) nil [379530 379588])
            ("org-fixup-message-id-for-http" function (:arguments ("s")) nil [379590 380075])
            ("org-link-prettify" function (:arguments ("link")) nil [380077 380403])
            ("org-insert-link-global" function (:user-visible-flag t) nil [380420 380656])
            ("org-insert-all-links" function
               (:user-visible-flag t
                :arguments ("keep"))
                nil [380658 380995])
            ("org-link-fontify-links-to-this-file" function nil nil [380997 381757])
            ("org-link-links-in-this-file" variable nil nil [381759 381799])
            ("org-insert-link" function
               (:user-visible-flag t
                :arguments ("complete-file" "link-location" "default-description"))
                nil [381800 389531])
            ("org-link-try-special-completion" function (:arguments ("type")) nil [389533 389818])
            ("org-file-complete-link" function (:arguments ("arg")) nil [389820 390614])
            ("org-iread-file-name" function (:arguments ("args")) nil [390616 391165])
            ("org-completing-read" function (:arguments ("args")) nil [391167 391665])
            ("org-completing-read-no-i" function (:arguments ("args")) nil [391667 391811])
            ("org-iswitchb-completing-read" function (:arguments ("prompt" "choices" "args")) nil [391813 392199])
            ("org-icompleting-read" function (:arguments ("args")) nil [392201 392996])
            ("org-extract-attributes" function (:arguments ("s")) nil [392998 393520])
            ("org-link-search-failed" variable nil nil [393552 393587])
            ("org-open-link-functions" variable nil nil [393589 394407])
            ("org-next-link" function
               (:user-visible-flag t
                :arguments ("search-backward"))
                nil [394409 395333])
            ("org-previous-link" function (:user-visible-flag t) nil [395335 395490])
            ("org-translate-link" function (:arguments ("s")) nil [395492 395874])
            ("org-translate-link-from-planner" function (:arguments ("type" "path")) nil [395876 396814])
            ("org-find-file-at-mouse" function
               (:user-visible-flag t
                :arguments ("ev"))
                nil [396816 396962])
            ("org-open-at-mouse" function
               (:user-visible-flag t
                :arguments ("ev"))
                nil [396964 397253])
            ("org-window-config-before-follow-link" variable nil nil [397255 397411])
            ("org-open-link-marker" variable (:default-value (make-marker)) nil [397413 397530])
            ("org-open-at-point-global" function (:user-visible-flag t) nil [397547 397766])
            ("org-open-link-from-string" function
               (:user-visible-flag t
                :arguments ("s" "arg" "reference-buffer"))
                nil [397783 398316])
            ("org-open-at-point-functions" variable nil nil [398318 398567])
            ("clean-buffer-list-kill-buffer-names" variable nil nil [398569 398613])
            ("org-open-at-point" function
               (:user-visible-flag t
                :arguments ("arg" "reference-buffer"))
                nil [398639 407482])
            ("org-offer-links-in-entry" function (:arguments ("buffer" "marker" "nth" "zero")) nil [407484 409848])
            ("org-add-link-type" code nil nil [409909 409966])
            ("org-add-link-type" code nil nil [409967 410025])
            ("org-open-file-with-system" function (:arguments ("path")) nil [410026 410155])
            ("org-open-file-with-emacs" function (:arguments ("path")) nil [410156 410257])
            ("org-create-file-search-functions" variable nil nil [410277 411369])
            ("org-execute-file-search-functions" variable nil nil [411371 412423])
            ("org-link-search-inhibit-query" variable nil nil [412425 412467])
            ("org-link-search" function (:arguments ("s" "type" "avoid-pos" "stealth")) nil [412490 417840])
            ("org-search-not-self" function (:arguments ("group" "args")) nil [417842 418625])
            ("org-get-buffer-for-internal-link" function (:arguments ("buffer")) nil [418627 419275])
            ("org-do-occur" function (:arguments ("regexp" "cleanup")) nil [419277 420000])
            ("org-mark-ring" variable nil nil [420037 420117])
            ("org-mark-ring-last-goto" variable nil nil [420118 420206])
            ("setq" code nil nil [420234 420286])
            ("loop" code nil nil [420315 420402])
            ("setcdr" code nil nil [420403 420475])
            ("org-mark-ring-push" function
               (:user-visible-flag t
                :arguments ("pos" "buffer"))
                nil [420477 420932])
            ("org-mark-ring-goto" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [420934 421688])
            ("org-remove-angle-brackets" function (:arguments ("s")) nil [421690 421857])
            ("org-add-angle-brackets" function (:arguments ("s")) nil [421858 422025])
            ("org-remove-double-quotes" function (:arguments ("s")) nil [422026 422194])
            ("org-follow-timestamp-link" function nil nil [422226 423058])
            ("declare-function" code nil nil [423086 423160])
            ("declare-function" code nil nil [423161 423222])
            ("declare-function" code nil nil [423223 423310])
            ("org-wait" variable nil nil [423311 423332])
            ("org-open-file" function (:arguments ("path" "in-emacs" "line" "search")) nil [423333 428680])
            ("org-file-apps-entry-match-against-dlink-p" function (:arguments ("entry")) nil [428682 429346])
            ("org-default-apps" function nil nil [429348 429616])
            ("org-apps-regexp-alist" function (:arguments ("list" "add-auto-mode")) nil [429618 430282])
            ("ange-ftp-name-format" variable nil nil [430284 430313])
            ("org-file-remote-p" function (:arguments ("file")) nil [430348 430867])
            ("org-get-org-file" function nil nil [430885 431156])
            ("org-notes-order-reversed-p" function nil nil [431158 431592])
            ("org-refile-target-table" variable nil nil [431594 431687])
            ("org-agenda-new-buffers" variable nil nil [431689 431767])
            ("org-refile-cache" variable nil nil [431769 431828])
            ("org-refile-markers" variable nil nil [431830 431916])
            ("org-refile-marker" function (:arguments ("pos")) nil [431918 432151])
            ("org-refile-cache-clear" function nil nil [432153 432409])
            ("org-refile-cache-check-set" function (:arguments ("set")) nil [432411 432838])
            ("org-refile-cache-put" function (:arguments ("set" "identifiers")) nil [432840 433132])
            ("org-refile-cache-get" function (:arguments ("identifiers")) nil [433134 433507])
            ("org-refile-get-targets" function (:arguments ("default-buffer" "excluded-entries")) nil [433509 437273])
            ("org-protect-slash" function (:arguments ("s")) nil [437275 437379])
            ("org-olpa" variable (:default-value (make-vector 20 nil)) nil [437381 437419])
            ("org-get-outline-path" function (:arguments ("fastp" "level" "heading")) nil [437421 438378])
            ("org-format-outline-path" function (:arguments ("path" "width" "prefix" "separator")) nil [438380 439843])
            ("org-display-outline-path" function
               (:user-visible-flag t
                :arguments ("file" "current" "separator" "just-return-string"))
                nil [439845 440957])
            ("org-refile-history" variable nil nil [440959 441027])
            ("org-after-refile-insert-hook" variable nil nil [441029 441230])
            ("org-capture-last-stored-marker" variable nil nil [441232 441271])
            ("org-refile-keep" variable nil nil [441272 441360])
            ("org-copy" function (:user-visible-flag t) nil [441362 441505])
            ("org-refile" function
               (:user-visible-flag t
                :arguments ("goto" "default-buffer" "rfloc" "msg"))
                nil [441507 447923])
            ("org-refile-goto-last-stored" function (:user-visible-flag t) nil [447925 448133])
            ("org-refile-get-location" function (:arguments ("prompt" "default-buffer" "new-nodes" "no-exclude")) nil [448135 451303])
            ("declare-function" code nil nil [451305 451354])
            ("org-refile-check-position" function (:arguments ("refile-pointer")) nil [451355 452145])
            ("org-refile-new-child" function (:arguments ("parent-target" "child")) nil [452147 452982])
            ("org-olpath-completing-read" function (:arguments ("prompt" "collection" "args")) nil [452984 453884])
            ("org-find-dblock" function (:arguments ("name")) nil [453907 454324])
            ("org-dblock-start-re" variable
               (:constant-flag t
                :default-value "^[ 	]*#\\+\\(?:BEGIN\\|begin\\):[ 	]+\\(\\S-+\\)\\([ 	]+\\(.*\\)\\)?")
                nil [454326 454496])
            ("org-dblock-end-re" variable
               (:constant-flag t
                :default-value "^[ 	]*#\\+\\(?:END\\|end\\)\\([: 	
]\\|$\\)")
                nil [454498 454617])
            ("org-create-dblock" function (:arguments ("plist")) nil [454619 455205])
            ("org-prepare-dblock" function nil nil [455207 456145])
            ("org-map-dblocks" function (:arguments ("command")) nil [456147 456744])
            ("org-dblock-update" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [456746 457082])
            ("org-update-dblock" function (:user-visible-flag t) nil [457084 458073])
            ("org-beginning-of-dblock" function nil nil [458075 458509])
            ("org-update-all-dblocks" function (:user-visible-flag t) nil [458511 458719])
            ("declare-function" code nil nil [458739 458801])
            ("declare-function" code nil nil [458802 458867])
            ("org-get-export-keywords" function nil nil [458868 459468])
            ("org-options-keywords" variable
               (:constant-flag t
                :default-value (quote ("ARCHIVE:" "AUTHOR:" "BIND:" "CATEGORY:" "COLUMNS:" "CREATOR:" "DATE:" "DESCRIPTION:" "DRAWERS:" "EMAIL:" "EXCLUDE_TAGS:" "FILETAGS:" "INCLUDE:" "INDEX:" "KEYWORDS:" "LANGUAGE:" "MACRO:" "OPTIONS:" "PROPERTY:" "PRIORITIES:" "SELECT_TAGS:" "SEQ_TODO:" "SETUPFILE:" "STARTUP:" "TAGS:" "TITLE:" "TODO:" "TYP_TODO:" "SELECT_TAGS:" "EXCLUDE_TAGS:")))
                nil [459470 459865])
            ("org-structure-template-alist" variable (:default-value (quote (("s" "#+BEGIN_SRC ?

#+END_SRC" "<src lang=\"?\">

</src>") ("e" "#+BEGIN_EXAMPLE
?
#+END_EXAMPLE" "<example>
?
</example>") ("q" "#+BEGIN_QUOTE
?
#+END_QUOTE" "<quote>
?
</quote>") ("v" "#+BEGIN_VERSE
?
#+END_VERSE" "<verse>
?
</verse>") ("V" "#+BEGIN_VERBATIM
?
#+END_VERBATIM" "<verbatim>
?
</verbatim>") ("c" "#+BEGIN_CENTER
?
#+END_CENTER" "<center>
?
</center>") ("l" "#+BEGIN_LaTeX
?
#+END_LaTeX" "<literal style=\"latex\">
?
</literal>") ("L" "#+LaTeX: " "<literal style=\"latex\">?</literal>") ("h" "#+BEGIN_HTML
?
#+END_HTML" "<literal style=\"html\">
?
</literal>") ("H" "#+HTML: " "<literal style=\"html\">?</literal>") ("a" "#+BEGIN_ASCII
?
#+END_ASCII" "") ("A" "#+ASCII: " "") ("i" "#+INDEX: ?" "#+INDEX: ?") ("I" "#+INCLUDE: %file ?" "<include file=%file markup=\"?\">")))) nil [459867 461563])
            ("org-try-structure-completion" function nil nil [461565 462069])
            ("org-complete-expand-structure-template" function (:arguments ("start" "cell")) nil [462071 462926])
            ("org-toggle-comment" function (:user-visible-flag t) nil [462959 463451])
            ("org-last-todo-state-is-todo" variable nil nil [463453 463645])
            ("org-setting-tags" variable nil nil [463647 463676])
            ("org-todo-setup-filter-hook" variable nil nil [463700 463891])
            ("org-todo-get-default-hook" variable nil nil [463893 464104])
            ("org-agenda-headline-snapshot-before-repeat" variable nil nil [464106 464157])
            ("org-current-effective-time" function nil nil [464159 464608])
            ("org-todo-yesterday" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [464610 464953])
            ("org-block-entry-blocking" variable nil nil [464955 465041])
            ("org-todo" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [465043 474661])
            ("org-block-todo-from-children-or-siblings-or-parent" function (:arguments ("change-plist")) nil [474663 477598])
            ("org-track-ordered-property-with-tag" variable nil nil [477633 478474])
            ("org-toggle-ordered-property" function (:user-visible-flag t) nil [478476 479189])
            ("org-blocked-by-checkboxes" variable nil nil [479191 479225])
            ("org-block-todo-from-checkboxes" function (:arguments ("change-plist")) nil [479247 480525])
            ("org-entry-blocked-p" function nil nil [480542 480871])
            ("org-update-statistics-cookies" function
               (:user-visible-flag t
                :arguments ("all"))
                nil [480873 482199])
            ("org-entry-property-inherited-from" variable nil nil [482201 482243])
            ("org-update-parent-todo-statistics" function nil nil [482261 485464])
            ("org-after-todo-statistics-hook" variable nil nil [485466 486197])
            ("org-todo-statistics-hook" variable nil nil [486199 486436])
            ("org-todo-trigger-tag-changes" function (:arguments ("state")) nil [486438 487105])
            ("org-local-logging" function (:arguments ("value")) nil [487107 487702])
            ("org-get-todo-sequence-head" function (:arguments ("kwd")) nil [487704 488272])
            ("org-fast-todo-selection" function nil nil [488274 490320])
            ("org-entry-is-todo-p" function nil nil [490322 490406])
            ("org-entry-is-done-p" function nil nil [490408 490488])
            ("org-get-todo-state" function nil nil [490490 490697])
            ("org-at-date-range-p" function
               (:user-visible-flag t
                :arguments ("inactive-ok"))
                nil [490699 491244])
            ("org-get-repeat" function (:arguments ("tagline")) nil [491246 491609])
            ("org-last-changed-timestamp" variable nil nil [491611 491646])
            ("org-last-inserted-timestamp" variable nil nil [491647 491683])
            ("org-log-post-message" variable nil nil [491684 491713])
            ("org-log-note-purpose" variable nil nil [491714 491743])
            ("org-log-note-how" variable nil nil [491744 491769])
            ("org-log-note-extra" variable nil nil [491770 491797])
            ("org-auto-repeat-maybe" function (:arguments ("done-word")) nil [491798 495635])
            ("org-show-todo-tree" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [495637 496647])
            ("org-deadline" function
               (:user-visible-flag t
                :arguments ("arg" "time"))
                nil [496649 499394])
            ("org-schedule" function
               (:user-visible-flag t
                :arguments ("arg" "time"))
                nil [499396 502160])
            ("org-get-scheduled-time" function (:arguments ("pom" "inherit")) nil [502162 502484])
            ("org-get-deadline-time" function (:arguments ("pom" "inherit")) nil [502486 502800])
            ("org-remove-timestamp-with-keyword" function (:arguments ("keyword")) nil [502802 503469])
            ("org-add-planning-info" function
               (:user-visible-flag t
                :arguments ("what" "time" "remove"))
                nil [503471 507524])
            ("org-log-note-marker" variable (:default-value (make-marker)) nil [507526 507568])
            ("org-log-note-purpose" variable nil nil [507569 507602])
            ("org-log-note-state" variable nil nil [507603 507634])
            ("org-log-note-previous-state" variable nil nil [507635 507675])
            ("org-log-note-how" variable nil nil [507676 507705])
            ("org-log-note-extra" variable nil nil [507706 507737])
            ("org-log-note-window-configuration" variable nil nil [507738 507784])
            ("org-log-note-return-to" variable (:default-value (make-marker)) nil [507785 507830])
            ("org-log-note-effective-time" variable nil nil [507831 507994])
            ("org-log-post-message" variable nil nil [507996 508120])
            ("org-add-note" function (:user-visible-flag t) nil [508122 508307])
            ("org-property-end-re" variable nil nil [508309 508337])
            ("org-add-log-setup" function (:arguments ("purpose" "state" "prev-state" "findpos" "how" "extra")) nil [508338 510619])
            ("org-skip-over-state-notes" function nil nil [510621 511053])
            ("org-add-log-note" function (:arguments ("purpose")) nil [511055 512726])
            ("org-note-abort" variable nil nil [512728 512755])
            ("org-store-log-note" function nil nil [512777 516107])
            ("org-remove-empty-drawer-at" function (:arguments ("drawer" "pos")) nil [516109 516498])
            ("org-ts-type" variable nil nil [516500 516524])
            ("org-sparse-tree" function
               (:user-visible-flag t
                :arguments ("arg" "type"))
                nil [516525 519221])
            ("org-occur-highlights" variable nil nil [519223 519301])
            ("make-variable-buffer-local" code nil nil [519302 519352])
            ("org-occur-parameters" variable nil nil [519353 519906])
            ("make-variable-buffer-local" code nil nil [519907 519957])
            ("org-occur" function
               (:user-visible-flag t
                :arguments ("regexp" "keep-previous" "callback"))
                nil [519959 521654])
            ("org-occur-next-match" function (:arguments ("n" "reset")) nil [521656 522511])
            ("org-show-context" function (:arguments ("key")) nil [522513 523871])
            ("org-reveal-start-hook" variable nil nil [523873 523949])
            ("org-reveal" function
               (:user-visible-flag t
                :arguments ("siblings"))
                nil [523951 524922])
            ("org-highlight-new-match" function (:arguments ("beg" "end")) nil [524924 525203])
            ("org-remove-occur-highlights" function
               (:user-visible-flag t
                :arguments ("beg" "end" "noremove"))
                nil [525205 525728])
            ("org-priority-regexp" variable (:default-value ".*?\\(\\[#\\([A-Z0-9]\\)\\] ?\\)") nil [525747 525866])
            ("org-remove-priority-next-time" variable nil nil [525868 525910])
            ("org-priority-up" function (:user-visible-flag t) nil [525912 526022])
            ("org-priority-down" function (:user-visible-flag t) nil [526024 526138])
            ("org-priority" function
               (:user-visible-flag t
                :arguments ("action" "show"))
                nil [526140 529212])
            ("org-show-priority" function (:user-visible-flag t) nil [529214 529735])
            ("org-get-priority" function (:arguments ("s")) nil [529737 530101])
            ("org-agenda-archives-mode" variable nil nil [530114 530147])
            ("org-map-continue-from" variable nil nil [530148 530307])
            ("org-scanner-tags" variable nil nil [530309 530398])
            ("org-trust-scanner-tags" variable nil nil [530399 530977])
            ("org-scan-tags" function (:arguments ("action" "matcher" "todo-only" "start-level")) nil [530979 536645])
            ("org-remove-uninherited-tags" function (:arguments ("tags")) nil [536647 537312])
            ("org-match-sparse-tree" function
               (:user-visible-flag t
                :arguments ("todo-only" "match"))
                nil [537314 537758])
            ("defalias" code nil nil [537760 537815])
            ("org-cached-props" variable nil nil [537817 537846])
            ("org-cached-entry-get" function (:arguments ("pom" "property")) nil [537847 538430])
            ("org-global-tags-completion-table" function (:arguments ("files")) nil [538432 539023])
            ("org-make-tags-matcher" function (:arguments ("match")) nil [539025 544798])
            ("org-tags-expand" function (:arguments ("match" "single-as-list" "downcased")) nil [544800 546878])
            ("org-op-to-function" function (:arguments ("op" "stringp")) nil [546880 547424])
            ("org<>" function (:arguments ("a" "b")) nil [547426 547459])
            ("org-string<=" function (:arguments ("a" "b")) nil [547460 547519])
            ("org-string>=" function (:arguments ("a" "b")) nil [547520 547566])
            ("org-string>" function (:arguments ("a" "b")) nil [547567 547639])
            ("org-string<>" function (:arguments ("a" "b")) nil [547640 547686])
            ("org-time=" function (:arguments ("a" "b")) nil [547687 547780])
            ("org-time<" function (:arguments ("a" "b")) nil [547781 547874])
            ("org-time<=" function (:arguments ("a" "b")) nil [547875 547968])
            ("org-time>" function (:arguments ("a" "b")) nil [547969 548062])
            ("org-time>=" function (:arguments ("a" "b")) nil [548063 548156])
            ("org-time<>" function (:arguments ("a" "b")) nil [548157 548250])
            ("org-2ft" function (:arguments ("s")) nil [548251 548615])
            ("org-time-today" function nil nil [548617 548867])
            ("org-matcher-time" function (:arguments ("s")) nil [548869 549452])
            ("org-match-any-p" function (:arguments ("re" "list")) nil [549454 549605])
            ("org-add-colon-after-tag-completion" variable nil nil [549607 549654])
            ("org-tags-overlay" variable (:default-value (make-overlay 1 1)) nil [549684 549728])
            ("org-detach-overlay" code nil nil [549729 549766])
            ("org-get-local-tags-at" function (:arguments ("pos")) nil [549768 549900])
            ("org-get-local-tags" function nil nil [549902 550018])
            ("org-get-tags-at" function
               (:user-visible-flag t
                :arguments ("pos" "local"))
                nil [550020 551496])
            ("org-add-prop-inherited" function (:arguments ("s")) nil [551498 551590])
            ("org-toggle-tag" function (:arguments ("tag" "onoff")) nil [551592 552616])
            ("org-align-tags-here" function (:arguments ("to-col")) nil [552618 553412])
            ("org-set-tags-command" function
               (:user-visible-flag t
                :arguments ("arg" "just-align"))
                nil [553414 553819])
            ("org-set-tags-to" function
               (:user-visible-flag t
                :arguments ("data"))
                nil [553821 554802])
            ("org-align-all-tags" function (:user-visible-flag t) nil [554804 555052])
            ("org-indent-indentation-per-level" variable nil nil [555054 555095])
            ("org-set-tags" function
               (:user-visible-flag t
                :arguments ("arg" "just-align"))
                nil [555096 558924])
            ("org-change-tag-in-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "tag" "off"))
                nil [558926 560445])
            ("org-tags-completion-function" function (:arguments ("string" "predicate" "flag")) nil [560447 561248])
            ("org-fast-tag-insert" function (:arguments ("kwd" "tags" "face" "end")) nil [561250 561506])
            ("org-fast-tag-show-exit" function (:arguments ("flag")) nil [561508 561842])
            ("org-set-current-tags-overlay" function (:arguments ("current" "prefix")) nil [561844 562265])
            ("org-last-tag-selection-key" variable nil nil [562267 562306])
            ("org-fast-tag-selection" function (:arguments ("current" "inherited" "table" "todo-table")) nil [562307 569095])
            ("org-get-tags-string" function nil nil [569097 569407])
            ("org-get-tags" function nil nil [569409 569539])
            ("org-get-buffer-tags" function nil nil [569541 570037])
            ("org-map-entries" function (:arguments ("func" "match" "scope" "skip")) nil [570061 575526])
            ("org-special-properties" variable
               (:constant-flag t
                :default-value (quote ("TODO" "TAGS" "ALLTAGS" "DEADLINE" "SCHEDULED" "CLOCK" "CLOSED" "PRIORITY" "TIMESTAMP" "TIMESTAMP_IA" "BLOCKED" "FILE" "CLOCKSUM" "CLOCKSUM_T")))
                nil [575584 575905])
            ("org-default-properties" variable
               (:constant-flag t
                :default-value (quote ("ARCHIVE" "CATEGORY" "SUMMARY" "DESCRIPTION" "CUSTOM_ID" "LOCATION" "LOGGING" "COLUMNS" "VISIBILITY" "TABLE_EXPORT_FORMAT" "TABLE_EXPORT_FILE" "EXPORT_OPTIONS" "EXPORT_TEXT" "EXPORT_FILE_NAME" "EXPORT_TITLE" "EXPORT_AUTHOR" "EXPORT_DATE" "ORDERED" "NOBLOCKING" "COOKIE_DATA" "LOG_INTO_DRAWER" "REPEAT_TO_STATE" "CLOCK_MODELINE_TOTAL" "STYLE" "HTML_CONTAINER_CLASS")))
                nil [575907 576470])
            ("org-property-start-re" variable
               (:constant-flag t
                :default-value "^[ 	]*:PROPERTIES:[ 	]*$")
                nil [576472 576602])
            ("org-property-end-re" variable
               (:constant-flag t
                :default-value "^[ 	]*:END:[ 	]*$")
                nil [576604 576724])
            ("org-clock-drawer-start-re" variable
               (:constant-flag t
                :default-value "^[ 	]*:CLOCK:[ 	]*$")
                nil [576726 576855])
            ("org-clock-drawer-end-re" variable
               (:constant-flag t
                :default-value "^[ 	]*:END:[ 	]*$")
                nil [576857 576982])
            ("org-property-drawer-re" variable
               (:constant-flag t
                :default-value (concat "\\(" org-property-start-re "\\)[^ ]*\\(" org-property-end-re "\\)
?"))
                nil [576984 577144])
            ("org-clock-drawer-re" variable
               (:constant-flag t
                :default-value (concat "\\(" org-clock-drawer-start-re "\\)[^ ]*\\(" org-property-end-re "\\)
?"))
                nil [577146 577304])
            ("org-property-action" function (:user-visible-flag t) nil [577306 577887])
            ("org-inc-effort" function (:user-visible-flag t) nil [577889 578024])
            ("org-clock-effort" variable nil nil [578026 578051])
            ("org-clock-current-task" variable nil nil [578085 578116])
            ("org-set-effort" function
               (:user-visible-flag t
                :arguments ("value" "increment"))
                nil [578144 580065])
            ("org-at-property-p" function nil nil [580067 580280])
            ("org-get-property-block" function (:arguments ("beg" "end" "force")) nil [580282 581450])
            ("org-entry-properties" function (:arguments ("pom" "which" "specific")) nil [581452 586234])
            ("org-entry-get" function (:arguments ("pom" "property" "inherit" "literal-nil")) nil [586236 588164])
            ("org-property-or-variable-value" function (:arguments ("var" "inherit")) nil [588166 588527])
            ("org-entry-delete" function (:arguments ("pom" "property" "delete-empty-drawer")) nil [588529 589236])
            ("org-entry-add-to-multivalued-property" function (:arguments ("pom" "property" "value")) nil [589382 589830])
            ("org-entry-remove-from-multivalued-property" function (:arguments ("pom" "property" "value")) nil [589832 590277])
            ("org-entry-member-in-multivalued-property" function (:arguments ("pom" "property" "value")) nil [590279 590600])
            ("org-entry-get-multivalued-property" function (:arguments ("pom" "property")) nil [590602 590863])
            ("org-entry-put-multivalued-property" function (:arguments ("pom" "property" "values")) nil [590865 591292])
            ("org-entry-protect-space" function (:arguments ("s")) nil [591294 591522])
            ("org-entry-restore-space" function (:arguments ("s")) nil [591524 591752])
            ("org-entry-property-inherited-from" variable (:default-value (make-marker)) nil [591754 592149])
            ("org-entry-get-with-inheritance" function (:arguments ("property" "literal-nil")) nil [592151 593254])
            ("org-property-changed-functions" variable nil nil [593256 593449])
            ("org-entry-put" function (:arguments ("pom" "property" "value")) nil [593451 595907])
            ("org-buffer-property-keys" function (:arguments ("include-specials" "include-defaults" "include-columns")) nil [595909 597588])
            ("org-property-values" function (:arguments ("key")) nil [597590 597944])
            ("org-insert-property-drawer" function nil nil [597946 599216])
            ("org-insert-drawer" function
               (:user-visible-flag t
                :arguments ("arg" "drawer"))
                nil [599218 601537])
            ("org-property-set-functions-alist" variable nil nil [601539 601774])
            ("org-set-property-function" function (:arguments ("property")) nil [601776 602034])
            ("org-read-property-value" function (:arguments ("property")) nil [602036 602783])
            ("org-last-set-property" variable nil nil [602785 602819])
            ("org-last-set-property-value" variable nil nil [602820 602860])
            ("org-read-property-name" function nil nil [602861 603616])
            ("org-set-property-and-value" function
               (:user-visible-flag t
                :arguments ("use-last"))
                nil [603618 604247])
            ("org-set-property" function
               (:user-visible-flag t
                :arguments ("property" "value"))
                nil [604249 605170])
            ("org-delete-property" function
               (:user-visible-flag t
                :arguments ("property" "delete-empty-drawer"))
                nil [605172 605696])
            ("org-delete-property-globally" function
               (:user-visible-flag t
                :arguments ("property"))
                nil [605698 606297])
            ("org-columns-current-fmt-compiled" variable nil nil [606299 606340])
            ("org-compute-property-at-point" function (:user-visible-flag t) nil [606370 606915])
            ("org-property-allowed-value-functions" variable nil nil [606917 607377])
            ("org-property-get-allowed-values" function (:arguments ("pom" "property" "table")) nil [607379 608566])
            ("org-property-previous-allowed-value" function
               (:user-visible-flag t
                :arguments ("previous"))
                nil [608568 608742])
            ("org-property-next-allowed-value" function
               (:user-visible-flag t
                :arguments ("previous"))
                nil [608744 610131])
            ("org-find-olp" function (:arguments ("path" "this-buffer")) nil [610133 611772])
            ("org-find-exact-headline-in-buffer" function (:arguments ("heading" "buffer" "pos-only")) nil [611774 612506])
            ("org-find-exact-heading-in-directory" function (:arguments ("heading" "dir")) nil [612508 613237])
            ("org-find-entry-with-id" function
               (:user-visible-flag t
                :arguments ("ident"))
                nil [613239 614031])
            ("org-last-changed-timestamp" variable nil nil [614050 614089])
            ("org-last-inserted-timestamp" variable nil nil [614090 614193])
            ("org-time-was-given" variable nil nil [614194 614221])
            ("org-end-time-was-given" variable nil nil [614253 614284])
            ("org-ts-what" variable nil nil [614316 614336])
            ("org-time-stamp" function
               (:user-visible-flag t
                :arguments ("arg" "inactive"))
                nil [614369 617296])
            ("org-get-compact-tod" function (:arguments ("s")) nil [617377 618009])
            ("org-time-stamp-inactive" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [618011 618426])
            ("org-date-ovl" variable (:default-value (make-overlay 1 1)) nil [618428 618468])
            ("overlay-put" code nil nil [618469 618520])
            ("org-detach-overlay" code nil nil [618521 618554])
            ("org-ans1" variable nil nil [618556 618573])
            ("org-ans2" variable nil nil [618605 618622])
            ("org-plain-time-of-day-regexp" variable nil nil [618655 618692])
            ("org-overriding-default-time" variable nil nil [618710 618750])
            ("org-read-date-overlay" variable nil nil [618772 618806])
            ("org-dcst" variable nil nil [618807 618828])
            ("org-read-date-history" variable nil nil [618850 618884])
            ("org-read-date-final-answer" variable nil nil [618885 618924])
            ("org-read-date-analyze-futurep" variable nil nil [618925 618967])
            ("org-read-date-analyze-forced-year" variable nil nil [618968 619014])
            ("org-read-date-inactive" variable nil nil [619015 619046])
            ("org-read-date-minibuffer-local-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (org-defkey map (kbd ".") (lambda nil (interactive) (if (looking-back "^[^:]+: ") (org-eval-in-calendar (quote (calendar-goto-today))) (insert ".")))) (org-defkey map (kbd "C-.") (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-goto-today))))) (org-defkey map [(meta shift left)] (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-backward-month 1))))) (org-defkey map [(meta shift right)] (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-forward-month 1))))) (org-defkey map [(meta shift up)] (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-backward-year 1))))) (org-defkey map [(meta shift down)] (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-forward-year 1))))) (org-defkey map [27 (shift left)] (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-backward-month 1))))) (org-defkey map [27 (shift right)] (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-forward-month 1))))) (org-defkey map [27 (shift up)] (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-backward-year 1))))) (org-defkey map [27 (shift down)] (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-forward-year 1))))) (org-defkey map [(shift up)] (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-backward-week 1))))) (org-defkey map [(shift down)] (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-forward-week 1))))) (org-defkey map [(shift left)] (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-backward-day 1))))) (org-defkey map [(shift right)] (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-forward-day 1))))) (org-defkey map "!" (lambda nil (interactive) (org-eval-in-calendar (quote (diary-view-entries))) (message ""))) (org-defkey map ">" (lambda nil (interactive) (org-eval-in-calendar (quote (scroll-calendar-left 1))))) (org-defkey map "<" (lambda nil (interactive) (org-eval-in-calendar (quote (scroll-calendar-right 1))))) (org-defkey map "" (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-scroll-left-three-months 1))))) (org-defkey map "\366" (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-scroll-right-three-months 1))))) map)) nil [619048 622162])
            ("org-read-date" function (:arguments ("org-with-time" "to-time" "from-string" "prompt" "default-time" "default-input" "inactive")) nil [622164 628336])
            ("org-def" variable nil nil [628338 628354])
            ("org-defdecode" variable nil nil [628355 628377])
            ("org-with-time" variable nil nil [628378 628400])
            ("org-read-date-display" function nil nil [628401 629867])
            ("org-read-date-analyze" function (:arguments ("ans" "org-def" "org-defdecode")) nil [629869 638006])
            ("parse-time-weekdays" variable nil nil [638008 638036])
            ("org-read-date-get-relative" function (:arguments ("s" "today" "default")) nil [638037 639573])
            ("org-order-calendar-date-args" function (:arguments ("arg1" "arg2" "arg3")) nil [639575 640337])
            ("org-eval-in-calendar" function (:arguments ("form" "keepdate")) nil [640339 641077])
            ("org-calendar-select" function (:user-visible-flag t) nil [641079 641532])
            ("org-insert-time-stamp" function (:arguments ("time" "with-hm" "inactive" "pre" "post" "extra")) nil [641534 642718])
            ("org-toggle-time-stamp-overlays" function (:user-visible-flag t) nil [642720 643572])
            ("org-display-custom-time" function (:arguments ("beg" "end")) nil [643574 644648])
            ("org-translate-time" function (:arguments ("string")) nil [644650 645594])
            ("org-fix-decoded-time" function (:arguments ("time")) nil [645596 645797])
            ("define-obsolete-function-alias" code nil nil [645799 645879])
            ("org-time-stamp-to-now" function (:arguments ("timestamp-string" "seconds")) nil [645881 646227])
            ("org-deadline-close" function (:arguments ("timestamp-string" "ndays")) nil [646229 646506])
            ("org-get-wdays" function (:arguments ("ts" "delay" "zero-delay")) nil [646508 647456])
            ("org-calendar-select-mouse" function
               (:user-visible-flag t
                :arguments ("ev"))
                nil [647458 647946])
            ("org-check-deadlines" function
               (:user-visible-flag t
                :arguments ("ndays"))
                nil [647948 648802])
            ("org-re-timestamp" function (:arguments ("type")) nil [648804 649896])
            ("org-check-before-date" function
               (:user-visible-flag t
                :arguments ("date"))
                nil [649898 650322])
            ("org-check-after-date" function
               (:user-visible-flag t
                :arguments ("date"))
                nil [650324 650760])
            ("org-check-dates-range" function
               (:user-visible-flag t
                :arguments ("start-date" "end-date"))
                nil [650762 651465])
            ("org-evaluate-time-range" function
               (:user-visible-flag t
                :arguments ("to-buffer"))
                nil [651467 653764])
            ("org-make-tdiff-string" function (:arguments ("y" "d" "h" "m")) nil [653766 654256])
            ("org-time-string-to-time" function (:arguments ("s" "buffer" "pos")) nil [654258 654613])
            ("org-time-string-to-seconds" function (:arguments ("s")) nil [654615 654755])
            ("org-time-string-to-absolute" function (:arguments ("s" "daynr" "prefer" "show-all" "buffer" "pos")) nil [654757 655734])
            ("org-days-to-iso-week" function (:arguments ("days")) nil [655736 655866])
            ("org-small-year-to-year" function (:arguments ("year")) nil [655868 656209])
            ("org-time-from-absolute" function (:arguments ("d")) nil [656211 656480])
            ("org-calendar-holiday" function nil nil [656482 656759])
            ("org-diary-sexp-entry" function (:arguments ("sexp" "entry" "date")) nil [656761 657566])
            ("org-diary-to-ical-string" function (:arguments ("frombuf")) nil [657568 658411])
            ("org-closest-date" function (:arguments ("start" "current" "change" "prefer" "show-all")) nil [658413 661537])
            ("org-date-to-gregorian" function (:arguments ("date")) nil [661539 661937])
            ("org-parse-time-string" function (:arguments ("s" "nodefault")) nil [661939 662794])
            ("org-timestamp-up" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [662796 663118])
            ("org-timestamp-down" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [663120 663448])
            ("org-timestamp-up-day" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [663450 663759])
            ("org-timestamp-down-day" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [663761 664078])
            ("org-at-timestamp-p" function
               (:user-visible-flag t
                :arguments ("inactive-ok"))
                nil [664080 665216])
            ("org-toggle-timestamp-type" function (:user-visible-flag t) nil [665218 665735])
            ("org-at-clock-log-p" function nil nil [665737 665891])
            ("org-clock-history" variable nil nil [665893 665919])
            ("org-clock-adjust-closest" variable nil nil [665966 666003])
            ("org-timestamp-change" function (:arguments ("n" "what" "updown" "suppress-tmp-delay")) nil [666039 672004])
            ("org-modify-ts-extra" function (:arguments ("s" "pos" "n" "dm")) nil [672006 673535])
            ("org-recenter-calendar" function (:arguments ("date")) nil [673537 673853])
            ("org-goto-calendar" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [673855 674596])
            ("org-get-date-from-calendar" function nil nil [674598 674791])
            ("org-date-from-calendar" function (:user-visible-flag t) nil [674793 675212])
            ("org-effort-durations" variable (:default-value (\` (("h" . 60) ("d" \, (* 60 8)) ("w" \, (* 60 8 5)) ("m" \, (* 60 8 5 4)) ("y" \, (* 60 8 5 40))))) nil [675214 675857])
            ("org-minutes-to-clocksum-string" function (:arguments ("m")) nil [675859 680151])
            ("defalias" code nil nil [680153 680224])
            ("make-obsolete" code nil nil [680225 680332])
            ("org-hours-to-clocksum-string" function (:arguments ("n")) nil [680334 680418])
            ("org-hh:mm-string-to-minutes" function (:arguments ("s")) nil [680420 680981])
            ("org-image-actual-width" variable (:default-value t) nil [680983 681893])
            ("org-agenda-inhibit-startup" variable nil nil [681895 682218])
            ("org-duration-string-to-minutes" function (:arguments ("s" "output-to-string")) nil [682220 682996])
            ("org-save-all-org-buffers" function (:user-visible-flag t) nil [683010 683328])
            ("org-revert-all-org-buffers" function (:user-visible-flag t) nil [683330 684350])
            ("org-switchb" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [684386 685272])
            ("defalias" code nil nil [685356 685396])
            ("defalias" code nil nil [685412 685449])
            ("org-buffer-list" function (:arguments ("predicate" "exclude-tmp")) nil [685451 686683])
            ("org-agenda-files" function (:arguments ("unrestricted" "archives")) nil [686685 687813])
            ("org-agenda-file-p" function (:arguments ("file")) nil [687815 688044])
            ("org-edit-agenda-file-list" function (:user-visible-flag t) nil [688046 688969])
            ("org-store-new-agenda-file-list" function (:arguments ("list")) nil [688971 689632])
            ("org-read-agenda-file-list" function (:arguments ("pair-with-expansion")) nil [689634 690352])
            ("org-cycle-agenda-files" function (:user-visible-flag t) nil [690369 691083])
            ("org-agenda-file-to-front" function
               (:user-visible-flag t
                :arguments ("to-end"))
                nil [691085 692111])
            ("org-remove-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [692113 692988])
            ("org-file-menu-entry" function (:arguments ("file")) nil [692990 693065])
            ("org-check-agenda-file" function (:arguments ("file")) nil [693067 693463])
            ("org-get-agenda-file-buffer" function (:arguments ("file")) nil [693465 693868])
            ("org-release-buffers" function (:arguments ("blist")) nil [693870 694355])
            ("org-agenda-prepare-buffers" function
               (:user-visible-flag t
                :arguments ("files"))
                nil [694357 696999])
            ("org-cdlatex-mode-map" variable (:default-value (make-sparse-keymap)) nil [697028 697123])
            ("org-defkey" code nil nil [697125 697192])
            ("org-defkey" code nil nil [697193 697260])
            ("org-defkey" code nil nil [697261 697319])
            ("org-defkey" code nil nil [697320 697382])
            ("org-defkey" code nil nil [697383 697445])
            ("org-cdlatex-texmathp-advice-is-done" variable nil nil [697447 697567])
            ("define-minor-mode" code nil nil [697569 698773])
            ("turn-on-org-cdlatex" function nil nil [698775 698876])
            ("org-try-cdlatex-tab" function nil nil [698878 699670])
            ("org-cdlatex-underscore-caret" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [699672 700047])
            ("org-cdlatex-math-modify" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [700049 700411])
            ("org-latex-regexps" variable (:default-value (quote (("begin" "^[ 	]*\\(\\\\begin{\\([a-zA-Z0-9\\*]+\\)[^ ]+?\\\\end{\\2}\\)" 1 t) ("$1" "\\([^$]\\|^\\)\\(\\$[^ 	
,;.$]\\$\\)\\([- 	.,?;:'\") ]\\|$\\)" 2 nil) ("$" "\\([^$]\\|^\\)\\(\\(\\$\\([^ 	
,;.$][^$
]*?\\(
[^$
]*?\\)\\{0,2\\}[^ 	
,.$]\\)\\$\\)\\)\\([- 	.,?;:'\") ]\\|$\\)" 2 nil) ("\\(" "\\\\([^ ]*?\\\\)" 0 nil) ("\\[" "\\\\\\[[^ ]*?\\\\\\]" 0 nil) ("$$" "\\$\\$[^ ]*?\\$\\$" 0 nil)))) nil [700438 701177])
            ("org-inside-LaTeX-fragment-p" function nil nil [701179 703138])
            ("org-inside-latex-macro-p" function nil nil [703140 703340])
            ("org-latex-fragment-image-overlays" variable nil nil [703342 703449])
            ("make-variable-buffer-local" code nil nil [703450 703513])
            ("org-remove-latex-fragment-image-overlays" function nil nil [703515 703742])
            ("org-preview-latex-fragment" function
               (:user-visible-flag t
                :arguments ("subtree"))
                nil [703744 705635])
            ("org-format-latex" function (:arguments ("prefix" "dir" "overlays" "msg" "at" "forbuffer" "processing-type")) nil [705637 710055])
            ("org-create-math-formula" function
               (:user-visible-flag t
                :arguments ("latex-frag" "mathml-file"))
                nil [710057 712447])
            ("org-format-latex-as-mathml" function (:arguments ("latex-frag" "latex-frag-type" "prefix" "dir")) nil [712449 713584])
            ("org-create-formula-image" function (:arguments ("string" "tofile" "options" "buffer" "type")) nil [713586 714636])
            ("declare-function" code nil nil [714638 714691])
            ("declare-function" code nil nil [714692 714766])
            ("declare-function" code nil nil [714767 714843])
            ("declare-function" code nil nil [714844 714907])
            ("declare-function" code nil nil [714908 714982])
            ("org-create-formula--latex-header" function nil nil [714983 715538])
            ("org-create-formula-image-with-dvipng" function (:arguments ("string" "tofile" "options" "buffer")) nil [715598 718018])
            ("declare-function" code nil nil [718020 718095])
            ("org-create-formula-image-with-imagemagick" function (:arguments ("string" "tofile" "options" "buffer")) nil [718096 720577])
            ("org-splice-latex-header" function (:arguments ("tpl" "def-pkg" "pkg" "snippets-p" "extra")) nil [720579 722391])
            ("org-latex-packages-to-string" function (:arguments ("pkg" "snippets-p" "newline")) nil [722393 722917])
            ("org-dvipng-color" function (:arguments ("attr")) nil [722919 723305])
            ("org-dvipng-color-format" function (:arguments ("color-name")) nil [723307 723503])
            ("org-latex-color" function (:arguments ("attr")) nil [723505 723889])
            ("org-latex-color-format" function (:arguments ("color-name")) nil [723891 724069])
            ("org-normalize-color" function (:arguments ("value")) nil [724071 724206])
            ("org-inline-image-overlays" variable nil nil [724229 724267])
            ("make-variable-buffer-local" code nil nil [724268 724323])
            ("org-toggle-inline-images" function
               (:user-visible-flag t
                :arguments ("include-linked"))
                nil [724325 724869])
            ("org-redisplay-inline-images" function (:user-visible-flag t) nil [724871 725101])
            ("org-display-inline-images" function
               (:user-visible-flag t
                :arguments ("include-linked" "refresh" "beg" "end"))
                nil [725103 727648])
            ("define-obsolete-function-alias" code nil nil [727650 727764])
            ("org-display-inline-remove-overlay" function (:arguments ("ov" "after" "beg" "end" "len")) nil [727766 728050])
            ("org-remove-inline-images" function (:user-visible-flag t) nil [728052 728230])
            ("define-key" code nil nil [728335 728407])
            ("define-key" code nil nil [728408 728472])
            ("define-key" code nil nil [728473 728567])
            ("define-key" code nil nil [728568 728664])
            ("define-key" code nil nil [728665 728746])
            ("define-key" code nil nil [728747 728817])
            ("define-key" code nil nil [728818 728886])
            ("define-key" code nil nil [728887 728959])
            ("org-defkey" code nil nil [730834 730891])
            ("org-defkey" code nil nil [730919 730968])
            ("org-defkey" code nil nil [730969 731018])
            ("org-defkey" code nil nil [731019 731086])
            ("org-defkey" code nil nil [731087 731131])
            ("unless" code nil nil [731188 731274])
            ("org-defkey" code nil nil [731275 731331])
            ("define-key" code nil nil [731332 731381])
            ("org-defkey" code nil nil [731383 731448])
            ("org-defkey" code nil nil [731449 731521])
            ("org-defkey" code nil nil [731522 731586])
            ("org-defkey" code nil nil [731618 731672])
            ("org-defkey" code nil nil [731673 731728])
            ("org-defkey" code nil nil [731729 731781])
            ("org-defkey" code nil nil [731782 731836])
            ("org-defkey" code nil nil [731838 731904])
            ("org-defkey" code nil nil [731905 731972])
            ("org-defkey" code nil nil [731973 732037])
            ("org-defkey" code nil nil [732038 732104])
            ("org-defkey" code nil nil [732106 732166])
            ("org-defkey" code nil nil [732167 732229])
            ("org-defkey" code nil nil [732230 732292])
            ("org-defkey" code nil nil [732293 732356])
            ("org-defkey" code nil nil [732358 732430])
            ("org-defkey" code nil nil [732431 732502])
            ("org-defkey" code nil nil [732503 732569])
            ("org-defkey" code nil nil [732570 732641])
            ("define-key" code nil nil [732657 732717])
            ("mapc" code nil nil [732718 732826])
            ("when" code nil nil [732959 734810])
            ("org-defkey" code nil nil [734835 734881])
            ("org-defkey" code nil nil [734911 734959])
            ("if" code nil nil [734960 735100])
            ("if" code nil nil [735101 735237])
            ("if" code nil nil [735238 735378])
            ("org-defkey" code nil nil [735379 735438])
            ("org-defkey" code nil nil [735439 735496])
            ("org-defkey" code nil nil [735497 735555])
            ("org-defkey" code nil nil [735556 735608])
            ("org-defkey" code nil nil [735609 735663])
            ("org-defkey" code nil nil [735664 735732])
            ("org-defkey" code nil nil [735733 735802])
            ("org-defkey" code nil nil [735803 735855])
            ("org-defkey" code nil nil [735856 735912])
            ("org-defkey" code nil nil [735913 735970])
            ("org-defkey" code nil nil [735971 736043])
            ("org-defkey" code nil nil [736044 736113])
            ("org-defkey" code nil nil [736114 736170])
            ("org-defkey" code nil nil [736171 736232])
            ("org-defkey" code nil nil [736233 736302])
            ("org-defkey" code nil nil [736303 736369])
            ("org-defkey" code nil nil [736370 736431])
            ("org-defkey" code nil nil [736432 736478])
            ("org-defkey" code nil nil [736479 736525])
            ("org-defkey" code nil nil [736526 736584])
            ("org-defkey" code nil nil [736585 736635])
            ("org-defkey" code nil nil [736636 736686])
            ("org-defkey" code nil nil [736687 736743])
            ("org-defkey" code nil nil [736744 736792])
            ("org-defkey" code nil nil [736793 736839])
            ("org-defkey" code nil nil [736840 736893])
            ("org-defkey" code nil nil [736918 736977])
            ("org-defkey" code nil nil [736996 737048])
            ("org-defkey" code nil nil [737049 737105])
            ("org-defkey" code nil nil [737106 737178])
            ("org-defkey" code nil nil [737179 737234])
            ("org-defkey" code nil nil [737235 737315])
            ("org-defkey" code nil nil [737316 737407])
            ("org-defkey" code nil nil [737408 737463])
            ("org-defkey" code nil nil [737464 737523])
            ("org-defkey" code nil nil [737524 737577])
            ("org-defkey" code nil nil [737578 737639])
            ("org-defkey" code nil nil [737640 737695])
            ("org-defkey" code nil nil [737696 737752])
            ("org-defkey" code nil nil [737753 737809])
            ("org-defkey" code nil nil [737810 737860])
            ("org-defkey" code nil nil [737884 737936])
            ("org-defkey" code nil nil [737960 738021])
            ("org-defkey" code nil nil [738038 738088])
            ("org-defkey" code nil nil [738114 738175])
            ("org-defkey" code nil nil [738176 738231])
            ("org-defkey" code nil nil [738232 738292])
            ("org-defkey" code nil nil [738293 738361])
            ("org-defkey" code nil nil [738362 738431])
            ("org-defkey" code nil nil [738432 738494])
            ("org-defkey" code nil nil [738495 738548])
            ("org-defkey" code nil nil [738549 738619])
            ("org-defkey" code nil nil [738620 738693])
            ("org-defkey" code nil nil [738694 738748])
            ("org-defkey" code nil nil [738749 738802])
            ("org-defkey" code nil nil [738803 738849])
            ("org-defkey" code nil nil [738850 738905])
            ("org-defkey" code nil nil [738906 738974])
            ("org-defkey" code nil nil [738975 739042])
            ("org-defkey" code nil nil [739043 739101])
            ("org-defkey" code nil nil [739102 739174])
            ("org-defkey" code nil nil [739175 739249])
            ("org-defkey" code nil nil [739250 739298])
            ("org-defkey" code nil nil [739299 739354])
            ("org-defkey" code nil nil [739355 739413])
            ("org-defkey" code nil nil [739414 739473])
            ("org-defkey" code nil nil [739474 739525])
            ("org-defkey" code nil nil [739526 739586])
            ("org-defkey" code nil nil [739587 739641])
            ("org-defkey" code nil nil [739642 739700])
            ("org-defkey" code nil nil [739701 739778])
            ("org-defkey" code nil nil [739779 739850])
            ("org-defkey" code nil nil [739851 739919])
            ("org-defkey" code nil nil [739920 739968])
            ("org-defkey" code nil nil [739969 740043])
            ("org-defkey" code nil nil [740044 740115])
            ("org-defkey" code nil nil [740116 740173])
            ("org-defkey" code nil nil [740174 740242])
            ("org-defkey" code nil nil [740243 740298])
            ("org-defkey" code nil nil [740299 740360])
            ("org-defkey" code nil nil [740361 740422])
            ("org-defkey" code nil nil [740423 740484])
            ("org-defkey" code nil nil [740485 740536])
            ("org-defkey" code nil nil [740537 740587])
            ("org-defkey" code nil nil [740588 740657])
            ("org-defkey" code nil nil [740741 740798])
            ("org-defkey" code nil nil [740799 740857])
            ("org-defkey" code nil nil [740858 740917])
            ("org-defkey" code nil nil [740919 740991])
            ("org-defkey" code nil nil [740992 741046])
            ("org-defkey" code nil nil [741047 741106])
            ("org-defkey" code nil nil [741107 741167])
            ("org-defkey" code nil nil [741168 741223])
            ("org-defkey" code nil nil [741224 741280])
            ("org-defkey" code nil nil [741281 741339])
            ("org-defkey" code nil nil [741340 741399])
            ("org-defkey" code nil nil [741400 741458])
            ("org-defkey" code nil nil [741459 741518])
            ("org-defkey" code nil nil [741519 741587])
            ("org-defkey" code nil nil [741588 741654])
            ("org-defkey" code nil nil [741655 741727])
            ("org-defkey" code nil nil [741728 741796])
            ("org-defkey" code nil nil [741797 741858])
            ("org-defkey" code nil nil [741859 741917])
            ("org-defkey" code nil nil [741918 741986])
            ("org-defkey" code nil nil [741987 742043])
            ("org-defkey" code nil nil [742044 742100])
            ("org-defkey" code nil nil [742101 742170])
            ("org-defkey" code nil nil [742171 742238])
            ("org-defkey" code nil nil [742239 742317])
            ("org-defkey" code nil nil [742318 742399])
            ("org-defkey" code nil nil [742401 742452])
            ("org-defkey" code nil nil [742453 742509])
            ("org-defkey" code nil nil [742510 742567])
            ("org-defkey" code nil nil [742568 742624])
            ("org-defkey" code nil nil [742625 742694])
            ("define-key" code nil nil [742696 742749])
            ("define-key" code nil nil [742751 742800])
            ("define-key" code nil nil [742802 742860])
            ("define-key" code nil nil [742861 742919])
            ("define-key" code nil nil [742921 742979])
            ("when" code nil nil [742982 743063])
            ("org-speed-commands-default" variable
               (:constant-flag t
                :default-value (quote (("Outline Navigation") ("n" org-speed-move-safe (quote outline-next-visible-heading)) ("p" org-speed-move-safe (quote outline-previous-visible-heading)) ("f" org-speed-move-safe (quote org-forward-heading-same-level)) ("b" org-speed-move-safe (quote org-backward-heading-same-level)) ("F" . org-next-block) ("B" . org-previous-block) ("u" org-speed-move-safe (quote outline-up-heading)) ("j" . org-goto) ("g" org-refile t) ("Outline Visibility") ("c" . org-cycle) ("C" . org-shifttab) (" " . org-display-outline-path) ("s" . org-narrow-to-subtree) ("=" . org-columns) ("Outline Structure Editing") ("U" . org-shiftmetaup) ("D" . org-shiftmetadown) ("r" . org-metaright) ("l" . org-metaleft) ("R" . org-shiftmetaright) ("L" . org-shiftmetaleft) ("i" progn (forward-char 1) (call-interactively (quote org-insert-heading-respect-content))) ("^" . org-sort) ("w" . org-refile) ("a" . org-archive-subtree-default-with-confirmation) ("@" . org-mark-subtree) ("#" . org-toggle-comment) ("Clock Commands") ("I" . org-clock-in) ("O" . org-clock-out) ("Meta Data Editing") ("t" . org-todo) ("," org-priority) ("0" org-priority 32) ("1" org-priority 65) ("2" org-priority 66) ("3" org-priority 67) (":" . org-set-tags-command) ("e" . org-set-effort) ("E" . org-inc-effort) ("W" lambda (m) (interactive "sMinutes before warning: ") (org-entry-put (point) "APPT_WARNTIME" m)) ("Agenda Views etc") ("v" . org-agenda) ("/" . org-sparse-tree) ("Misc") ("o" . org-open-at-point) ("?" . org-speed-command-help) ("<" org-agenda-set-restriction-lock (quote subtree)) (">" org-agenda-remove-restriction-lock))))
                nil [743066 744963])
            ("org-print-speed-command" function (:arguments ("e")) nil [744965 745281])
            ("org-speed-command-help" function (:user-visible-flag t) nil [745283 745892])
            ("org-speed-move-safe" function
               (:user-visible-flag t
                :arguments ("cmd"))
                nil [745894 746256])
            ("org-self-insert-command-undo-counter" variable nil nil [746258 746305])
            ("org-table-auto-blank-field" variable nil nil [746307 746342])
            ("org-speed-command" variable nil nil [746369 746399])
            ("define-obsolete-function-alias" code nil nil [746401 746502])
            ("org-speed-command-activate" function (:arguments ("keys")) nil [746504 746950])
            ("define-obsolete-function-alias" code nil nil [746952 747057])
            ("org-babel-speed-command-activate" function (:arguments ("keys")) nil [747059 747273])
            ("org-speed-command-hook" variable (:default-value (quote (org-speed-command-default-hook org-babel-speed-command-hook))) nil [747275 747995])
            ("org-self-insert-command" function
               (:user-visible-flag t
                :arguments ("N"))
                nil [747997 750293])
            ("org-check-before-invisible-edit" function (:arguments ("kind")) nil [750295 752693])
            ("org-fix-tags-on-the-fly" function nil nil [752695 752850])
            ("org-delete-backward-char" function
               (:user-visible-flag t
                :arguments ("N"))
                nil [752852 753952])
            ("org-delete-char" function
               (:user-visible-flag t
                :arguments ("N"))
                nil [753954 755006])
            ("put" code nil nil [755075 755125])
            ("put" code nil nil [755126 755179])
            ("put" code nil nil [755180 755231])
            ("put" code nil nil [755232 755292])
            ("put" code nil nil [755293 755332])
            ("put" code nil nil [755384 755434])
            ("put" code nil nil [755435 755488])
            ("put" code nil nil [755489 755531])
            ("put" code nil nil [755532 755583])
            ("put" code nil nil [755637 755699])
            ("put" code nil nil [755700 755765])
            ("org-remap" function (:arguments ("map" "commands")) nil [755878 756256])
            ("org-transpose-words" function (:user-visible-flag t) nil [756258 756575])
            ("org-remap" code nil nil [756576 756638])
            ("when" code nil nil [756640 757011])
            ("org-ctrl-c-ctrl-c-hook" variable nil nil [757013 757566])
            ("org-ctrl-c-ctrl-c-final-hook" variable nil nil [757568 758122])
            ("org-tab-first-hook" variable nil nil [758124 758593])
            ("org-tab-after-check-for-table-hook" variable nil nil [758595 759009])
            ("org-tab-after-check-for-cycling-hook" variable nil nil [759011 759371])
            ("org-tab-before-tab-emulation-hook" variable nil nil [759373 759645])
            ("org-metaleft-hook" variable nil nil [759647 759785])
            ("org-metaright-hook" variable nil nil [759786 759926])
            ("org-metaup-hook" variable nil nil [759927 760061])
            ("org-metadown-hook" variable nil nil [760062 760200])
            ("org-shiftmetaleft-hook" variable nil nil [760201 760346])
            ("org-shiftmetaright-hook" variable nil nil [760347 760494])
            ("org-shiftmetaup-hook" variable nil nil [760495 760636])
            ("org-shiftmetadown-hook" variable nil nil [760637 760782])
            ("org-metareturn-hook" variable nil nil [760783 760922])
            ("org-shiftup-hook" variable nil nil [760923 761058])
            ("org-shiftup-final-hook" variable nil nil [761059 761278])
            ("org-shiftdown-hook" variable nil nil [761279 761418])
            ("org-shiftdown-final-hook" variable nil nil [761419 761642])
            ("org-shiftleft-hook" variable nil nil [761643 761782])
            ("org-shiftleft-final-hook" variable nil nil [761783 762006])
            ("org-shiftright-hook" variable nil nil [762007 762148])
            ("org-shiftright-final-hook" variable nil nil [762149 762374])
            ("org-modifier-cursor-error" function nil nil [762376 762579])
            ("org-shiftselect-error" function nil nil [762581 762937])
            ("org-call-for-shift-select" function (:arguments ("cmd")) nil [762939 763056])
            ("org-shifttab" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [763058 763730])
            ("org-shiftmetaleft" function (:user-visible-flag t) nil [763732 764399])
            ("org-shiftmetaright" function (:user-visible-flag t) nil [764401 765065])
            ("org-shiftmetaup" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [765067 765754])
            ("org-shiftmetadown" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [765756 766464])
            ("org-hidden-tree-error" function nil nil [766466 766593])
            ("org-metaleft" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [766595 767698])
            ("org-metaright" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [767700 768923])
            ("org-check-for-hidden" function (:arguments ("what")) nil [768925 769872])
            ("org-metaup" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [769874 770750])
            ("org-metadown" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [770752 771640])
            ("org-shiftup" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [771642 772688])
            ("org-shiftdown" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [772690 773733])
            ("org-shiftright" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [773735 775327])
            ("org-shiftleft" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [775329 776938])
            ("org-shiftcontrolright" function (:user-visible-flag t) nil [776940 777356])
            ("org-shiftcontrolleft" function (:user-visible-flag t) nil [777358 777783])
            ("org-shiftcontrolup" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [777785 778125])
            ("org-shiftcontroldown" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [778127 778473])
            ("org-ctrl-c-ret" function (:user-visible-flag t) nil [778475 778719])
            ("org-find-visible" function nil nil [778721 778884])
            ("org-find-invisible" function nil nil [778885 779056])
            ("org-copy-visible" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [779058 779500])
            ("org-copy-special" function (:user-visible-flag t) nil [779502 779802])
            ("org-cut-special" function (:user-visible-flag t) nil [779804 780098])
            ("org-paste-special" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [780100 780443])
            ("org-in-fixed-width-region-p" function nil nil [780445 780608])
            ("org-edit-special" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [780610 782786])
            ("org-table-coordinate-overlays" variable nil nil [782788 782826])
            ("org-ctrl-c-ctrl-c" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [782853 791406])
            ("org-mode-restart" function (:user-visible-flag t) nil [791408 791598])
            ("org-kill-note-or-show-branches" function (:user-visible-flag t) nil [791600 791906])
            ("org-open-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [791908 792085])
            ("org-return" function
               (:user-visible-flag t
                :arguments ("indent"))
                nil [792087 793550])
            ("org-return-indent" function (:user-visible-flag t) nil [793552 793794])
            ("org-ctrl-c-star" function (:user-visible-flag t) nil [793796 794149])
            ("org-ctrl-c-minus" function (:user-visible-flag t) nil [794151 794692])
            ("org-toggle-item" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [794694 799571])
            ("org-toggle-heading" function
               (:user-visible-flag t
                :arguments ("nstars"))
                nil [799573 803833])
            ("org-meta-return" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [803835 804398])
            ("org-in-subtree-not-table-p" function nil nil [804418 804575])
            ("easy-menu-define" code nil nil [804606 807442])
            ("easy-menu-define" code nil nil [807444 816070])
            ("org-info" function
               (:user-visible-flag t
                :arguments ("node"))
                nil [816072 816264])
            ("org-submit-bug-report" function (:user-visible-flag t) nil [816281 818697])
            ("org-install-agenda-files-menu" function nil nil [818700 819360])
            ("org-require-autoloaded-modules" function nil nil [819382 819564])
            ("org-reload" function
               (:user-visible-flag t
                :arguments ("uncompiled"))
                nil [819581 821576])
            ("org-customize" function (:user-visible-flag t) nil [821593 821775])
            ("org-create-customize-menu" function (:user-visible-flag t) nil [821777 822482])
            ("org-get-at-bol" function (:arguments ("property")) nil [822542 822674])
            ("org-find-text-property-in-string" function (:arguments ("prop" "s")) nil [822676 822909])
            ("org-display-warning" function (:arguments ("message")) nil [822911 823405])
            ("org-eval" function (:arguments ("form")) nil [823407 823550])
            ("org-in-clocktable-p" function nil nil [823552 823898])
            ("org-in-commented-line" function nil nil [823900 824015])
            ("org-in-indented-comment-line" function nil nil [824017 824224])
            ("org-in-verbatim-emphasis" function nil nil [824226 824424])
            ("org-goto-marker-or-bmk" function (:arguments ("marker" "bookmark")) nil [824426 824919])
            ("org-quote-csv-field" function (:arguments ("s")) nil [824921 825113])
            ("org-force-self-insert" function
               (:user-visible-flag t
                :arguments ("N"))
                nil [825115 825245])
            ("org-string-width" function (:arguments ("s")) nil [825247 826209])
            ("org-shorten-string" function (:arguments ("s" "maxlength")) nil [826211 827028])
            ("org-get-indentation" function (:arguments ("line")) nil [827030 827404])
            ("org-get-string-indentation" function (:arguments ("s")) nil [827406 827764])
            ("org-remove-tabs" function (:arguments ("s" "width")) nil [827766 828126])
            ("org-fix-indentation" function (:arguments ("line" "ind")) nil [828128 828587])
            ("org-remove-indentation" function (:arguments ("code" "n")) nil [828589 828849])
            ("org-do-remove-indentation" function (:arguments ("n")) nil [828851 829395])
            ("org-fill-template" function (:arguments ("template" "alist")) nil [829397 829841])
            ("org-base-buffer" function (:arguments ("buffer")) nil [829843 830031])
            ("org-trim" function (:arguments ("s")) nil [830033 830259])
            ("org-wrap" function (:arguments ("string" "width" "lines")) nil [830261 831212])
            ("org-do-wrap" function (:arguments ("words" "width")) nil [831214 831570])
            ("org-split-string" function (:arguments ("string" "separators")) nil [831572 832445])
            ("org-quote-vert" function (:arguments ("s")) nil [832447 832587])
            ("org-uuidgen-p" function (:arguments ("s")) nil [832589 832768])
            ("org-in-src-block-p" function (:arguments ("inside")) nil [832770 833257])
            ("org-context" function nil nil [833259 837755])
            ("org-in-regexp" function (:arguments ("re" "nlines" "visually")) nil [837809 838525])
            ("org-at-regexp-p" function (:arguments ("regexp")) nil [838527 838868])
            ("org-between-regexps-p" function (:arguments ("start-re" "end-re" "lim-up" "lim-down")) nil [838870 840105])
            ("org-in-block-p" function (:arguments ("names")) nil [840107 840824])
            ("org-in-drawer-p" function nil nil [840826 841179])
            ("org-occur-in-agenda-files" function
               (:user-visible-flag t
                :arguments ("regexp" "nlines"))
                nil [841181 841940])
            ("if" code nil nil [841942 842680])
            ("org-occur-link-in-agenda-files" function (:user-visible-flag t) nil [842682 843039])
            ("org-reverse-string" function (:arguments ("string")) nil [843041 843162])
            ("org-uniquify" function (:arguments ("list")) nil [843164 843308])
            ("org-uniquify-alist" function (:arguments ("alist")) nil [843310 843822])
            ("org-delete-all" function (:arguments ("elts" "list")) nil [843824 843964])
            ("org-count" function (:arguments ("cl-item" "cl-seq")) nil [843966 844469])
            ("org-remove-if" function (:arguments ("predicate" "seq")) nil [844471 844692])
            ("org-remove-if-not" function (:arguments ("predicate" "seq")) nil [844694 844921])
            ("org-reduce" function (:arguments ("cl-func" "cl-seq" "cl-keys")) nil [844923 845417])
            ("org-every" function (:arguments ("pred" "seq")) nil [845419 845644])
            ("org-some" function (:arguments ("pred" "seq")) nil [845646 845863])
            ("org-back-over-empty-lines" function nil nil [845865 846268])
            ("org-skip-whitespace" function nil nil [846270 846333])
            ("org-point-in-group" function (:arguments ("point" "group" "context")) nil [846335 846789])
            ("org-switch-to-buffer-other-window" function (:arguments ("args")) nil [846791 847049])
            ("org-combine-plists" function (:arguments ("plists")) nil [847051 847536])
            ("org-replace-escapes" function (:arguments ("string" "table")) nil [847538 848828])
            ("org-sublist" function (:arguments ("list" "start" "end")) nil [848830 849105])
            ("org-find-base-buffer-visiting" function (:arguments ("file")) nil [849107 849378])
            ("org-image-file-name-regexp" function (:arguments ("extensions")) nil [849380 849921])
            ("org-file-image-p" function (:arguments ("file" "extensions")) nil [849923 850099])
            ("org-get-cursor-date" function (:arguments ("with-time")) nil [850101 851261])
            ("org-mark-subtree" function
               (:user-visible-flag t
                :arguments ("up"))
                nil [851263 851904])
            ("org-indent-line" function (:user-visible-flag t) nil [851924 856155])
            ("org-indent-drawer" function (:user-visible-flag t) nil [856157 856729])
            ("org-indent-block" function (:user-visible-flag t) nil [856731 857341])
            ("org-indent-region" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [857343 857697])
            ("org-element-paragraph-separate" variable nil nil [858283 858322])
            ("org-setup-filling" function nil nil [858340 859201])
            ("org-fill-line-break-nobreak-p" function nil nil [859203 859443])
            ("org-fill-paragraph-with-timestamp-nobreak-p" function nil nil [859445 859637])
            ("declare-function" code nil nil [859639 859688])
            ("orgtbl-line-start-regexp" variable nil nil [859689 859722])
            ("org-adaptive-fill-function" function nil nil [859743 862341])
            ("declare-function" code nil nil [862343 862392])
            ("message-cite-prefix-regexp" variable nil nil [862393 862428])
            ("org-fill-paragraph" function
               (:user-visible-flag t
                :arguments ("justify"))
                nil [862447 868068])
            ("org-auto-fill-function" function nil nil [868070 868496])
            ("org-comment-line-break-function" function (:arguments ("soft")) nil [868498 868959])
            ("org-setup-comments-handling" function nil nil [869720 870140])
            ("org-insert-comment" function nil nil [870142 870394])
            ("comment-empty-lines" variable nil nil [870396 870424])
            ("org-comment-or-uncomment-region" function (:arguments ("beg" "end" "ignore")) nil [870448 872403])
            ("org-timestamp-has-time-p" function (:arguments ("timestamp")) nil [872532 872672])
            ("org-timestamp-format" function (:arguments ("timestamp" "format" "end" "utc")) nil [872674 873411])
            ("org-timestamp-split-range" function (:arguments ("timestamp" "end")) nil [873413 874694])
            ("org-timestamp-translate" function (:arguments ("timestamp" "boundary")) nil [874696 875559])
            ("org-toggle-fixed-width-section" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [875581 877205])
            ("org-reftex-citation" function (:user-visible-flag t) nil [877207 878228])
            ("org-beginning-of-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [878278 880902])
            ("org-end-of-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [880904 882625])
            ("define-key" code nil nil [882627 882682])
            ("define-key" code nil nil [882683 882732])
            ("org-backward-sentence" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [882734 883082])
            ("org-forward-sentence" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [883084 883405])
            ("define-key" code nil nil [883407 883462])
            ("define-key" code nil nil [883463 883517])
            ("org-kill-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [883519 884284])
            ("define-key" code nil nil [884286 884333])
            ("org-yank" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [884335 885564])
            ("org-yank-generic" function (:arguments ("command" "arg")) nil [885566 887312])
            ("org-yank-folding-would-swallow-text" function (:arguments ("beg" "end")) nil [887314 887877])
            ("define-key" code nil nil [887908 887950])
            ("org-truely-invisible-p" function nil nil [887952 888272])
            ("org-invisible-p2" function nil nil [888274 888527])
            ("org-back-to-heading" function (:arguments ("invisible-ok")) nil [888529 888822])
            ("org-before-first-heading-p" function nil nil [888824 888985])
            ("org-at-heading-p" function (:arguments ("ignored")) nil [888987 889058])
            ("defalias" code nil nil [889109 889155])
            ("org-at-comment-p" function nil nil [889157 889303])
            ("org-at-drawer-p" function nil nil [889305 889452])
            ("org-at-block-p" function nil nil [889454 889598])
            ("org-point-at-end-of-empty-headline" function nil nil [889600 890017])
            ("org-at-heading-or-item-p" function nil nil [890019 890096])
            ("org-at-target-p" function nil nil [890098 890211])
            ("defalias" code nil nil [890262 890306])
            ("org-up-heading-all" function (:arguments ("arg")) nil [890308 890655])
            ("org-up-heading-safe" function nil nil [890694 891411])
            ("org-first-sibling-p" function (:user-visible-flag t) nil [891413 891791])
            ("org-goto-sibling" function (:arguments ("previous")) nil [891793 892540])
            ("org-show-siblings" function nil nil [892542 892779])
            ("org-goto-first-child" function nil nil [892781 893262])
            ("org-show-hidden-entry" function nil nil [893264 893388])
            ("org-flag-heading" function (:arguments ("flag" "entry")) nil [893390 893894])
            ("org-get-next-sibling" function nil nil [893896 894333])
            ("org-get-last-sibling" function nil nil [894335 894793])
            ("org-end-of-subtree" function (:arguments ("invisible-ok" "to-heading")) nil [894795 896296])
            ("outline-end-of-subtree" function (:arguments ("around" "prefer-org-version" "activate" "compile")) nil [896298 896557])
            ("org-end-of-meta-data-and-drawers" function nil nil [896559 897261])
            ("org-forward-heading-same-level" function
               (:user-visible-flag t
                :arguments ("arg" "invisible-ok"))
                nil [897263 898678])
            ("org-backward-heading-same-level" function
               (:user-visible-flag t
                :arguments ("arg" "invisible-ok"))
                nil [898680 898968])
            ("org-next-block" function
               (:user-visible-flag t
                :arguments ("arg" "backward" "block-regexp"))
                nil [898970 899629])
            ("org-previous-block" function
               (:user-visible-flag t
                :arguments ("arg" "block-regexp"))
                nil [899631 899904])
            ("org-forward-element" function (:user-visible-flag t) nil [899906 900698])
            ("org-backward-element" function (:user-visible-flag t) nil [900700 901847])
            ("org-up-element" function (:user-visible-flag t) nil [901849 902358])
            ("org-element-greater-elements" variable nil nil [902360 902397])
            ("org-down-element" function (:user-visible-flag t) nil [902398 903019])
            ("org-drag-element-backward" function (:user-visible-flag t) nil [903021 903681])
            ("org-drag-element-forward" function (:user-visible-flag t) nil [903683 905074])
            ("org-drag-line-forward" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [905076 905421])
            ("org-drag-line-backward" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [905423 905560])
            ("org-mark-element" function (:user-visible-flag t) nil [905562 906274])
            ("org-narrow-to-element" function (:user-visible-flag t) nil [906276 906848])
            ("org-transpose-element" function (:user-visible-flag t) nil [906850 907151])
            ("org-unindent-buffer" function (:user-visible-flag t) nil [907153 908030])
            ("org-show-subtree" function (:user-visible-flag t) nil [908032 908224])
            ("org-show-entry" function (:user-visible-flag t) nil [908226 908725])
            ("org-make-options-regexp" function (:arguments ("kwds" "extra")) nil [908727 908954])
            ("org-isearch-end" function nil nil [909001 909719])
            ("org-isearch-post-command" function nil nil [909721 909899])
            ("org-imenu-markers" variable nil nil [909973 910044])
            ("make-variable-buffer-local" code nil nil [910045 910092])
            ("org-imenu-new-marker" function (:arguments ("pos")) nil [910094 910307])
            ("org-imenu-get-tree" function nil nil [910309 911318])
            ("eval-after-load" code nil nil [911320 911486])
            ("org-link-display-format" function (:arguments ("link")) nil [911488 911859])
            ("org-toggle-link-display" function (:user-visible-flag t) nil [911861 912241])
            ("org-speedbar-restriction-lock-overlay" variable (:default-value (make-overlay 1 1)) nil [912264 912390])
            ("overlay-put" code nil nil [912391 912483])
            ("overlay-put" code nil nil [912484 912598])
            ("org-detach-overlay" code nil nil [912599 912657])
            ("org-speedbar-set-agenda-restriction" function (:user-visible-flag t) nil [912659 914025])
            ("speedbar-file-key-map" variable nil nil [914027 914057])
            ("declare-function" code nil nil [914058 914132])
            ("eval-after-load" code nil nil [914133 914683])
            ("org-element-affiliated-keywords" variable nil nil [914808 914848])
            ("org-element-block-name-alist" variable nil nil [914871 914908])
            ("org-mode-flyspell-verify" function nil nil [914932 915803])
            ("org-remove-flyspell-overlays-in" function (:arguments ("beg" "end")) nil [915805 916091])
            ("eval-after-load" code nil nil [916159 916504])
            ("eval-after-load" code nil nil [916565 916735])
            ("eval-after-load" code nil nil [916790 917022])
            ("org-bookmark-jump-unhide" function nil nil [917024 917325])
            ("session-globals-exclude" variable nil nil [917375 917407])
            ("eval-after-load" code nil nil [917408 917492])
            ("org" package nil nil [917510 917524])
            ("run-hooks" code nil nil [917526 917552]))          
    :file "org.el"
    :pointmax 917575
    :fsize 917575
    :lastmodtime '(21005 34665 0 0)
    :unmatched-syntax '((close-paren 329711 . 329712) (symbol 329660 . 329677) (open-paren 329659 . 329660) (close-paren 182909 . 182910) (symbol 182835 . 182851) (open-paren 182834 . 182835) (close-paren 175153 . 175154) (symbol 175012 . 175028) (open-paren 175011 . 175012) (close-paren 174077 . 174078) (symbol 173965 . 173981) (open-paren 173964 . 173965) (close-paren 171347 . 171348) (symbol 171245 . 171261) (open-paren 171244 . 171245) (close-paren 3119 . 3120) (symbol 3064 . 3081) (open-paren 3063 . 3064))
    )
   (semanticdb-table "org-macs.el"
    :file "org-macs.el"
    :fsize 14598
    :lastmodtime '(21005 34665 0 0)
    )
   (semanticdb-table "org-compat.el"
    :file "org-compat.el"
    :fsize 19842
    :lastmodtime '(21005 34665 0 0)
    )
   (semanticdb-table "org-entities.el"
    :file "org-entities.el"
    :fsize 27014
    :lastmodtime '(21005 34665 0 0)
    )
   (semanticdb-table "org-faces.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("org-macs" include nil nil [1085 1104])
            ("org-compat" include nil nil [1105 1126])
            ("org-copy-face" function (:arguments ("old-face" "new-face" "docstring" "attributes")) nil [1128 1572])
            ("put" code nil nil [1573 1617])
            ("when" code nil nil [1619 1685])
            ("org-faces" customgroup (:user-visible-flag t) nil [1687 1778])
            ("org-default" variable
               (:default-value (org-compatible-face (quote default) nil)
                :type "face")
                nil [1780 1890])
            ("org-hide" variable
               (:default-value (quote ((((background light)) (:foreground "white")) (((background dark)) (:foreground "black"))))
                :type "face")
                nil [1892 2166])
            ("org-level-1" variable
               (:default-value (org-compatible-face (quote outline-1) (quote ((((class color) (min-colors 88) (background light)) (:foreground "Blue1")) (((class color) (min-colors 88) (background dark)) (:foreground "LightSkyBlue")) (((class color) (min-colors 16) (background light)) (:foreground "Blue")) (((class color) (min-colors 16) (background dark)) (:foreground "LightSkyBlue")) (((class color) (min-colors 8)) (:foreground "blue" :bold t)) (t (:bold t)))))
                :type "face")
                nil [2168 2760])
            ("org-level-2" variable
               (:default-value (org-compatible-face (quote outline-2) (quote ((((class color) (min-colors 16) (background light)) (:foreground "DarkGoldenrod")) (((class color) (min-colors 16) (background dark)) (:foreground "LightGoldenrod")) (((class color) (min-colors 8) (background light)) (:foreground "yellow")) (((class color) (min-colors 8) (background dark)) (:foreground "yellow" :bold t)) (t (:bold t)))))
                :type "face")
                nil [2762 3302])
            ("org-level-3" variable
               (:default-value (org-compatible-face (quote outline-3) (quote ((((class color) (min-colors 88) (background light)) (:foreground "Purple")) (((class color) (min-colors 88) (background dark)) (:foreground "Cyan1")) (((class color) (min-colors 16) (background light)) (:foreground "Purple")) (((class color) (min-colors 16) (background dark)) (:foreground "Cyan")) (((class color) (min-colors 8) (background light)) (:foreground "purple" :bold t)) (((class color) (min-colors 8) (background dark)) (:foreground "cyan" :bold t)) (t (:bold t)))))
                :type "face")
                nil [3304 3990])
            ("org-level-4" variable
               (:default-value (org-compatible-face (quote outline-4) (quote ((((class color) (min-colors 88) (background light)) (:foreground "Firebrick")) (((class color) (min-colors 88) (background dark)) (:foreground "chocolate1")) (((class color) (min-colors 16) (background light)) (:foreground "red")) (((class color) (min-colors 16) (background dark)) (:foreground "red1")) (((class color) (min-colors 8) (background light)) (:foreground "red" :bold t)) (((class color) (min-colors 8) (background dark)) (:foreground "red" :bold t)) (t (:bold t)))))
                :type "face")
                nil [3992 4681])
            ("org-level-5" variable
               (:default-value (org-compatible-face (quote outline-5) (quote ((((class color) (min-colors 16) (background light)) (:foreground "ForestGreen")) (((class color) (min-colors 16) (background dark)) (:foreground "PaleGreen")) (((class color) (min-colors 8)) (:foreground "green")))))
                :type "face")
                nil [4683 5075])
            ("org-level-6" variable
               (:default-value (org-compatible-face (quote outline-6) (quote ((((class color) (min-colors 16) (background light)) (:foreground "CadetBlue")) (((class color) (min-colors 16) (background dark)) (:foreground "Aquamarine")) (((class color) (min-colors 8)) (:foreground "magenta")))))
                :type "face")
                nil [5077 5474])
            ("org-level-7" variable
               (:default-value (org-compatible-face (quote outline-7) (quote ((((class color) (min-colors 16) (background light)) (:foreground "Orchid")) (((class color) (min-colors 16) (background dark)) (:foreground "LightSteelBlue")) (((class color) (min-colors 8)) (:foreground "blue")))))
                :type "face")
                nil [5476 5870])
            ("org-level-8" variable
               (:default-value (org-compatible-face (quote outline-8) (quote ((((class color) (min-colors 16) (background light)) (:foreground "RosyBrown")) (((class color) (min-colors 16) (background dark)) (:foreground "LightSalmon")) (((class color) (min-colors 8)) (:foreground "green")))))
                :type "face")
                nil [5872 6266])
            ("org-special-keyword" variable
               (:default-value (org-compatible-face (quote font-lock-keyword-face) (quote ((((class color) (min-colors 16) (background light)) (:foreground "RosyBrown")) (((class color) (min-colors 16) (background dark)) (:foreground "LightSalmon")) (t (:italic t)))))
                :type "face")
                nil [6268 6643])
            ("org-drawer" variable
               (:default-value (org-compatible-face nil (quote ((((class color) (min-colors 88) (background light)) (:foreground "Blue1")) (((class color) (min-colors 88) (background dark)) (:foreground "LightSkyBlue")) (((class color) (min-colors 16) (background light)) (:foreground "Blue")) (((class color) (min-colors 16) (background dark)) (:foreground "LightSkyBlue")) (((class color) (min-colors 8)) (:foreground "blue" :bold t)) (t (:bold t)))))
                :type "face")
                nil [6645 7219])
            ("org-property-value" variable (:type "face") nil [7221 7316])
            ("org-column" variable
               (:default-value (org-compatible-face nil (quote ((((class color) (min-colors 16) (background light)) (:background "grey90" :weight normal :slant normal :strike-through nil :underline nil)) (((class color) (min-colors 16) (background dark)) (:background "grey30" :weight normal :slant normal :strike-through nil :underline nil)) (((class color) (min-colors 8)) (:background "cyan" :foreground "black" :weight normal :slant normal :strike-through nil :underline nil)) (t (:inverse-video t)))))
                :type "face")
                nil [7318 9120])
            ("org-column-title" variable
               (:default-value (org-compatible-face nil (quote ((((class color) (min-colors 16) (background light)) (:background "grey90" :underline t :weight bold)) (((class color) (min-colors 16) (background dark)) (:background "grey30" :underline t :weight bold)) (((class color) (min-colors 8)) (:background "cyan" :foreground "black" :underline t :weight bold)) (t (:inverse-video t)))))
                :type "face")
                nil [9122 9617])
            ("org-agenda-column-dateline" variable
               (:default-value (org-compatible-face (quote org-column) (quote ((t nil))))
                :type "face")
                nil [9619 9792])
            ("org-warning" variable
               (:default-value (org-compatible-face (quote font-lock-warning-face) (quote ((((class color) (min-colors 16) (background light)) (:foreground "Red1" :bold t)) (((class color) (min-colors 16) (background dark)) (:foreground "Pink" :bold t)) (((class color) (min-colors 8) (background light)) (:foreground "red" :bold t)) (((class color) (min-colors 8) (background dark)) (:foreground "red" :bold t)) (t (:bold t)))))
                :type "face")
                nil [9794 10298])
            ("org-archived" variable
               (:default-value (org-compatible-face (quote shadow) (quote ((((class color grayscale) (min-colors 88) (background light)) (:foreground "grey50")) (((class color grayscale) (min-colors 88) (background dark)) (:foreground "grey70")) (((class color) (min-colors 8) (background light)) (:foreground "green")) (((class color) (min-colors 8) (background dark)) (:foreground "yellow")))))
                :type "face")
                nil [10300 10813])
            ("org-link" variable
               (:default-value (org-compatible-face (quote link) (quote ((((class color) (background light)) (:foreground "Purple" :underline t)) (((class color) (background dark)) (:foreground "Cyan" :underline t)) (t (:underline t)))))
                :type "face")
                nil [10815 11084])
            ("org-footnote" variable
               (:default-value (quote ((((class color) (background light)) (:foreground "Purple" :underline t)) (((class color) (background dark)) (:foreground "Cyan" :underline t)) (t (:underline t))))
                :type "face")
                nil [11086 11323])
            ("org-ellipsis" variable
               (:default-value (quote ((((class color) (background light)) (:foreground "DarkGoldenrod" :underline t)) (((class color) (background dark)) (:foreground "LightGoldenrod" :underline t)) (t (:strike-through t))))
                :type "face")
                nil [11325 11606])
            ("org-target" variable
               (:default-value (quote ((((class color) (background light)) (:underline t)) (((class color) (background dark)) (:underline t)) (t (:underline t))))
                :type "face")
                nil [11608 11810])
            ("org-date" variable
               (:default-value (quote ((((class color) (background light)) (:foreground "Purple" :underline t)) (((class color) (background dark)) (:foreground "Cyan" :underline t)) (t (:underline t))))
                :type "face")
                nil [11812 12056])
            ("org-date-selected" variable
               (:default-value (org-compatible-face nil (quote ((((class color) (min-colors 16) (background light)) (:foreground "Red1" :inverse-video t)) (((class color) (min-colors 16) (background dark)) (:foreground "Pink" :inverse-video t)) (((class color) (min-colors 8) (background light)) (:foreground "red" :inverse-video t)) (((class color) (min-colors 8) (background dark)) (:foreground "red" :inverse-video t)) (t (:inverse-video t)))))
                :type "face")
                nil [12058 12702])
            ("org-sexp-date" variable
               (:default-value (quote ((((class color) (background light)) (:foreground "Purple")) (((class color) (background dark)) (:foreground "Cyan")) (t (:underline t))))
                :type "face")
                nil [12704 12946])
            ("org-tag" variable
               (:default-value (quote ((t (:bold t))))
                :type "face")
                nil [12948 13123])
            ("org-list-dt" variable
               (:default-value (quote ((t (:bold t))))
                :type "face")
                nil [13125 13233])
            ("org-todo" variable
               (:default-value (org-compatible-face nil (quote ((((class color) (min-colors 16) (background light)) (:foreground "Red1" :bold t)) (((class color) (min-colors 16) (background dark)) (:foreground "Pink" :bold t)) (((class color) (min-colors 8) (background light)) (:foreground "red" :bold t)) (((class color) (min-colors 8) (background dark)) (:foreground "red" :bold t)) (t (:inverse-video t :bold t)))))
                :type "face")
                nil [13235 13744])
            ("org-done" variable
               (:default-value (org-compatible-face nil (quote ((((class color) (min-colors 16) (background light)) (:foreground "ForestGreen" :bold t)) (((class color) (min-colors 16) (background dark)) (:foreground "PaleGreen" :bold t)) (((class color) (min-colors 8)) (:foreground "green")) (t (:bold t)))))
                :type "face")
                nil [13746 14185])
            ("org-agenda-done" variable
               (:default-value (org-compatible-face nil (quote ((((class color) (min-colors 16) (background light)) (:foreground "ForestGreen")) (((class color) (min-colors 16) (background dark)) (:foreground "PaleGreen")) (((class color) (min-colors 8)) (:foreground "green")) (t (:bold nil)))))
                :type "face")
                nil [14187 14945])
            ("org-headline-done" variable
               (:default-value (org-compatible-face nil (quote ((((class color) (min-colors 16) (background light)) (:foreground "RosyBrown")) (((class color) (min-colors 16) (background dark)) (:foreground "LightSalmon")) (((class color) (min-colors 8) (background light)) (:bold nil)))))
                :type "face")
                nil [14947 15490])
            ("org-faces-easy-properties" variable (:default-value (quote ((todo . :foreground) (tag . :foreground) (priority . :foreground)))) nil [15492 16038])
            ("org-todo-keyword-faces" variable nil nil [16040 16697])
            ("org-priority" variable
               (:default-value (org-compatible-face (quote font-lock-keyword-face) (quote ((((class color) (min-colors 16) (background light)) (:foreground "RosyBrown")) (((class color) (min-colors 16) (background dark)) (:foreground "LightSalmon")) (t (:italic t)))))
                :type "face")
                nil [16699 17067])
            ("org-priority-faces" variable nil nil [17069 17679])
            ("org-tags-special-faces-re" variable nil nil [17681 17719])
            ("org-set-tag-faces" function (:arguments ("var" "value")) nil [17720 17929])
            ("org-checkbox" variable
               (:default-value (org-compatible-face (quote bold) (quote ((t (:bold t)))))
                :type "face")
                nil [17931 18049])
            ("org-copy-face" code nil nil [18052 18157])
            ("org-copy-face" code nil nil [18159 18262])
            ("org-tag-faces" variable nil nil [18264 18992])
            ("org-table" variable
               (:default-value (org-compatible-face nil (quote ((((class color) (min-colors 88) (background light)) (:foreground "Blue1")) (((class color) (min-colors 88) (background dark)) (:foreground "LightSkyBlue")) (((class color) (min-colors 16) (background light)) (:foreground "Blue")) (((class color) (min-colors 16) (background dark)) (:foreground "LightSkyBlue")) (((class color) (min-colors 8) (background light)) (:foreground "blue")) (((class color) (min-colors 8) (background dark))))))
                :type "face")
                nil [18994 19616])
            ("org-formula" variable
               (:default-value (org-compatible-face nil (quote ((((class color) (min-colors 88) (background light)) (:foreground "Firebrick")) (((class color) (min-colors 88) (background dark)) (:foreground "chocolate1")) (((class color) (min-colors 8) (background light)) (:foreground "red")) (((class color) (min-colors 8) (background dark)) (:foreground "red")) (t (:bold t :italic t)))))
                :type "face")
                nil [19618 20068])
            ("org-code" variable
               (:default-value (org-compatible-face (quote shadow) (quote ((((class color grayscale) (min-colors 88) (background light)) (:foreground "grey50")) (((class color grayscale) (min-colors 88) (background dark)) (:foreground "grey70")) (((class color) (min-colors 8) (background light)) (:foreground "green")) (((class color) (min-colors 8) (background dark)) (:foreground "yellow")))))
                :type "face")
                nil [20070 20580])
            ("org-meta-line" variable
               (:default-value (org-compatible-face (quote font-lock-comment-face) nil)
                :type "face")
                nil [20582 20740])
            ("org-document-title" variable
               (:default-value (quote ((((class color) (background light)) (:foreground "midnight blue" :weight bold)) (((class color) (background dark)) (:foreground "pale turquoise" :weight bold)) (t (:weight bold))))
                :type "face")
                nil [20742 21057])
            ("org-document-info" variable
               (:default-value (quote ((((class color) (background light)) (:foreground "midnight blue")) (((class color) (background dark)) (:foreground "pale turquoise")) (t nil)))
                :type "face")
                nil [21059 21373])
            ("org-document-info-keyword" variable
               (:default-value (org-compatible-face (quote shadow) (quote ((((class color grayscale) (min-colors 88) (background light)) (:foreground "grey50")) (((class color grayscale) (min-colors 88) (background dark)) (:foreground "grey70")) (((class color) (min-colors 8) (background light)) (:foreground "green")) (((class color) (min-colors 8) (background dark)) (:foreground "yellow")))))
                :type "face")
                nil [21375 21899])
            ("org-block" variable
               (:default-value (org-compatible-face (quote shadow) (quote ((((class color grayscale) (min-colors 88) (background light)) (:foreground "grey50")) (((class color grayscale) (min-colors 88) (background dark)) (:foreground "grey70")) (((class color) (min-colors 8) (background light)) (:foreground "green")) (((class color) (min-colors 8) (background dark)) (:foreground "yellow")))))
                :type "face")
                nil [21901 22405])
            ("org-block-background" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [22407 22494])
            ("org-copy-face" code nil nil [22496 22614])
            ("org-copy-face" code nil nil [22616 22730])
            ("org-verbatim" variable
               (:default-value (org-compatible-face (quote shadow) (quote ((((class color grayscale) (min-colors 88) (background light)) (:foreground "grey50" :underline t)) (((class color grayscale) (min-colors 88) (background dark)) (:foreground "grey70" :underline t)) (((class color) (min-colors 8) (background light)) (:foreground "green" :underline t)) (((class color) (min-colors 8) (background dark)) (:foreground "yellow" :underline t)))))
                :type "face")
                nil [22732 23297])
            ("org-copy-face" code nil nil [23299 23387])
            ("org-copy-face" code nil nil [23388 23476])
            ("org-fontify-quote-and-verse-blocks" variable nil nil [23478 23796])
            ("org-clock-overlay" variable
               (:default-value (org-compatible-face nil (quote ((((class color) (min-colors 88) (background light)) (:background "yellow1")) (((class color) (min-colors 88) (background dark)) (:background "SkyBlue4")) (((class color) (min-colors 16) (background light)) (:background "yellow")) (((class color) (min-colors 16) (background dark)) (:background "SkyBlue4")) (((class color) (min-colors 8)) (:background "cyan" :foreground "black")) (t (:inverse-video t)))))
                :type "face")
                nil [23798 24439])
            ("org-agenda-structure" variable
               (:default-value (org-compatible-face nil (quote ((((class color) (min-colors 88) (background light)) (:foreground "Blue1")) (((class color) (min-colors 88) (background dark)) (:foreground "LightSkyBlue")) (((class color) (min-colors 16) (background light)) (:foreground "Blue")) (((class color) (min-colors 16) (background dark)) (:foreground "LightSkyBlue")) (((class color) (min-colors 8)) (:foreground "blue" :bold t)) (t (:bold t)))))
                :type "face")
                nil [24441 25046])
            ("org-copy-face" code nil nil [25048 25143])
            ("org-copy-face" code nil nil [25145 25262])
            ("org-copy-face" code nil nil [25264 25376])
            ("org-copy-face" code nil nil [25378 25590])
            ("org-scheduled" variable
               (:default-value (org-compatible-face nil (quote ((((class color) (min-colors 88) (background light)) (:foreground "DarkGreen")) (((class color) (min-colors 88) (background dark)) (:foreground "PaleGreen")) (((class color) (min-colors 8)) (:foreground "green")) (t (:bold t :italic t)))))
                :type "face")
                nil [25592 25972])
            ("org-scheduled-today" variable
               (:default-value (org-compatible-face nil (quote ((((class color) (min-colors 88) (background light)) (:foreground "DarkGreen")) (((class color) (min-colors 88) (background dark)) (:foreground "PaleGreen")) (((class color) (min-colors 8)) (:foreground "green")) (t (:bold t :italic t)))))
                :type "face")
                nil [25974 26360])
            ("org-agenda-dimmed-todo-face" variable
               (:default-value (quote ((((background light)) (:foreground "grey50")) (((background dark)) (:foreground "grey50"))))
                :type "face")
                nil [26362 26569])
            ("org-scheduled-previously" variable
               (:default-value (org-compatible-face nil (quote ((((class color) (min-colors 88) (background light)) (:foreground "Firebrick")) (((class color) (min-colors 88) (background dark)) (:foreground "chocolate1")) (((class color) (min-colors 8) (background light)) (:foreground "red")) (((class color) (min-colors 8) (background dark)) (:foreground "red" :bold t)) (t (:bold t)))))
                :type "face")
                nil [26571 27068])
            ("org-upcoming-deadline" variable
               (:default-value (org-compatible-face nil (quote ((((class color) (min-colors 88) (background light)) (:foreground "Firebrick")) (((class color) (min-colors 88) (background dark)) (:foreground "chocolate1")) (((class color) (min-colors 8) (background light)) (:foreground "red")) (((class color) (min-colors 8) (background dark)) (:foreground "red" :bold t)) (t (:bold t)))))
                :type "face")
                nil [27070 27564])
            ("org-agenda-deadline-faces" variable (:default-value (quote ((1.0 . org-warning) (0.5 . org-upcoming-deadline) (0.0 . default)))) nil [27566 28558])
            ("org-agenda-restriction-lock" variable
               (:default-value (org-compatible-face nil (quote ((((class color) (min-colors 88) (background light)) (:background "#eeeeee")) (((class color) (min-colors 88) (background dark)) (:background "#1C1C1C")) (((class color) (min-colors 16) (background light)) (:background "#eeeeee")) (((class color) (min-colors 16) (background dark)) (:background "#1C1C1C")) (((class color) (min-colors 8)) (:background "cyan" :foreground "black")) (t (:inverse-video t)))))
                :type "face")
                nil [28560 29137])
            ("org-agenda-filter-tags" variable
               (:default-value (org-compatible-face (quote mode-line) nil)
                :type "face")
                nil [29139 29294])
            ("org-agenda-filter-regexp" variable
               (:default-value (org-compatible-face (quote mode-line) nil)
                :type "face")
                nil [29296 29456])
            ("org-agenda-filter-category" variable
               (:default-value (org-compatible-face (quote mode-line) nil)
                :type "face")
                nil [29458 29624])
            ("org-time-grid" variable
               (:default-value (org-compatible-face nil (quote ((((class color) (min-colors 16) (background light)) (:foreground "DarkGoldenrod")) (((class color) (min-colors 16) (background dark)) (:foreground "LightGoldenrod")) (((class color) (min-colors 8)) (:foreground "yellow" :weight light)))))
                :type "face")
                nil [29626 30037])
            ("org-copy-face" code nil nil [30039 30151])
            ("org-agenda-diary" variable
               (:default-value (org-compatible-face (quote default) nil)
                :type "face")
                nil [30153 30301])
            ("org-agenda-calendar-event" variable
               (:default-value (org-compatible-face (quote default) nil)
                :type "face")
                nil [30303 30456])
            ("org-agenda-calendar-sexp" variable
               (:default-value (org-compatible-face (quote default) nil)
                :type "face")
                nil [30458 30608])
            ("org-level-faces" variable
               (:constant-flag t
                :default-value (quote (org-level-1 org-level-2 org-level-3 org-level-4 org-level-5 org-level-6 org-level-7 org-level-8)))
                nil [30610 30742])
            ("org-n-level-faces" variable (:default-value (length org-level-faces)) nil [30744 31037])
            ("org-cycle-level-faces" variable (:default-value t) nil [31039 31366])
            ("org-latex-and-related" variable
               (:default-value (let ((font (cond ((assq :inherit custom-face-attributes) (quote (:inherit underline))) (t (quote (:underline t)))))) (\` ((((class grayscale) (background light)) (:foreground "DimGray" (\,@ font))) (((class grayscale) (background dark)) (:foreground "LightGray" (\,@ font))) (((class color) (background light)) (:foreground "SaddleBrown")) (((class color) (background dark)) (:foreground "burlywood")) (t ((\,@ font))))))
                :type "face")
                nil [31368 32004])
            ("org-macro" variable
               (:default-value (org-compatible-face (quote org-latex-and-related) nil)
                :type "face")
                nil [32006 32169])
            ("org-tag-group" variable
               (:default-value (org-compatible-face (quote org-tag) nil)
                :type "face")
                nil [32171 32328])
            ("org-copy-face" code nil nil [32330 32423])
            ("org-copy-face" code nil nil [32424 32563])
            ("org-faces" package nil nil [32565 32585]))          
    :file "org-faces.el"
    :pointmax 32614
    :fsize 32613
    :lastmodtime '(21005 34665 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "org-list.el"
    :file "org-list.el"
    :fsize 121781
    :lastmodtime '(21005 34665 0 0)
    )
   (semanticdb-table "org-pcomplete.el"
    :file "org-pcomplete.el"
    :fsize 14600
    :lastmodtime '(21005 34665 0 0)
    )
   (semanticdb-table "org-src.el"
    :file "org-src.el"
    :fsize 37328
    :lastmodtime '(21005 34665 0 0)
    )
   (semanticdb-table "org-footnote.el"
    :file "org-footnote.el"
    :fsize 33461
    :lastmodtime '(21005 34665 0 0)
    )
   (semanticdb-table "org-macro.el"
    :file "org-macro.el"
    :fsize 7739
    :lastmodtime '(21005 34665 0 0)
    )
   (semanticdb-table "ob.el"
    :file "ob.el"
    :fsize 1232
    :lastmodtime '(21005 34665 0 0)
    )
   (semanticdb-table "org-agenda.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("org" include nil nil [1929 1943])
            ("org-macs" include nil nil [1944 1963])
            ("cl" include nil nil [1985 1998])
            ("declare-function" code nil nil [2001 2126])
            ("declare-function" code nil nil [2127 2195])
            ("declare-function" code nil nil [2196 2274])
            ("declare-function" code nil nil [2275 2353])
            ("declare-function" code nil nil [2354 2432])
            ("declare-function" code nil nil [2433 2511])
            ("declare-function" code nil nil [2512 2590])
            ("declare-function" code nil nil [2591 2669])
            ("declare-function" code nil nil [2670 2738])
            ("declare-function" code nil nil [2739 2817])
            ("declare-function" code nil nil [2818 2896])
            ("declare-function" code nil nil [2897 2975])
            ("declare-function" code nil nil [2976 3044])
            ("declare-function" code nil nil [3045 3123])
            ("declare-function" code nil nil [3124 3202])
            ("declare-function" code nil nil [3203 3281])
            ("declare-function" code nil nil [3282 3348])
            ("declare-function" code nil nil [3350 3451])
            ("declare-function" code nil nil [3452 3517])
            ("declare-function" code nil nil [3518 3596])
            ("declare-function" code nil nil [3597 3670])
            ("declare-function" code nil nil [3671 3758])
            ("declare-function" code nil nil [3759 3820])
            ("declare-function" code nil nil [3821 3888])
            ("declare-function" code nil nil [3889 3967])
            ("declare-function" code nil nil [3968 4075])
            ("declare-function" code nil nil [4076 4130])
            ("declare-function" code nil nil [4131 4193])
            ("declare-function" code nil nil [4194 4260])
            ("calendar-mode-map" variable nil nil [4262 4288])
            ("org-clock-current-task" variable nil nil [4333 4368])
            ("org-mobile-force-id-on-agenda-items" variable nil nil [4405 4449])
            ("org-habit-show-habits" variable nil nil [4478 4508])
            ("org-habit-show-habits-only-for-today" variable nil nil [4550 4595])
            ("org-habit-show-all-today" variable nil nil [4596 4629])
            ("org-agenda-buffer-name" variable (:default-value "*Org Agenda*") nil [4694 4740])
            ("org-agenda-overriding-header" variable nil nil [4741 4782])
            ("org-agenda-title-append" variable nil nil [4783 4819])
            ("org-no-warnings" code nil nil [4820 4852])
            ("org-no-warnings" code nil nil [4885 4916])
            ("original-date" variable nil nil [4950 4972])
            ("org-agenda-undo-list" variable nil nil [5024 5123])
            ("org-agenda-pending-undo-list" variable nil nil [5124 5241])
            ("org-agenda-confirm-kill" variable (:default-value 1) nil [5243 5641])
            ("org-agenda-compact-blocks" variable nil nil [5643 5885])
            ("org-agenda-block-separator" variable (:default-value 61) nil [5887 6358])
            ("org-agenda-export" customgroup (:user-visible-flag t) nil [6360 6499])
            ("org-agenda-with-colors" variable (:default-value t) nil [6501 6628])
            ("org-agenda-exporter-settings" variable nil nil [6630 7170])
            ("org-agenda-before-write-hook" variable (:default-value (quote (org-agenda-add-entry-text))) nil [7172 7467])
            ("org-agenda-add-entry-text-maxlines" variable nil nil [7469 8103])
            ("org-agenda-add-entry-text-descriptive-links" variable (:default-value t) nil [8105 8446])
            ("org-agenda-export-html-style" variable nil nil [8448 9806])
            ("org-agenda-persistent-filter" variable nil nil [9808 9951])
            ("org-agenda-custom-commands" customgroup (:user-visible-flag t) nil [9953 10100])
            ("org-sorting-choice" variable
               (:constant-flag t
                :default-value (quote (choice (const time-up) (const time-down) (const timestamp-up) (const timestamp-down) (const scheduled-up) (const scheduled-down) (const deadline-up) (const deadline-down) (const ts-up) (const ts-down) (const tsia-up) (const tsia-down) (const category-keep) (const category-up) (const category-down) (const tag-down) (const tag-up) (const priority-up) (const priority-down) (const todo-state-up) (const todo-state-down) (const effort-up) (const effort-down) (const habit-up) (const habit-down) (const alpha-up) (const alpha-down) (const user-defined-up) (const user-defined-down))))
                nil [10102 10793])
            ("org-defvaralias" code nil nil [10916 10989])
            ("org-defvaralias" code nil nil [10990 11049])
            ("org-agenda-entry-types" variable (:default-value (quote (:deadline :scheduled :timestamp :sexp))) nil [11051 12927])
            ("org-agenda-custom-commands-local-options" variable
               (:constant-flag t
                :default-value (\` (repeat :tag "Local settings for this command.  Remember to quote values" (choice :tag "Setting" (list :tag "Heading for this block" (const org-agenda-overriding-header) (string :tag "Headline")) (list :tag "Files to be searched" (const org-agenda-files) (list (const :format "" quote) (repeat (file)))) (list :tag "Sorting strategy" (const org-agenda-sorting-strategy) (list (const :format "" quote) (repeat (\, org-sorting-choice)))) (list :tag "Prefix format" (const org-agenda-prefix-format :value "  %-12:c%?-12t% s") (string)) (list :tag "Number of days in agenda" (const org-agenda-span) (choice (const :tag "Day" (quote day)) (const :tag "Week" (quote week)) (const :tag "Month" (quote month)) (const :tag "Year" (quote year)) (integer :tag "Custom"))) (list :tag "Fixed starting date" (const org-agenda-start-day) (string :value "2007-11-01")) (list :tag "Start on day of week" (const org-agenda-start-on-weekday) (choice :value 1 (const :tag "Today" nil) (integer :tag "Weekday No."))) (list :tag "Include data from diary" (const org-agenda-include-diary) (boolean)) (list :tag "Deadline Warning days" (const org-deadline-warning-days) (integer :value 1)) (list :tag "Category filter preset" (const org-agenda-category-filter-preset) (list (const :format "" quote) (repeat (string :tag "+category or -category")))) (list :tag "Tags filter preset" (const org-agenda-tag-filter-preset) (list (const :format "" quote) (repeat (string :tag "+tag or -tag")))) (list :tag "Regexp filter preset" (const org-agenda-regexp-filter-preset) (list (const :format "" quote) (repeat (string :tag "+regexp or -regexp")))) (list :tag "Set daily/weekly entry types" (const org-agenda-entry-types) (list (const :format "" quote) (set :greedy t :value (\, org-agenda-entry-types) (const :deadline) (const :scheduled) (const :deadline*) (const :scheduled*) (const :timestamp) (const :sexp)))) (list :tag "Standard skipping condition" :value (org-agenda-skip-function (quote (org-agenda-skip-entry-if))) (const org-agenda-skip-function) (list (const :format "" quote) (list (choice :tag "Skipping range" (const :tag "Skip entry" org-agenda-skip-entry-if) (const :tag "Skip subtree" org-agenda-skip-subtree-if)) (repeat :inline t :tag "Conditions for skipping" (choice :tag "Condition type" (list :tag "Regexp matches" :inline t (const :format "" (quote regexp)) (regexp)) (list :tag "Regexp does not match" :inline t (const :format "" (quote notregexp)) (regexp)) (list :tag "TODO state is" :inline t (const (quote todo)) (choice (const :tag "any not-done state" (quote todo)) (const :tag "any done state" (quote done)) (const :tag "any state" (quote any)) (list :tag "Keyword list" (const :format "" quote) (repeat (string :tag "Keyword"))))) (list :tag "TODO state is not" :inline t (const (quote nottodo)) (choice (const :tag "any not-done state" (quote todo)) (const :tag "any done state" (quote done)) (const :tag "any state" (quote any)) (list :tag "Keyword list" (const :format "" quote) (repeat (string :tag "Keyword"))))) (const :tag "scheduled" (quote scheduled)) (const :tag "not scheduled" (quote notscheduled)) (const :tag "deadline" (quote deadline)) (const :tag "no deadline" (quote notdeadline)) (const :tag "timestamp" (quote timestamp)) (const :tag "no timestamp" (quote nottimestamp))))))) (list :tag "Non-standard skipping condition" :value (org-agenda-skip-function) (const org-agenda-skip-function) (sexp :tag "Function or form (quoted!)")) (list :tag "Any variable" (variable :tag "Variable") (sexp :tag "Value (sexp)"))))))
                nil [12929 17144])
            ("org-agenda-custom-commands" variable (:default-value (quote (("n" "Agenda and all TODO's" ((agenda "") (alltodo "")))))) nil [17147 23247])
            ("org-agenda-query-register" variable (:default-value 111) nil [23249 23519])
            ("org-stuck-projects" variable (:default-value (quote ("+LEVEL=2/-DONE" ("TODO" "NEXT" "NEXTACTION") nil ""))) nil [23521 25456])
            ("org-agenda-filter-effort-default-operator" variable (:default-value "<") nil [25458 25823])
            ("org-agenda-skip" customgroup (:user-visible-flag t) nil [25825 25956])
            ("org-agenda-skip-function-global" variable nil nil [25958 26728])
            ("org-agenda-daily/weekly" customgroup (:user-visible-flag t) nil [26730 26870])
            ("org-agenda-todo-list" customgroup (:user-visible-flag t) nil [26871 27014])
            ("org-agenda-match-view" customgroup (:user-visible-flag t) nil [27015 27176])
            ("org-agenda-search-view" customgroup (:user-visible-flag t) nil [27177 27339])
            ("org-agenda-archives-mode" variable nil nil [27341 27676])
            ("org-agenda-restriction-lock-highlight-subtree" variable (:default-value t) nil [27678 27986])
            ("org-agenda-skip-comment-trees" variable (:default-value t) nil [27988 28199])
            ("org-agenda-todo-list-sublevels" variable (:default-value t) nil [28201 28503])
            ("org-agenda-todo-ignore-with-date" variable nil nil [28505 29066])
            ("org-agenda-todo-ignore-timestamp" variable nil nil [29068 30717])
            ("org-agenda-todo-ignore-scheduled" variable nil nil [30719 32085])
            ("org-agenda-todo-ignore-deadlines" variable nil nil [32087 33832])
            ("org-agenda-todo-ignore-time-comparison-use-seconds" variable nil nil [33834 34516])
            ("org-agenda-tags-todo-honor-ignore-options" variable nil nil [34518 35175])
            ("org-agenda-skip-scheduled-if-done" variable nil nil [35177 35604])
            ("org-agenda-skip-scheduled-if-deadline-is-shown" variable nil nil [35606 36573])
            ("org-agenda-skip-timestamp-if-deadline-is-shown" variable nil nil [36575 37197])
            ("org-agenda-skip-deadline-if-done" variable nil nil [37199 37676])
            ("org-agenda-skip-deadline-prewarning-if-scheduled" variable nil nil [37678 38817])
            ("org-agenda-skip-scheduled-delay-if-deadline" variable nil nil [38819 39604])
            ("org-agenda-skip-additional-timestamps-same-entry" variable nil nil [39606 39913])
            ("org-agenda-skip-timestamp-if-done" variable nil nil [39915 40115])
            ("org-agenda-dim-blocked-tasks" variable (:default-value t) nil [40117 41186])
            ("org-timeline-show-empty-dates" variable (:default-value 3) nil [41188 41691])
            ("org-agenda-startup" customgroup (:user-visible-flag t) nil [41693 41842])
            ("org-agenda-menu-show-matcher" variable (:default-value t) nil [41844 42289])
            ("define-obsolete-variable-alias" code nil nil [42291 42387])
            ("org-agenda-menu-two-columns" variable nil nil [42389 42647])
            ("define-obsolete-variable-alias" code nil nil [42649 42740])
            ("org-agenda-finalize-hook" variable nil nil [42741 43114])
            ("org-agenda-mouse-1-follows-link" variable nil nil [43116 43391])
            ("org-agenda-start-with-follow-mode" variable nil nil [43393 43559])
            ("org-agenda-follow-indirect" variable nil nil [43561 43764])
            ("org-agenda-show-outline-path" variable (:default-value t) nil [43766 43922])
            ("org-agenda-start-with-entry-text-mode" variable nil nil [43924 44098])
            ("org-agenda-entry-text-maxlines" variable (:default-value 5) nil [44100 44419])
            ("org-agenda-entry-text-exclude-regexps" variable nil nil [44421 44705])
            ("org-agenda-entry-text-leaders" variable (:default-value "    > ") nil [44707 44902])
            ("org-agenda-entry-text-cleanup-hook" variable nil nil [44904 45340])
            ("org-agenda-include-inactive-timestamps" variable nil nil [45342 45484])
            ("org-agenda-windows" customgroup (:user-visible-flag t) nil [45486 45635])
            ("org-agenda-window-setup" variable (:default-value (quote reorganize-frame)) nil [45637 46392])
            ("org-agenda-window-frame-fractions" variable (:default-value (quote (0.5 . 0.75))) nil [46394 46768])
            ("org-agenda-restore-windows-after-quit" variable nil nil [46770 47223])
            ("org-agenda-ndays" variable nil nil [47225 47436])
            ("make-obsolete-variable" code nil nil [47438 47504])
            ("org-agenda-span" variable (:default-value (quote week)) nil [47506 47894])
            ("org-agenda-start-on-weekday" variable (:default-value 1) nil [47896 48262])
            ("org-agenda-show-all-dates" variable (:default-value t) nil [48264 48487])
            ("org-agenda-format-date" variable (:default-value (quote org-agenda-format-date-aligned)) nil [48489 48994])
            ("org-agenda-format-date-aligned" function (:arguments ("date")) nil [48996 49782])
            ("org-agenda-time-leading-zero" variable nil nil [49784 50020])
            ("org-agenda-timegrid-use-ampm" variable nil nil [50022 50181])
            ("org-agenda-time-of-day-to-ampm" function (:arguments ("time")) nil [50183 50740])
            ("org-agenda-time-of-day-to-ampm-maybe" function (:arguments ("time")) nil [50742 50970])
            ("org-agenda-weekend-days" variable (:default-value (quote (6 0))) nil [50972 51420])
            ("org-agenda-move-date-from-past-immediately-to-today" variable (:default-value t) nil [51422 51853])
            ("org-agenda-include-diary" variable nil nil [51855 52087])
            ("org-agenda-include-deadlines" variable (:default-value t) nil [52089 52332])
            ("org-agenda-repeating-timestamp-show-all" variable (:default-value t) nil [52334 52888])
            ("org-scheduled-past-days" variable (:default-value 10000) nil [52890 53207])
            ("org-agenda-log-mode-items" variable (:default-value (quote (closed clock))) nil [53209 53776])
            ("org-agenda-clock-consistency-checks" variable (:default-value (quote (:max-duration "10:00" :min-duration 0 :max-gap "0:05" :gap-ok-around ("4:00") :default-face ((:background "DarkRed") (:foreground "white")) :overlap-face nil :gap-face nil :no-end-time-face nil :long-face nil :short-face nil))) nil [53778 55829])
            ("org-agenda-log-mode-add-notes" variable (:default-value t) nil [55831 56156])
            ("org-agenda-start-with-log-mode" variable nil nil [56158 56847])
            ("org-agenda-start-with-clockreport-mode" variable nil nil [56849 57059])
            ("org-agenda-clockreport-parameter-plist" variable (:default-value (quote (:link t :maxlevel 2))) nil [57061 57624])
            ("org-agenda-search-view-always-boolean" variable nil nil [57626 58880])
            ("org-defvaralias" code nil nil [58882 58982])
            ("org-agenda-search-view-force-full-words" variable nil nil [58984 59220])
            ("org-agenda-search-view-max-outline-level" variable nil nil [59222 59514])
            ("org-agenda-time-grid" customgroup (:user-visible-flag t) nil [59516 59663])
            ("org-agenda-search-headline-for-time" variable (:default-value t) nil [59665 60185])
            ("org-agenda-use-time-grid" variable (:default-value t) nil [60187 60628])
            ("org-agenda-time-grid" variable (:default-value (quote ((daily today require-timed) "----------------" (800 1000 1200 1400 1600 1800 2000)))) nil [60630 61877])
            ("org-agenda-show-current-time-in-grid" variable (:default-value t) nil [61879 62053])
            ("org-agenda-current-time-string" variable (:default-value "now - - - - - - - - - - - - - - - - - - - - - - - - -") nil [62055 62278])
            ("org-agenda-sorting" customgroup (:user-visible-flag t) nil [62280 62417])
            ("org-agenda-sorting-strategy" variable (:default-value (quote ((agenda habit-down time-up priority-down category-keep) (todo priority-down category-keep) (tags priority-down category-keep) (search category-keep)))) nil [62419 66149])
            ("org-agenda-cmp-user-defined" variable nil nil [66151 66574])
            ("org-sort-agenda-notime-is-late" variable (:default-value t) nil [66576 67048])
            ("org-sort-agenda-noeffort-is-high" variable (:default-value t) nil [67050 67441])
            ("org-agenda-line-format" customgroup (:user-visible-flag t) nil [67443 67605])
            ("org-agenda-prefix-format" variable (:default-value (quote ((agenda . " %i %-12:c%?-12t% s") (timeline . "  % s") (todo . " %i %-12:c") (tags . " %i %-12:c") (search . " %i %-12:c")))) nil [67607 70730])
            ("org-prefix-format-compiled" variable nil nil [70732 70995])
            ("org-agenda-todo-keyword-format" variable (:default-value "%-1s") nil [70997 71258])
            ("org-agenda-diary-sexp-prefix" variable nil nil [71260 71629])
            ("org-agenda-timerange-leaders" variable (:default-value (quote ("" "(%d/%d): "))) nil [71631 72228])
            ("org-agenda-scheduled-leaders" variable (:default-value (quote ("Scheduled: " "Sched.%2dx: "))) nil [72230 72958])
            ("org-agenda-inactive-leader" variable (:default-value "[") nil [72960 73200])
            ("org-agenda-deadline-leaders" variable (:default-value (quote ("Deadline:  " "In %3d d.: " "%2d d. ago: "))) nil [73202 73823])
            ("org-agenda-remove-times-when-in-prefix" variable (:default-value t) nil [73825 74660])
            ("org-agenda-remove-timeranges-from-blocks" variable nil nil [74662 74881])
            ("org-agenda-default-appointment-duration" variable nil nil [74883 75247])
            ("org-agenda-show-inherited-tags" variable (:default-value t) nil [75249 76189])
            ("org-agenda-use-tag-inheritance" variable (:default-value (quote (todo search timeline agenda))) nil [76191 77160])
            ("org-agenda-hide-tags-regexp" variable nil nil [77162 77561])
            ("org-agenda-remove-tags" variable nil nil [77563 77945])
            ("org-defvaralias" code nil nil [77947 78029])
            ("org-agenda-tags-column" variable (:default-value (if (featurep (quote xemacs)) -79 -80)) nil [78031 78390])
            ("org-defvaralias" code nil nil [78392 78466])
            ("org-agenda-fontify-priorities" variable (:default-value (quote cookies)) nil [78468 79552])
            ("org-agenda-day-face-function" variable nil nil [79554 79921])
            ("org-agenda-category-icon-alist" variable nil nil [79923 81217])
            ("org-agenda-column-view" customgroup (:user-visible-flag t) nil [81219 81359])
            ("org-agenda-columns-show-summaries" variable (:default-value t) nil [81361 81533])
            ("org-agenda-columns-compute-summary-properties" variable (:default-value t) nil [81535 82058])
            ("org-agenda-columns-add-appointments-to-effort-sum" variable nil nil [82060 82557])
            ("org-agenda-auto-exclude-function" variable nil nil [82559 83156])
            ("org-agenda-bulk-custom-functions" variable nil nil [83158 83605])
            ("org-agenda-with-point-at-orig-entry" function (:arguments ("string" "body")) nil [83607 84157])
            ("def-edebug-spec" code nil nil [84158 84223])
            ("org-add-agenda-custom-command" function (:arguments ("entry")) nil [84225 84627])
            ("org-agenda-mode-map" variable (:default-value (make-sparse-keymap)) nil [84661 84744])
            ("org-defvaralias" code nil nil [84745 84802])
            ("org-agenda-menu" variable nil nil [84804 84828])
            ("org-agenda-restrict" variable nil nil [84859 84891])
            ("org-agenda-follow-mode" variable nil nil [84922 84957])
            ("org-agenda-entry-text-mode" variable nil nil [84958 84997])
            ("org-agenda-clockreport-mode" variable nil nil [84998 85038])
            ("org-agenda-show-log" variable nil nil [85039 85071])
            ("org-agenda-redo-command" variable nil nil [85072 85108])
            ("org-agenda-query-string" variable nil nil [85109 85145])
            ("org-agenda-mode-hook" variable nil nil [85146 85285])
            ("org-agenda-type" variable nil nil [85286 85314])
            ("org-agenda-force-single-file" variable nil nil [85315 85356])
            ("org-agenda-bulk-marked-entries" variable nil nil [85357 85464])
            ("org-agenda-sticky" variable nil nil [85503 85778])
            ("org-toggle-sticky-agenda" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [85797 86419])
            ("org-agenda-buffer" variable nil nil [86421 86496])
            ("org-agenda-last-prefix-arg" variable nil nil [86498 86537])
            ("org-agenda-this-buffer-name" variable nil nil [86538 86578])
            ("org-agenda-doing-sticky-redo" variable nil nil [86579 86620])
            ("org-agenda-this-buffer-is-sticky" variable nil nil [86621 86666])
            ("org-agenda-local-vars" variable
               (:constant-flag t
                :default-value (quote (org-agenda-this-buffer-name org-agenda-undo-list org-agenda-pending-undo-list org-agenda-follow-mode org-agenda-entry-text-mode org-agenda-clockreport-mode org-agenda-show-log org-agenda-redo-command org-agenda-query-string org-agenda-type org-agenda-bulk-marked-entries org-agenda-undo-has-started-in org-agenda-info org-agenda-pre-window-conf org-agenda-columns-active org-agenda-tag-filter-overlays org-agenda-tag-filter org-agenda-cat-filter-overlays org-agenda-category-filter org-agenda-re-filter-overlays org-agenda-regexp-filter org-agenda-markers org-agenda-last-search-view-search-was-boolean org-agenda-filtered-by-category org-agenda-filter-form org-agenda-cycle-counter org-agenda-last-prefix-arg)))
                nil [86668 87597])
            ("org-agenda-mode" function (:user-visible-flag t) nil [87599 90272])
            ("substitute-key-definition" code nil nil [90274 90361])
            ("org-defkey" code nil nil [90362 90422])
            ("org-defkey" code nil nil [90423 90483])
            ("org-defkey" code nil nil [90484 90549])
            ("org-defkey" code nil nil [90550 90610])
            ("org-defkey" code nil nil [90611 90673])
            ("org-defkey" code nil nil [90674 90750])
            ("org-defkey" code nil nil [90751 90826])
            ("org-defkey" code nil nil [90827 90892])
            ("org-defkey" code nil nil [90893 90960])
            ("org-defkey" code nil nil [90961 91030])
            ("org-defkey" code nil nil [91031 91102])
            ("org-defkey" code nil nil [91103 91176])
            ("org-defkey" code nil nil [91177 91249])
            ("org-defkey" code nil nil [91250 91317])
            ("org-defkey" code nil nil [91318 91389])
            ("org-defkey" code nil nil [91390 91457])
            ("org-defkey" code nil nil [91458 91521])
            ("org-defkey" code nil nil [91522 91591])
            ("org-defkey" code nil nil [91592 91648])
            ("org-defkey" code nil nil [91649 91724])
            ("org-defkey" code nil nil [91725 91803])
            ("org-defkey" code nil nil [91804 91890])
            ("org-defkey" code nil nil [91891 91958])
            ("org-defkey" code nil nil [91959 92026])
            ("org-defkey" code nil nil [92027 92090])
            ("org-defkey" code nil nil [92091 92156])
            ("org-defkey" code nil nil [92157 92231])
            ("org-defkey" code nil nil [92232 92305])
            ("org-defkey" code nil nil [92306 92372])
            ("org-defkey" code nil nil [92373 92454])
            ("org-defkey" code nil nil [92455 92540])
            ("org-defkey" code nil nil [92541 92621])
            ("org-defkey" code nil nil [92622 92687])
            ("org-defkey" code nil nil [92688 92752])
            ("org-defkey" code nil nil [92753 92813])
            ("org-defkey" code nil nil [92814 92874])
            ("org-defkey" code nil nil [92875 92964])
            ("org-defkey" code nil nil [92965 93029])
            ("org-defkey" code nil nil [93030 93094])
            ("org-defkey" code nil nil [93095 93161])
            ("org-defkey" code nil nil [93162 93227])
            ("org-defkey" code nil nil [93228 93292])
            ("org-defkey" code nil nil [93293 93358])
            ("org-defkey" code nil nil [93359 93424])
            ("org-defkey" code nil nil [93425 93489])
            ("org-defkey" code nil nil [93490 93554])
            ("org-defkey" code nil nil [93555 93629])
            ("org-defkey" code nil nil [93630 93705])
            ("org-defkey" code nil nil [93706 93786])
            ("org-defkey" code nil nil [93787 93868])
            ("org-defkey" code nil nil [93870 93930])
            ("org-defkey" code nil nil [93931 93995])
            ("org-defkey" code nil nil [93996 94060])
            ("let" code nil nil [94061 94189])
            ("org-defkey" code nil nil [94191 94251])
            ("org-defkey" code nil nil [94252 94317])
            ("org-defkey" code nil nil [94318 94382])
            ("org-defkey" code nil nil [94383 94440])
            ("org-defkey" code nil nil [94441 94508])
            ("org-defkey" code nil nil [94509 94570])
            ("org-defkey" code nil nil [94571 94636])
            ("org-defkey" code nil nil [94637 94702])
            ("org-defkey" code nil nil [94703 94756])
            ("org-defkey" code nil nil [94757 94839])
            ("org-defkey" code nil nil [94840 94899])
            ("org-defkey" code nil nil [94900 94967])
            ("org-defkey" code nil nil [94968 95054])
            ("org-defkey" code nil nil [95055 95124])
            ("org-defkey" code nil nil [95125 95178])
            ("org-defkey" code nil nil [95179 95232])
            ("org-defkey" code nil nil [95233 95286])
            ("org-defkey" code nil nil [95287 95348])
            ("org-defkey" code nil nil [95349 95418])
            ("org-defkey" code nil nil [95419 95481])
            ("org-defkey" code nil nil [95482 95540])
            ("org-defkey" code nil nil [95541 95599])
            ("org-defkey" code nil nil [95600 95662])
            ("org-defkey" code nil nil [95663 95721])
            ("org-defkey" code nil nil [95722 95784])
            ("substitute-key-definition" code nil nil [95785 95882])
            ("substitute-key-definition" code nil nil [95883 95988])
            ("org-defkey" code nil nil [95989 96044])
            ("org-defkey" code nil nil [96045 96115])
            ("org-defkey" code nil nil [96116 96190])
            ("org-defkey" code nil nil [96191 96252])
            ("org-defkey" code nil nil [96253 96310])
            ("org-defkey" code nil nil [96311 96371])
            ("org-defkey" code nil nil [96372 96434])
            ("org-defkey" code nil nil [96435 96496])
            ("org-defkey" code nil nil [96497 96560])
            ("org-defkey" code nil nil [96561 96624])
            ("org-defkey" code nil nil [96625 96682])
            ("org-defkey" code nil nil [96683 96740])
            ("org-defkey" code nil nil [96741 96809])
            ("org-defkey" code nil nil [96810 96867])
            ("org-defkey" code nil nil [96868 96937])
            ("org-defkey" code nil nil [96938 96996])
            ("org-defkey" code nil nil [96997 97069])
            ("org-defkey" code nil nil [97070 97131])
            ("org-defkey" code nil nil [97132 97195])
            ("org-defkey" code nil nil [97196 97255])
            ("org-defkey" code nil nil [97256 97316])
            ("org-defkey" code nil nil [97317 97379])
            ("org-defkey" code nil nil [97380 97449])
            ("org-defkey" code nil nil [97450 97523])
            ("org-defkey" code nil nil [97524 97599])
            ("org-defkey" code nil nil [97600 97679])
            ("org-defkey" code nil nil [97680 97734])
            ("org-defkey" code nil nil [97735 97791])
            ("org-defkey" code nil nil [97792 97859])
            ("org-defkey" code nil nil [97860 97940])
            ("org-defkey" code nil nil [97942 98011])
            ("org-defkey" code nil nil [98012 98086])
            ("org-defkey" code nil nil [98087 98159])
            ("org-defkey" code nil nil [98160 98237])
            ("org-defkey" code nil nil [98238 98300])
            ("org-defkey" code nil nil [98301 98366])
            ("org-defkey" code nil nil [98367 98433])
            ("org-defkey" code nil nil [98434 98504])
            ("org-defkey" code nil nil [98505 98573])
            ("org-defkey" code nil nil [98574 98641])
            ("org-defkey" code nil nil [98642 98713])
            ("org-defkey" code nil nil [98714 98771])
            ("define-key" code nil nil [98772 98843])
            ("org-defkey" code nil nil [98844 98912])
            ("org-defkey" code nil nil [98913 98981])
            ("org-defkey" code nil nil [98983 99048])
            ("org-defkey" code nil nil [99049 99114])
            ("when" code nil nil [99115 99214])
            ("easy-menu-define" code nil nil [99215 106302])
            ("org-agenda-allow-remote-undo" variable (:default-value t) nil [106321 106420])
            ("org-agenda-undo-has-started-in" variable nil nil [106421 106542])
            ("org-agenda-undo" function (:user-visible-flag t) nil [106544 107863])
            ("org-verify-change-for-undo" function (:arguments ("l1" "l2")) nil [107865 108109])
            ("org-agenda-restrict-begin" variable (:default-value (make-marker)) nil [108132 108180])
            ("org-agenda-restrict-end" variable (:default-value (make-marker)) nil [108181 108227])
            ("org-agenda-last-dispatch-buffer" variable nil nil [108228 108272])
            ("org-agenda-overriding-restriction" variable nil nil [108273 108319])
            ("org-agenda-custom-commands-contexts" variable nil nil [108321 110103])
            ("org-agenda-max-entries" variable nil nil [110105 110693])
            ("org-agenda-max-todos" variable nil nil [110695 111279])
            ("org-agenda-max-tags" variable nil nil [111281 111873])
            ("org-agenda-max-effort" variable nil nil [111875 112495])
            ("org-keys" variable nil nil [112497 112518])
            ("org-match" variable nil nil [112519 112541])
            ("org-agenda" function
               (:user-visible-flag t
                :arguments ("arg" "org-keys" "restriction"))
                nil [112557 120712])
            ("org-agenda-append-agenda" function (:user-visible-flag t) nil [120714 121196])
            ("org-agenda-normalize-custom-commands" function (:arguments ("cmds")) nil [121198 121487])
            ("org-agenda-get-restriction-and-command" function (:arguments ("prefix-descriptions")) nil [121489 128107])
            ("org-agenda-fit-window-to-buffer" function nil nil [128109 128463])
            ("org-cmd" variable nil nil [128465 128485])
            ("org-agenda-overriding-cmd" variable nil nil [128486 128524])
            ("org-agenda-overriding-arguments" variable nil nil [128525 128569])
            ("org-agenda-overriding-cmd-arguments" variable nil nil [128570 128618])
            ("org-agenda-run-series" function (:arguments ("name" "series")) nil [128619 130656])
            ("org-batch-agenda" function (:arguments ("cmd-key" "parameters")) nil [130673 131337])
            ("org-agenda-info" variable nil nil [131339 131367])
            ("org-batch-agenda-csv" function (:arguments ("cmd-key" "parameters")) nil [131384 133834])
            ("org-fix-agenda-info" function (:arguments ("props")) nil [133836 135249])
            ("org-agenda-export-csv-mapper" function (:arguments ("prop")) nil [135251 135540])
            ("org-store-agenda-views" function
               (:user-visible-flag t
                :arguments ("parameters"))
                nil [135557 135692])
            ("org-batch-store-agenda-views" function (:arguments ("parameters")) nil [135709 137000])
            ("org-agenda-current-span" variable nil nil [137002 137084])
            ("org-agenda-mark-header-line" function (:arguments ("pos")) nil [137123 137498])
            ("org-mobile-creating-agendas" variable nil nil [137500 137536])
            ("org-agenda-write-buffer-name" variable (:default-value "Agenda View") nil [137564 137615])
            ("org-agenda-write" function
               (:user-visible-flag t
                :arguments ("file" "open" "nosettings" "agenda-bufname"))
                nil [137616 141810])
            ("org-agenda-tag-filter-overlays" variable nil nil [141812 141855])
            ("org-agenda-cat-filter-overlays" variable nil nil [141856 141899])
            ("org-agenda-re-filter-overlays" variable nil nil [141900 141942])
            ("org-agenda-mark-filtered-text" function nil nil [141944 142359])
            ("org-agenda-unmark-filtered-text" function nil nil [142361 142546])
            ("org-agenda-remove-marked-text" function (:arguments ("property" "value")) nil [142548 142921])
            ("org-agenda-add-entry-text" function nil nil [142923 143680])
            ("org-agenda-get-some-entry-text" function (:arguments ("marker" "n-lines" "indent" "keep")) nil [143682 146657])
            ("org-check-for-org-mode" function nil nil [146659 146874])
            ("org-agenda-multi" variable nil nil [146909 146938])
            ("org-agenda-pre-window-conf" variable nil nil [146961 147000])
            ("org-agenda-columns-active" variable nil nil [147001 147039])
            ("org-agenda-name" variable nil nil [147040 147068])
            ("org-agenda-tag-filter" variable nil nil [147069 147103])
            ("org-agenda-category-filter" variable nil nil [147104 147143])
            ("org-agenda-regexp-filter" variable nil nil [147144 147181])
            ("org-agenda-top-headline-filter" variable nil nil [147182 147225])
            ("org-agenda-tag-filter-while-redo" variable nil nil [147226 147271])
            ("org-agenda-tag-filter-preset" variable nil nil [147272 147836])
            ("org-agenda-category-filter-preset" variable nil nil [147838 148416])
            ("org-agenda-regexp-filter-preset" variable nil nil [148418 148992])
            ("org-agenda-use-sticky-p" function nil nil [148994 149735])
            ("org-agenda-prepare-window" function (:arguments ("abuf")) nil [149737 150696])
            ("org-agenda-prepare" function (:arguments ("name")) nil [150698 153016])
            ("org-agenda-overriding-columns-format" variable nil nil [153018 153063])
            ("org-agenda-finalize" function nil nil [153087 156164])
            ("org-agenda-mark-clocking-task" function nil nil [156166 156825])
            ("org-agenda-unmark-clocking-task" function nil nil [156827 157050])
            ("org-agenda-fontify-priorities" function (:user-visible-flag t) nil [157052 158232])
            ("org-agenda-dim-blocked-tasks" function
               (:user-visible-flag t
                :arguments ("invisible"))
                nil [158234 159763])
            ("org-agenda-skip-function" variable nil nil [159765 160497])
            ("org-agenda-skip" function nil nil [160499 161225])
            ("org-agenda-skip-eval" function (:arguments ("form")) nil [161227 161676])
            ("org-agenda-markers" variable nil nil [161678 161775])
            ("org-agenda-last-marker-time" variable (:default-value (org-float-time)) nil [161776 161874])
            ("org-agenda-new-marker" function (:arguments ("pos")) nil [161876 162280])
            ("org-agenda-reset-markers" function nil nil [162282 162436])
            ("org-agenda-save-markers-for-cut-and-paste" function (:arguments ("beg" "end")) nil [162438 162809])
            ("org-agenda-entry-text-show-here" function nil nil [162832 163485])
            ("org-agenda-entry-text-show" function (:user-visible-flag t) nil [163487 163790])
            ("org-agenda-entry-text-hide" function nil nil [163792 164053])
            ("org-agenda-get-day-face" function (:arguments ("date")) nil [164055 164440])
            ("org-agenda-only-exact-dates" variable nil nil [164463 164503])
            ("org-timeline" function
               (:user-visible-flag t
                :arguments ("dotodo"))
                nil [164526 168126])
            ("org-get-all-dates" function (:arguments ("beg" "end" "no-ranges" "force-today" "inactive" "empty" "pre-re")) nil [168128 169965])
            ("org-agenda-start-day" variable nil nil [169992 170331])
            ("org-starting-day" variable nil nil [170332 170361])
            ("org-arg-loc" variable nil nil [170400 170424])
            ("org-agenda-buffer-tmp-name" variable nil nil [170443 170482])
            ("org-agenda-list" function
               (:user-visible-flag t
                :arguments ("arg" "start-day" "span" "with-hour"))
                nil [170498 178720])
            ("org-agenda-ndays-to-span" function (:arguments ("n")) nil [178722 178892])
            ("org-agenda-span-to-ndays" function (:arguments ("span" "start-day")) nil [178894 179395])
            ("org-agenda-span-name" function (:arguments ("span")) nil [179397 179571])
            ("org-agenda-search-history" variable nil nil [179597 179635])
            ("org-search-syntax-table" variable nil nil [179637 179860])
            ("org-mode-syntax-table" variable nil nil [179862 179892])
            ("org-search-syntax-table" function nil nil [179907 180193])
            ("org-agenda-last-search-view-search-was-boolean" variable nil nil [180195 180254])
            ("org-search-view" function
               (:user-visible-flag t
                :arguments ("todo-only" "string" "edit-at"))
                nil [180271 191510])
            ("org-agenda-propertize-selected-todo-keywords" function (:arguments ("keywords")) nil [191534 191911])
            ("org-select-this-todo-keyword" variable nil nil [191913 191954])
            ("org-last-arg" variable nil nil [191955 191980])
            ("org-todo-list" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [191997 195301])
            ("org-tags-view" function
               (:user-visible-flag t
                :arguments ("todo-only" "match"))
                nil [195341 198756])
            ("org-agenda-skip-regexp" variable nil nil [198793 199030])
            ("org-agenda-overriding-header" variable nil nil [199032 199246])
            ("org-agenda-skip-entry-when-regexp-matches" function nil nil [199248 199779])
            ("org-agenda-skip-subtree-when-regexp-matches" function nil nil [199781 200277])
            ("org-agenda-skip-entry-when-regexp-matches-in-subtree" function nil nil [200279 200983])
            ("org-agenda-skip-entry-if" function (:arguments ("conditions")) nil [200985 201157])
            ("org-agenda-skip-subtree-if" function (:arguments ("conditions")) nil [201159 201331])
            ("org-agenda-skip-if" function (:arguments ("subtree" "conditions")) nil [201333 204281])
            ("org-agenda-skip-if-todo" function (:arguments ("args" "end")) nil [204283 205721])
            ("org-agenda-list-stuck-projects" function
               (:user-visible-flag t
                :arguments ("ignore"))
                nil [205738 207515])
            ("org-disable-agenda-to-diary" variable nil nil [207540 207580])
            ("diary-list-entries-hook" variable nil nil [207617 207649])
            ("diary-time-regexp" variable nil nil [207650 207676])
            ("org-get-entries-from-diary" function (:arguments ("date")) nil [207677 209637])
            ("org-agenda-cleanup-fancy-diary-hook" variable nil nil [209639 209743])
            ("org-agenda-cleanup-fancy-diary" function nil nil [209745 210619])
            ("eval-after-load" code nil nil [210689 211176])
            ("org-modify-diary-entry-string" function (:arguments ("string")) nil [211178 211573])
            ("org-diary-default-entry" function nil nil [211575 211973])
            ("org-add-to-diary-list" function (:arguments ("args")) nil [211975 212127])
            ("org-diary-last-run-time" variable nil nil [212129 212165])
            ("org-diary" function (:arguments ("args")) nil [212182 214552])
            ("org-agenda-get-day-entries" function (:arguments ("file" "date" "args")) nil [214580 217036])
            ("org-em" function (:arguments ("x" "y" "list")) nil [217038 217133])
            ("org-heading-keyword-regexp-format" variable nil nil [217135 217177])
            ("org-agenda-sorting-strategy-selected" variable nil nil [217198 217247])
            ("org-agenda-get-todos" function nil nil [217249 221203])
            ("org-agenda-todo-custom-ignore-p" function (:arguments ("time" "n")) nil [221205 221633])
            ("org-agenda-check-for-timestamp-as-reason-to-ignore-todo-item" function (:arguments ("end")) nil [221635 224622])
            ("org-agenda-get-timestamps" function (:arguments ("deadline-results")) nil [224624 229431])
            ("org-agenda-get-sexps" function nil nil [229433 231727])
            ("org-anniversary" function (:arguments ("year" "month" "day" "mark")) nil [232021 232283])
            ("org-cyclic" function (:arguments ("N" "year" "month" "day" "mark")) nil [232284 232535])
            ("org-block" function (:arguments ("Y1" "M1" "D1" "Y2" "M2" "D2" "mark")) nil [232536 232786])
            ("org-date" function (:arguments ("year" "month" "day" "mark")) nil [232787 233028])
            ("org-class" function (:arguments ("y1" "m1" "d1" "y2" "m2" "d2" "dayname" "skip-weeks")) nil [233065 234166])
            ("org-diary-class" function (:arguments ("m1" "d1" "y1" "m2" "d2" "y2" "dayname" "skip-weeks")) nil [234168 235059])
            ("make-obsolete" code nil nil [235060 235106])
            ("org-agenda-show-log-scoped" variable nil nil [235108 235143])
            ("defalias" code nil nil [235204 235255])
            ("org-agenda-get-progress" function nil nil [235256 239554])
            ("org-agenda-show-clocking-issues" function (:user-visible-flag t) nil [239556 242761])
            ("org-agenda-check-clock-gap" function (:arguments ("t1" "t2" "ok-list")) nil [242763 243996])
            ("org-agenda-get-deadlines" function (:arguments ("with-hour")) nil [243998 249284])
            ("org-agenda-deadline-face" function (:arguments ("fraction")) nil [249286 249592])
            ("org-agenda-get-scheduled" function (:arguments ("deadline-results" "with-hour")) nil [249594 256352])
            ("org-agenda-get-blocks" function nil nil [256354 259576])
            ("org-prefix-has-time" variable nil nil [259615 259761])
            ("org-prefix-has-tag" variable nil nil [259762 259907])
            ("org-prefix-has-effort" variable nil nil [259908 260056])
            ("org-prefix-has-breadcrumbs" variable nil nil [260057 260210])
            ("org-prefix-category-length" variable nil nil [260211 260328])
            ("org-prefix-category-max-length" variable nil nil [260329 260450])
            ("org-agenda-get-category-icon" function (:arguments ("category")) nil [260452 260783])
            ("org-agenda-format-item" function (:arguments ("extra" "txt" "level" "category" "tags" "dotime" "remove-re" "habitp")) nil [260785 268154])
            ("org-agenda-fix-displayed-tags" function (:arguments ("txt" "tags" "add-inherited" "hide-re")) nil [268156 269156])
            ("org-downcase-keep-props" function (:arguments ("s")) nil [269158 269315])
            ("org-agenda-sorting-strategy" variable nil nil [269317 269353])
            ("org-agenda-add-time-grid-maybe" function (:arguments ("list" "ndays" "todayp")) nil [269391 271091])
            ("org-compile-prefix-format" function (:arguments ("key")) nil [271093 273636])
            ("org-set-sorting-strategy" function (:arguments ("key")) nil [273638 274032])
            ("org-get-time-of-day" function (:arguments ("s" "string" "mod24")) nil [274034 275201])
            ("org-agenda-before-sorting-filter-function" variable nil nil [275203 276146])
            ("org-agenda-finalize-entries" function (:arguments ("list" "type")) nil [276148 277525])
            ("org-agenda-limit-entries" function (:arguments ("list" "prop" "limit" "fn")) nil [277527 277998])
            ("org-agenda-limit-interactively" function (:user-visible-flag t) nil [278000 278615])
            ("org-agenda-highlight-todo" function (:arguments ("x")) nil [278617 280418])
            ("org-cmp-priority" function (:arguments ("a" "b")) nil [280420 280646])
            ("org-cmp-effort" function (:arguments ("a" "b")) nil [280648 280948])
            ("org-cmp-category" function (:arguments ("a" "b")) nil [280950 281226])
            ("org-cmp-todo-state" function (:arguments ("a" "b")) nil [281228 282109])
            ("org-cmp-alpha" function (:arguments ("a" "b")) nil [282111 282929])
            ("org-cmp-tag" function (:arguments ("a" "b")) nil [282931 283226])
            ("org-cmp-time" function (:arguments ("a" "b")) nil [283228 283523])
            ("org-cmp-ts" function (:arguments ("a" "b" "type")) nil [283525 284166])
            ("org-cmp-habit-p" function (:arguments ("a" "b")) nil [284168 284403])
            ("org-entries-lessp" function (:arguments ("a" "b")) nil [284405 287148])
            ("org-agenda-restriction-lock-overlay" variable (:default-value (make-overlay 1 1)) nil [287179 287316])
            ("overlay-put" code nil nil [287317 287407])
            ("overlay-put" code nil nil [287408 287523])
            ("org-detach-overlay" code nil nil [287524 287580])
            ("org-agenda-set-restriction-lock" function
               (:user-visible-flag t
                :arguments ("type"))
                nil [287582 289169])
            ("org-agenda-remove-restriction-lock" function
               (:user-visible-flag t
                :arguments ("noupdate"))
                nil [289171 289746])
            ("org-agenda-maybe-redo" function nil nil [289748 290198])
            ("org-agenda-check-type" function (:arguments ("error" "types")) nil [290221 290647])
            ("org-agenda-Quit" function (:user-visible-flag t) nil [290649 291635])
            ("org-agenda-quit" function (:user-visible-flag t) nil [291637 292717])
            ("org-agenda-exit" function (:user-visible-flag t) nil [292719 293041])
            ("org-agenda-kill-all-agenda-buffers" function (:user-visible-flag t) nil [293043 293411])
            ("org-agenda-execute" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [293413 293683])
            ("org-agenda-redo" function
               (:user-visible-flag t
                :arguments ("all"))
                nil [293685 296359])
            ("org-global-tags-completion-table" variable nil nil [296361 296406])
            ("org-agenda-filter-form" variable nil nil [296407 296442])
            ("org-agenda-filtered-by-category" variable nil nil [296443 296487])
            ("org-agenda-filter-by-category" function
               (:user-visible-flag t
                :arguments ("strip"))
                nil [296489 297189])
            ("org-find-top-headline" function (:arguments ("pos")) nil [297191 297560])
            ("org-agenda-filtered-by-top-headline" variable nil nil [297562 297610])
            ("org-agenda-filter-by-top-headline" function
               (:user-visible-flag t
                :arguments ("strip"))
                nil [297611 298183])
            ("org-agenda-regexp-filter" variable nil nil [298185 298222])
            ("org-agenda-filter-by-regexp" function
               (:user-visible-flag t
                :arguments ("strip"))
                nil [298223 298963])
            ("org-agenda-filter-remove-all" function (:user-visible-flag t) nil [298965 299286])
            ("org-agenda-filter-by-tag" function
               (:user-visible-flag t
                :arguments ("strip" "char" "narrow"))
                nil [299288 303361])
            ("org-agenda-get-represented-tags" function nil nil [303363 303712])
            ("org-agenda-filter-by-tag-refine" function
               (:user-visible-flag t
                :arguments ("strip" "char"))
                nil [303714 303908])
            ("org-agenda-filter-make-matcher" function (:arguments ("filter" "type")) nil [303910 305716])
            ("org-agenda-filter-effort-form" function (:arguments ("e")) nil [305718 306152])
            ("org-agenda-compare-effort" function (:arguments ("op" "value")) nil [306154 306491])
            ("org-agenda-filter-expand-tags" function (:arguments ("filter" "no-operator")) nil [306493 307087])
            ("org-agenda-filter-apply" function (:arguments ("filter" "type")) nil [307089 308298])
            ("org-agenda-filter-top-headline-apply" function (:arguments ("hl" "negative")) nil [308300 308969])
            ("org-agenda-filter-hide-line" function (:arguments ("type")) nil [308971 309425])
            ("org-agenda-fix-tags-filter-overlays-at" function (:arguments ("pos")) nil [309427 309778])
            ("org-agenda-filter-show-all-tag" function nil nil [309780 310061])
            ("org-agenda-filter-show-all-re" function nil nil [310063 310347])
            ("org-agenda-filter-show-all-cat" function nil nil [310349 310677])
            ("org-agenda-manipulate-query-add" function (:user-visible-flag t) nil [310679 310924])
            ("org-agenda-manipulate-query-subtract" function (:user-visible-flag t) nil [310925 311175])
            ("org-agenda-manipulate-query-add-re" function (:user-visible-flag t) nil [311176 311423])
            ("org-agenda-manipulate-query-subtract-re" function (:user-visible-flag t) nil [311424 311676])
            ("org-agenda-manipulate-query" function (:arguments ("char")) nil [311677 312670])
            ("org-add-to-string" function (:arguments ("var" "string")) nil [312672 312757])
            ("org-agenda-goto-date" function
               (:user-visible-flag t
                :arguments ("span"))
                nil [312759 314022])
            ("org-agenda-goto-today" function (:user-visible-flag t) nil [314024 314701])
            ("org-agenda-find-same-or-today-or-agenda" function (:arguments ("cnt")) nil [314703 315133])
            ("org-agenda-goto-block-beginning" function (:user-visible-flag t) nil [315135 315831])
            ("org-agenda-later" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [315833 317327])
            ("org-agenda-earlier" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [317329 317518])
            ("org-agenda-view-mode-dispatch" function (:user-visible-flag t) nil [317520 319073])
            ("org-agenda-reset-view" function (:user-visible-flag t) nil [319075 319232])
            ("org-agenda-day-view" function
               (:user-visible-flag t
                :arguments ("day-of-month"))
                nil [319233 319453])
            ("org-agenda-week-view" function
               (:user-visible-flag t
                :arguments ("iso-week"))
                nil [319454 319886])
            ("org-agenda-month-view" function
               (:user-visible-flag t
                :arguments ("month"))
                nil [319887 320081])
            ("org-agenda-year-view" function
               (:user-visible-flag t
                :arguments ("year"))
                nil [320082 320651])
            ("org-agenda-change-time-span" function (:arguments ("span" "n")) nil [320653 321479])
            ("org-agenda-compute-starting-span" function (:arguments ("sd" "span" "n")) nil [321481 322789])
            ("org-agenda-next-date-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [322791 323285])
            ("org-agenda-previous-date-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [323287 323613])
            ("org-hl" variable (:default-value (make-overlay 1 1)) nil [323643 323677])
            ("overlay-put" code nil nil [323678 323715])
            ("org-highlight" function (:arguments ("begin" "end" "buffer")) nil [323717 323867])
            ("org-unhighlight" function nil nil [323869 323951])
            ("org-unhighlight-once" function nil nil [323953 324137])
            ("org-agenda-pre-follow-window-conf" variable nil nil [324139 324185])
            ("org-agenda-follow-mode" function (:user-visible-flag t) nil [324186 324689])
            ("org-agenda-entry-text-mode" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [324691 325579])
            ("org-agenda-clockreport-mode" function
               (:user-visible-flag t
                :arguments ("with-filter"))
                nil [325581 326107])
            ("org-agenda-log-mode" function
               (:user-visible-flag t
                :arguments ("special"))
                nil [326109 326795])
            ("org-agenda-archives-mode" function
               (:user-visible-flag t
                :arguments ("with-files"))
                nil [326797 327496])
            ("org-agenda-toggle-diary" function (:user-visible-flag t) nil [327498 327831])
            ("org-agenda-toggle-deadlines" function (:user-visible-flag t) nil [327833 328207])
            ("org-agenda-toggle-time-grid" function (:user-visible-flag t) nil [328209 328534])
            ("org-agenda-set-mode-name" function nil nil [328536 330885])
            ("define-obsolete-function-alias" code nil nil [330887 330989])
            ("org-agenda-update-agenda-type" function nil nil [330991 331227])
            ("org-agenda-next-line" function (:user-visible-flag t) nil [331229 331412])
            ("org-agenda-previous-line" function (:user-visible-flag t) nil [331414 331609])
            ("org-agenda-next-item" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [331611 331970])
            ("org-agenda-previous-item" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [331972 332325])
            ("org-agenda-do-context-action" function nil nil [332327 332750])
            ("org-agenda-show-tags" function (:user-visible-flag t) nil [332752 333037])
            ("org-agenda-goto" function
               (:user-visible-flag t
                :arguments ("highlight"))
                nil [333039 333803])
            ("org-agenda-after-show-hook" variable nil nil [333805 333960])
            ("org-agenda-kill" function (:user-visible-flag t) nil [333962 335310])
            ("org-archive-default-command" variable nil nil [335312 335348])
            ("org-agenda-archive-default" function (:user-visible-flag t) nil [335377 335583])
            ("org-agenda-archive-default-with-confirmation" function (:user-visible-flag t) nil [335585 335818])
            ("org-agenda-archive" function (:user-visible-flag t) nil [335820 335986])
            ("org-agenda-archive-to-archive-sibling" function (:user-visible-flag t) nil [335988 336155])
            ("org-agenda-archive-with" function
               (:user-visible-flag t
                :arguments ("cmd" "confirm"))
                nil [336157 336951])
            ("org-remove-subtree-entries-from-agenda" function (:arguments ("buf" "beg" "end")) nil [336953 337851])
            ("org-agenda-refile" function
               (:user-visible-flag t
                :arguments ("goto" "rfloc" "no-update"))
                nil [337853 338952])
            ("org-agenda-open-link" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [338954 340489])
            ("org-agenda-copy-local-variable" function (:arguments ("var")) nil [340491 340787])
            ("org-agenda-switch-to" function
               (:user-visible-flag t
                :arguments ("delete-other-windows"))
                nil [340789 341692])
            ("org-agenda-goto-mouse" function
               (:user-visible-flag t
                :arguments ("ev"))
                nil [341694 341863])
            ("org-agenda-show" function
               (:user-visible-flag t
                :arguments ("full-entry"))
                nil [341865 342252])
            ("org-agenda-show-window" variable nil nil [342254 342289])
            ("org-agenda-show-and-scroll-up" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [342290 343006])
            ("org-agenda-show-scroll-down" function (:user-visible-flag t) nil [343008 343300])
            ("org-agenda-show-1" function
               (:user-visible-flag t
                :arguments ("more"))
                nil [343302 345009])
            ("org-recenter-heading" function (:arguments ("n")) nil [345011 345105])
            ("org-agenda-cycle-counter" variable nil nil [345107 345144])
            ("org-agenda-cycle-show" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [345145 346063])
            ("org-agenda-recenter" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [346065 346296])
            ("org-agenda-show-mouse" function
               (:user-visible-flag t
                :arguments ("ev"))
                nil [346298 346469])
            ("org-agenda-check-no-diary" function nil nil [346471 346636])
            ("org-agenda-error" function nil nil [346638 346710])
            ("org-agenda-tree-to-indirect-buffer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [346712 348000])
            ("org-agenda-do-tree-to-indirect-buffer" function (:arguments ("arg")) nil [348002 348419])
            ("org-last-heading-marker" variable (:default-value (make-marker)) nil [348421 348573])
            ("org-agenda-todo-nextset" function (:user-visible-flag t) nil [348575 348694])
            ("org-agenda-todo-previousset" function (:user-visible-flag t) nil [348696 348827])
            ("org-agenda-todo" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [348829 350342])
            ("org-agenda-add-note" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [350344 350935])
            ("org-agenda-change-all-lines" function (:arguments ("newhead" "hdmarker" "fixface" "just-this")) nil [350937 353430])
            ("org-agenda-align-tags" function (:arguments ("line")) nil [353432 354539])
            ("org-agenda-priority-up" function (:user-visible-flag t) nil [354541 354685])
            ("org-agenda-priority-down" function (:user-visible-flag t) nil [354687 354835])
            ("org-agenda-priority" function
               (:user-visible-flag t
                :arguments ("force-direction"))
                nil [354837 356030])
            ("org-agenda-set-tags" function
               (:user-visible-flag t
                :arguments ("tag" "onoff"))
                nil [356091 357029])
            ("org-agenda-set-property" function (:user-visible-flag t) nil [357031 357655])
            ("org-agenda-set-effort" function (:user-visible-flag t) nil [357657 358388])
            ("org-agenda-toggle-archive-tag" function (:user-visible-flag t) nil [358390 359140])
            ("org-agenda-do-date-later" function (:arguments ("arg")) nil [359142 359690])
            ("org-agenda-do-date-earlier" function (:arguments ("arg")) nil [359692 360252])
            ("org-agenda-date-later" function
               (:user-visible-flag t
                :arguments ("arg" "what"))
                nil [360254 361690])
            ("org-agenda-date-earlier" function
               (:user-visible-flag t
                :arguments ("arg" "what"))
                nil [361692 361859])
            ("org-agenda-date-later-minutes" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [361861 362103])
            ("org-agenda-date-earlier-minutes" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [362105 362351])
            ("org-agenda-date-later-hours" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [362353 362499])
            ("org-agenda-date-earlier-hours" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [362501 362651])
            ("org-agenda-show-new-time" function (:arguments ("marker" "stamp" "prefix")) nil [362653 363760])
            ("org-agenda-date-prompt" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [363762 364620])
            ("org-agenda-schedule" function
               (:user-visible-flag t
                :arguments ("arg" "time"))
                nil [364622 365339])
            ("org-agenda-deadline" function
               (:user-visible-flag t
                :arguments ("arg" "time"))
                nil [365341 365977])
            ("org-agenda-clock-in" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [365979 366750])
            ("org-agenda-clock-out" function (:user-visible-flag t) nil [366752 367451])
            ("org-agenda-clock-cancel" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [367453 367721])
            ("org-agenda-clock-goto" function (:user-visible-flag t) nil [367723 368406])
            ("org-agenda-diary-entry-in-org-file" function nil nil [368408 370321])
            ("org-agenda-insert-diary-strategy" variable (:default-value (quote date-tree)) nil [370323 370707])
            ("org-agenda-insert-diary-extract-time" variable nil nil [370709 370888])
            ("org-agenda-bulk-mark-char" variable (:default-value ">") nil [370890 371045])
            ("org-agenda-add-entry-to-org-agenda-diary-file" function (:arguments ("type" "text" "d1" "d2")) nil [371047 374002])
            ("org-agenda-insert-diary-as-top-level" function (:arguments ("text")) nil [374004 374368])
            ("org-agenda-insert-diary-make-new-entry" function (:arguments ("text")) nil [374370 375153])
            ("org-agenda-diary-entry" function (:user-visible-flag t) nil [375155 377054])
            ("org-agenda-execute-calendar-command" function (:arguments ("cmd")) nil [377056 377909])
            ("org-agenda-phases-of-moon" function (:user-visible-flag t) nil [377911 378104])
            ("org-agenda-holidays" function (:user-visible-flag t) nil [378106 378282])
            ("calendar-longitude" variable nil nil [378284 378311])
            ("calendar-latitude" variable nil nil [378342 378368])
            ("calendar-location-name" variable nil nil [378400 378431])
            ("org-agenda-sunrise-sunset" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [378459 379041])
            ("org-agenda-goto-calendar" function (:user-visible-flag t) nil [379043 379545])
            ("org-calendar-goto-agenda" function (:user-visible-flag t) nil [379562 379856])
            ("org-agenda-convert-date" function nil nil [379858 381232])
            ("org-agenda-bulk-marked-p" function nil nil [381253 381368])
            ("org-agenda-bulk-mark" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [381370 382311])
            ("org-agenda-bulk-mark-all" function (:user-visible-flag t) nil [382313 382452])
            ("org-agenda-bulk-mark-regexp" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [382454 383084])
            ("org-agenda-bulk-unmark" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [383086 383867])
            ("org-agenda-bulk-toggle-all" function (:user-visible-flag t) nil [383869 384127])
            ("org-agenda-bulk-toggle" function (:user-visible-flag t) nil [384129 384316])
            ("org-agenda-bulk-remove-overlays" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [384318 384792])
            ("org-agenda-bulk-unmark-all" function (:user-visible-flag t) nil [384794 385202])
            ("org-agenda-persistent-marks" variable nil nil [385204 385453])
            ("org-agenda-bulk-action" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [385455 391073])
            ("org-agenda-capture" function
               (:user-visible-flag t
                :arguments ("with-time"))
                nil [391075 391516])
            ("org-agenda-drag-line-forward" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [391562 391925])
            ("org-agenda-drag-line-backward" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [391927 392294])
            ("org-agenda-show-the-flagging-note" function (:user-visible-flag t) nil [392316 393474])
            ("org-agenda-remove-flag" function (:arguments ("marker")) nil [393476 393832])
            ("org-agenda-get-any-marker" function (:arguments ("pos")) nil [393834 394011])
            ("appt-time-msg-list" variable nil nil [394040 394067])
            ("org-agenda-to-appt" function
               (:user-visible-flag t
                :arguments ("refresh" "filter" "args"))
                nil [394105 397660])
            ("org-agenda-todayp" function (:arguments ("date")) nil [397662 397897])
            ("org-agenda-todo-yesterday" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [397899 398198])
            ("org-agenda" package nil nil [398200 398221]))          
    :file "org-agenda.el"
    :pointmax 398251
    :fsize 398250
    :lastmodtime '(21005 34665 0 0)
    :unmatched-syntax '((close-paren 1998 . 1999) (symbol 1965 . 1982) (open-paren 1964 . 1965))
    )
   )
  :file "!drive_c!Users!hyphen!.emacs.d!plugins!org-mode!lisp!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2"
  )
