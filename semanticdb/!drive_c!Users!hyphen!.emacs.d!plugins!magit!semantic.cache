;; Object magit/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "magit/"
  :tables (list 
   (semanticdb-table "magit.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("magit-version" variable (:default-value (quote undefined)) nil [2022 2159])
            ("magit-compat" include nil nil [2273 2296])
            ("ansi-color" include nil nil [2298 2319])
            ("cl-lib" include nil nil [2320 2337])
            ("diff-mode" include nil nil [2338 2358])
            ("easymenu" include nil nil [2359 2378])
            ("epa" include nil nil [2379 2393])
            ("grep" include nil nil [2394 2409])
            ("ring" include nil nil [2410 2425])
            ("dired" include nil nil [2448 2464])
            ("ediff" include nil nil [2467 2483])
            ("eshell" include nil nil [2486 2503])
            ("ido" include nil nil [2506 2520])
            ("iswitchb" include nil nil [2523 2542])
            ("package" include nil nil [2545 2569])
            ("view" include nil nil [2572 2587])
            ("declare-function" code nil nil [2590 2629])
            ("declare-function" code nil nil [2630 2674])
            ("declare-function" code nil nil [2675 2724])
            ("declare-function" code nil nil [2725 2768])
            ("declare-function" code nil nil [2769 2818])
            ("declare-function" code nil nil [2819 2868])
            ("declare-function" code nil nil [2869 2928])
            ("declare-function" code nil nil [2929 2985])
            ("declare-function" code nil nil [2986 3031])
            ("declare-function" code nil nil [3032 3080])
            ("declare-function" code nil nil [3081 3129])
            ("declare-function" code nil nil [3130 3164])
            ("magit-custom-options" variable nil nil [3166 3195])
            ("package-alist" variable nil nil [3196 3218])
            ("server-name" variable nil nil [3219 3239])
            ("magit" customgroup (:user-visible-flag t) nil [3271 3358])
            ("magit-set-variable-and-refresh" function (:arguments ("symbol" "value")) nil [3360 3664])
            ("magit-git-executable" variable (:default-value "git") nil [3666 3772])
            ("magit-gitk-executable" variable (:default-value (concat (file-name-directory magit-git-executable) "gitk")) nil [3774 3937])
            ("magit-repo-dirs" variable nil nil [3939 4162])
            ("magit-repo-dirs-depth" variable (:default-value 3) nil [4164 4402])
            ("custom-add-to-group" code nil nil [4404 4469])
            ("magit-set-upstream-on-push" variable nil nil [4471 5142])
            ("magit-refresh-file-buffer-hook" variable (:default-value (quote (magit-revert-buffer))) nil [5144 5720])
            ("magit-save-some-buffers" variable (:default-value t) nil [5722 6098])
            ("magit-save-some-buffers-predicate" variable (:default-value (quote magit-save-buffers-predicate-tree-only)) nil [6100 6532])
            ("magit-default-tracking-name-function" variable (:default-value (quote magit-default-tracking-name-remote-plus-branch)) nil [6534 7066])
            ("magit-commit-mode-show-buttons" variable (:default-value t) nil [7068 7214])
            ("magit-commit-signoff" variable nil nil [7216 7338])
            ("magit-commit-gpgsign" variable nil nil [7340 7438])
            ("magit-commit-no-verify" variable nil nil [7440 7575])
            ("magit-sha1-abbrev-length" variable (:default-value 7) nil [7577 7727])
            ("magit-log-cutoff-length" variable (:default-value 100) nil [7729 7875])
            ("magit-log-infinite-length" variable (:default-value 99999) nil [7877 8026])
            ("magit-log-auto-more" variable nil nil [8028 8258])
            ("magit-log-show-author-date" variable (:default-value t) nil [8260 8393])
            ("magit-log-show-gpg-status" variable nil nil [8395 8536])
            ("magit-status-insert-tags-line" variable nil nil [8538 8774])
            ("magit-status-tags-line-subject" variable (:default-value (quote head)) nil [8776 9810])
            ("magit-status-verbose-untracked" variable (:default-value t) nil [9812 10056])
            ("magit-process-popup-time" variable (:default-value -1) nil [10058 10338])
            ("magit-revert-item-confirm" variable (:default-value t) nil [10340 10465])
            ("magit-remote-ref-format" variable (:default-value (quote branch-then-remote)) nil [10467 11156])
            ("magit-process-connection-type" variable (:default-value (not (eq system-type (quote cygwin)))) nil [11158 11519])
            ("magit-process-yes-or-no-prompt" variable (:default-value " [[(]\\([Yy]\\(?:es\\)?\\)[/|]\\([Nn]o?\\)[])]\\? ?$") nil [11521 11721])
            ("magit-process-password-prompts" variable (:default-value (quote ("^\\(Enter \\)?[Pp]assphrase\\( for key '.*'\\)?: ?$" "^\\(Enter \\)?[Pp]assword\\( for '.*'\\)?: ?$" "^.*'s password: ?$" "^Yubikey for .*: ?$"))) nil [11723 12045])
            ("magit-process-username-prompts" variable (:default-value (quote ("^Username for '.*': ?$"))) nil [12047 12237])
            ("magit-completing-read-function" variable (:default-value (quote magit-builtin-completing-read)) nil [12239 12615])
            ("magit-create-branch-behaviour" variable (:default-value (quote at-head)) nil [12617 13035])
            ("magit-status-buffer-switch-function" variable (:default-value (quote pop-to-buffer)) nil [13037 13382])
            ("magit-restore-window-configuration" variable nil nil [13384 13544])
            ("magit-rewrite-inclusive" variable (:default-value t) nil [13546 14249])
            ("magit-highlight-whitespace" variable (:default-value t) nil [14251 14709])
            ("magit-highlight-trailing-whitespace" variable (:default-value t) nil [14711 14955])
            ("magit-highlight-indentation" variable nil nil [14957 15876])
            ("magit-diff-refine-hunk" variable nil nil [15878 16402])
            ("magit-rigid-key-bindings" variable nil nil [16446 16699])
            ("magit-faces" customgroup (:user-visible-flag t) nil [16713 16829])
            ("magit-header" variable
               (:default-value (quote ((t :inherit header-line)))
                :type "face")
                nil [16831 16992])
            ("magit-section-title" variable
               (:default-value (quote ((t :inherit magit-header)))
                :type "face")
                nil [16994 17105])
            ("magit-branch" variable
               (:default-value (quote ((t :inherit magit-header)))
                :type "face")
                nil [17107 17205])
            ("magit-tag" variable
               (:default-value (quote ((t :inherit magit-header)))
                :type "face")
                nil [17207 17298])
            ("magit-diff-file-header" variable
               (:default-value (quote ((t :inherit diff-file-header)))
                :type "face")
                nil [17300 17426])
            ("magit-diff-hunk-header" variable
               (:default-value (quote ((t :inherit diff-hunk-header)))
                :type "face")
                nil [17428 17554])
            ("magit-diff-add" variable
               (:default-value (quote ((t :inherit diff-added)))
                :type "face")
                nil [17556 17682])
            ("magit-diff-merge-current" variable
               (:default-value (quote ((t :inherit font-lock-preprocessor-face)))
                :type "face")
                nil [17684 17837])
            ("magit-diff-merge-separator" variable
               (:default-value (quote ((t :inherit font-lock-preprocessor-face)))
                :type "face")
                nil [17839 17989])
            ("magit-diff-merge-diff3-separator" variable
               (:default-value (quote ((t :inherit font-lock-preprocessor-face)))
                :type "face")
                nil [17991 18147])
            ("magit-diff-merge-proposed" variable
               (:default-value (quote ((t :inherit font-lock-preprocessor-face)))
                :type "face")
                nil [18149 18304])
            ("magit-diff-none" variable
               (:default-value (quote ((t :inherit diff-context)))
                :type "face")
                nil [18306 18433])
            ("magit-diff-del" variable
               (:default-value (quote ((t :inherit diff-removed)))
                :type "face")
                nil [18435 18565])
            ("magit-log-graph" variable
               (:default-value (quote ((((class color) (background light)) :foreground "grey11") (((class color) (background dark)) :foreground "grey80")))
                :type "face")
                nil [18567 18798])
            ("magit-log-sha1" variable
               (:default-value (quote ((((class color) (background light)) :foreground "firebrick") (((class color) (background dark)) :foreground "tomato")))
                :type "face")
                nil [18800 19032])
            ("magit-log-author" variable
               (:default-value (quote ((((class color) (background light)) :foreground "firebrick") (((class color) (background dark)) :foreground "tomato")))
                :type "face")
                nil [19034 19270])
            ("magit-log-author-date-cutoff" variable
               (:default-value (quote ((t :inherit magit-log-author :bold t)))
                :type "face")
                nil [19272 19429])
            ("magit-log-date" variable
               (:default-value (quote ((t)))
                :type "face")
                nil [19431 19535])
            ("magit-log-message" variable
               (:default-value (quote ((t)))
                :type "face")
                nil [19537 19647])
            ("magit-item-highlight" variable
               (:default-value (quote ((t :bold t)))
                :type "face")
                nil [19649 20149])
            ("magit-item-mark" variable
               (:default-value (quote ((t :inherit secondary-selection)))
                :type "face")
                nil [20151 20275])
            ("magit-log-head-label-bisect-good" variable
               (:default-value (quote ((((class color) (background light)) :box t :background "light green" :foreground "dark olive green") (((class color) (background dark)) :box t :background "light green" :foreground "dark olive green")))
                :type "face")
                nil [20277 20612])
            ("magit-log-head-label-bisect-bad" variable
               (:default-value (quote ((((class color) (background light)) :box t :background "IndianRed1" :foreground "IndianRed4") (((class color) (background dark)) :box t :background "IndianRed1" :foreground "IndianRed4")))
                :type "face")
                nil [20614 20933])
            ("magit-log-head-label-remote" variable
               (:default-value (quote ((((class color) (background light)) :box t :background "Grey85" :foreground "OliveDrab4") (((class color) (background dark)) :box t :background "Grey11" :foreground "DarkSeaGreen2")))
                :type "face")
                nil [20935 21275])
            ("magit-log-head-label-tags" variable
               (:default-value (quote ((((class color) (background light)) :box t :background "LemonChiffon1" :foreground "goldenrod4") (((class color) (background dark)) :box t :background "LemonChiffon1" :foreground "goldenrod4")))
                :type "face")
                nil [21277 21611])
            ("magit-log-head-label-patches" variable
               (:default-value (quote ((((class color) (background light)) :box t :background "IndianRed1" :foreground "IndianRed4") (((class color) (background dark)) :box t :background "IndianRed1" :foreground "IndianRed4")))
                :type "face")
                nil [21613 21933])
            ("magit-whitespace-warning-face" variable
               (:default-value (quote ((t :inherit trailing-whitespace)))
                :type "face")
                nil [21935 22094])
            ("magit-log-head-label-local" variable
               (:default-value (quote ((((class color) (background light)) :box t :background "Grey85" :foreground "LightSkyBlue4") (((class color) (background dark)) :box t :background "Grey13" :foreground "LightSkyBlue1")))
                :type "face")
                nil [22096 22437])
            ("magit-log-head-label-default" variable
               (:default-value (quote ((((class color) (background light)) :box t :background "Grey50") (((class color) (background dark)) :box t :background "Grey50")))
                :type "face")
                nil [22439 22710])
            ("magit-valid-signature" variable
               (:default-value (if (require (quote epa) nil t) (quote ((t :inherit epa-validity-high))) (quote ((t :weight bold :foreground "PaleTurquoise"))))
                :type "face")
                nil [22712 22920])
            ("magit-log-reflog-label-commit" variable
               (:default-value (quote ((((class color) (background light)) :box t :background "LemonChiffon1" :foreground "goldenrod4") (((class color) (background dark)) :box t :background "LemonChiffon1" :foreground "goldenrod4")))
                :type "face")
                nil [22922 23274])
            ("magit-log-reflog-label-amend" variable
               (:default-value (quote ((t :inherit magit-log-reflog-label-commit)))
                :type "face")
                nil [23276 23443])
            ("magit-log-reflog-label-merge" variable
               (:default-value (quote ((t :inherit magit-log-reflog-label-commit)))
                :type "face")
                nil [23445 23612])
            ("magit-log-reflog-label-checkout" variable
               (:default-value (quote ((((class color) (background light)) :box t :background "Grey85" :foreground "LightSkyBlue4") (((class color) (background dark)) :box t :background "Grey13" :foreground "LightSkyBlue1")))
                :type "face")
                nil [23614 23960])
            ("magit-log-reflog-label-reset" variable
               (:default-value (quote ((((class color) (background light)) :box t :background "IndianRed1" :foreground "IndianRed4") (((class color) (background dark)) :box t :background "IndianRed1" :foreground "IndianRed4")))
                :type "face")
                nil [23962 24307])
            ("magit-log-reflog-label-rebase" variable
               (:default-value (quote ((((class color) (background light)) :box t :background "Grey85" :foreground "OliveDrab4") (((class color) (background dark)) :box t :background "Grey11" :foreground "DarkSeaGreen2")))
                :type "face")
                nil [24309 24650])
            ("magit-log-reflog-label-cherry-pick" variable
               (:default-value (quote ((((class color) (background light)) :box t :background "light green" :foreground "dark olive green") (((class color) (background dark)) :box t :background "light green" :foreground "dark olive green")))
                :type "face")
                nil [24652 25015])
            ("magit-log-reflog-label-remote" variable
               (:default-value (quote ((((class color) (background light)) :box t :background "Grey50") (((class color) (background dark)) :box t :background "Grey50")))
                :type "face")
                nil [25017 25295])
            ("magit-log-reflog-label-other" variable
               (:default-value (quote ((((class color) (background light)) :box t :background "Grey50") (((class color) (background dark)) :box t :background "Grey50")))
                :type "face")
                nil [25297 25574])
            ("magit-mode-map" variable (:default-value (let ((map (make-keymap))) (suppress-keymap map t) (define-key map (kbd "n") (quote magit-goto-next-section)) (define-key map (kbd "p") (quote magit-goto-previous-section)) (define-key map (kbd "^") (quote magit-goto-parent-section)) (define-key map (kbd "M-n") (quote magit-goto-next-sibling-section)) (define-key map (kbd "M-p") (quote magit-goto-previous-sibling-section)) (define-key map (kbd "TAB") (quote magit-toggle-section)) (define-key map (kbd "<backtab>") (quote magit-expand-collapse-section)) (define-key map (kbd "1") (quote magit-show-level-1)) (define-key map (kbd "2") (quote magit-show-level-2)) (define-key map (kbd "3") (quote magit-show-level-3)) (define-key map (kbd "4") (quote magit-show-level-4)) (define-key map (kbd "M-1") (quote magit-show-level-1-all)) (define-key map (kbd "M-2") (quote magit-show-level-2-all)) (define-key map (kbd "M-3") (quote magit-show-level-3-all)) (define-key map (kbd "M-4") (quote magit-show-level-4-all)) (define-key map (kbd "M-h") (quote magit-show-only-files)) (define-key map (kbd "M-H") (quote magit-show-only-files-all)) (define-key map (kbd "M-s") (quote magit-show-level-4)) (define-key map (kbd "M-S") (quote magit-show-level-4-all)) (define-key map (kbd "g") (quote magit-refresh)) (define-key map (kbd "G") (quote magit-refresh-all)) (define-key map (kbd "?") (quote magit-describe-item)) (define-key map (kbd ":") (quote magit-git-command)) (define-key map (kbd "C-x 4 a") (quote magit-add-change-log-entry-other-window)) (define-key map (kbd "L") (quote magit-add-change-log-entry-no-option)) (define-key map (kbd "RET") (quote magit-visit-item)) (define-key map (kbd "SPC") (quote magit-show-item-or-scroll-up)) (define-key map (kbd "DEL") (quote magit-show-item-or-scroll-down)) (define-key map (kbd "C-w") (quote magit-copy-item-as-kill)) (define-key map (kbd "R") (quote magit-rebase-step)) (cond (magit-rigid-key-bindings (define-key map (kbd "m") (quote magit-merge)) (define-key map (kbd "b") (quote magit-checkout)) (define-key map (kbd "M") (quote magit-branch-manager)) (define-key map (kbd "r") (quote undefined)) (define-key map (kbd "f") (quote magit-fetch-current)) (define-key map (kbd "F") (quote magit-pull)) (define-key map (kbd "!") (quote magit-shell-command)) (define-key map (kbd "P") (quote magit-push)) (define-key map (kbd "t") (quote magit-tag)) (define-key map (kbd "l") (quote magit-log)) (define-key map (kbd "o") (quote magit-submodule-update)) (define-key map (kbd "B") (quote undefined))) (t (define-key map (kbd "m") (quote magit-key-mode-popup-merging)) (define-key map (kbd "b") (quote magit-key-mode-popup-branching)) (define-key map (kbd "M") (quote magit-key-mode-popup-remoting)) (define-key map (kbd "r") (quote magit-key-mode-popup-rewriting)) (define-key map (kbd "f") (quote magit-key-mode-popup-fetching)) (define-key map (kbd "F") (quote magit-key-mode-popup-pulling)) (define-key map (kbd "!") (quote magit-key-mode-popup-running)) (define-key map (kbd "P") (quote magit-key-mode-popup-pushing)) (define-key map (kbd "t") (quote magit-key-mode-popup-tagging)) (define-key map (kbd "l") (quote magit-key-mode-popup-logging)) (define-key map (kbd "o") (quote magit-key-mode-popup-submodule)) (define-key map (kbd "B") (quote magit-key-mode-popup-bisecting)))) (define-key map (kbd "$") (quote magit-display-process)) (define-key map (kbd "c") (quote magit-log-edit)) (define-key map (kbd "E") (quote magit-interactive-rebase)) (define-key map (kbd "e") (quote magit-ediff)) (define-key map (kbd "w") (quote magit-wazzup)) (define-key map (kbd "y") (quote magit-cherry)) (define-key map (kbd "q") (quote magit-quit-window)) (define-key map (kbd "x") (quote magit-reset-head)) (define-key map (kbd "v") (quote magit-revert-item)) (define-key map (kbd "a") (quote magit-apply-item)) (define-key map (kbd "A") (quote magit-cherry-pick-item)) (define-key map (kbd "d") (quote magit-diff-working-tree)) (define-key map (kbd "D") (quote magit-diff)) (define-key map (kbd "-") (quote magit-diff-smaller-hunks)) (define-key map (kbd "+") (quote magit-diff-larger-hunks)) (define-key map (kbd "0") (quote magit-diff-default-hunks)) (define-key map (kbd "h") (quote magit-toggle-diff-refine-hunk)) (define-key map (kbd "M-g") (quote magit-goto-diffstats)) map)) nil [25591 29855])
            ("magit-commit-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map (kbd "C-c C-b") (quote magit-show-commit-backward)) (define-key map (kbd "C-c C-f") (quote magit-show-commit-forward)) map)) nil [29857 30061])
            ("magit-status-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map (kbd "s") (quote magit-stage-item)) (define-key map (kbd "S") (quote magit-stage-all)) (define-key map (kbd "u") (quote magit-unstage-item)) (define-key map (kbd "U") (quote magit-unstage-all)) (define-key map (kbd "i") (quote magit-ignore-item)) (define-key map (kbd "I") (quote magit-ignore-item-locally)) (define-key map (kbd ".") (quote magit-mark-item)) (define-key map (kbd "=") (quote magit-diff-with-mark)) (define-key map (kbd "k") (quote magit-discard-item)) (define-key map (kbd "C") (quote magit-add-log)) (define-key map (kbd "X") (quote magit-reset-working-tree)) (if magit-rigid-key-bindings (define-key map (kbd "z") (quote magit-stash)) (define-key map (kbd "z") (quote magit-key-mode-popup-stashing))) map)) nil [30063 30845])
            ("eval-after-load" code nil nil [30847 30948])
            ("magit-log-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map (kbd ".") (quote magit-mark-item)) (define-key map (kbd "=") (quote magit-diff-with-mark)) (define-key map (kbd "e") (quote magit-log-show-more-entries)) map)) nil [30950 31183])
            ("magit-wazzup-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map (kbd ".") (quote magit-mark-item)) (define-key map (kbd "=") (quote magit-diff-with-mark)) (define-key map (kbd "i") (quote magit-ignore-item)) map)) nil [31185 31411])
            ("magit-branch-manager-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map (kbd "c") (quote magit-create-branch)) (define-key map (kbd "a") (quote magit-add-remote)) (define-key map (kbd "r") (quote magit-move-item)) (define-key map (kbd "k") (quote magit-discard-item)) (define-key map (kbd "T") (quote magit-change-what-branch-tracks)) map)) nil [31413 31760])
            ("magit-diffstat-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map (kbd "e") (quote magit-diffstat-ediff)) map)) nil [31762 31890])
            ("easy-menu-define" code nil nil [31892 33886])
            ("magit-iswitchb-completing-read" function (:arguments ("prompt" "choices" "predicate" "require-match" "initial-input" "hist" "def")) nil [33933 34437])
            ("magit-ido-completing-read" function (:arguments ("prompt" "choices" "predicate" "require-match" "initial-input" "hist" "def")) nil [34439 34945])
            ("magit-builtin-completing-read" function (:arguments ("prompt" "choices" "predicate" "require-match" "initial-input" "hist" "def")) nil [34947 35568])
            ("magit-completing-read" function (:arguments ("prompt" "collection" "predicate" "require-match" "initial-input" "hist" "def")) nil [35570 35953])
            ("magit-trim-line" function (:arguments ("str")) nil [35987 36149])
            ("magit-split-lines" function (:arguments ("str")) nil [36151 36359])
            ("magit-file-line" function (:arguments ("file")) nil [36361 36635])
            ("magit-file-lines" function (:arguments ("file" "keep-empty-lines")) nil [36637 36988])
            ("magit-put-line-property" function (:arguments ("prop" "val")) nil [36990 37138])
            ("magit-insert-region" function (:arguments ("beg" "end" "buf")) nil [37140 37289])
            ("magit-insert-current-line" function (:arguments ("buf")) nil [37291 37499])
            ("magit-git-standard-options" variable (:default-value (quote ("--no-pager"))) nil [37536 37626])
            ("magit-git-insert" function (:arguments ("args")) nil [37628 37694])
            ("magit-git-output" function (:arguments ("args")) nil [37696 37830])
            ("magit-cmd-insert" function (:arguments ("cmd" "args")) nil [37832 37906])
            ("magit-cmd-output" function (:arguments ("cmd" "args")) nil [37908 38109])
            ("magit-git-string" function (:arguments ("args")) nil [38111 38192])
            ("magit-git-lines" function (:arguments ("args")) nil [38194 38276])
            ("magit-git-exit-code" function (:arguments ("args")) nil [38278 38426])
            ("magit-get" function (:arguments ("keys")) nil [38445 38596])
            ("magit-get-all" function (:arguments ("keys")) nil [38598 38769])
            ("magit-get-boolean" function (:arguments ("keys")) nil [38771 38971])
            ("magit-set" function (:arguments ("val" "keys")) nil [38973 39214])
            ("magit-git-repo-p" function (:arguments ("dir")) nil [39236 39314])
            ("magit-git-dir" function (:arguments ("subdir")) nil [39316 39771])
            ("magit-no-commit-p" function nil nil [39773 39942])
            ("magit-get-top-dir" function (:arguments ("cwd")) nil [39944 40296])
            ("magit-file-relative-name" function (:arguments ("filename")) nil [40298 40914])
            ("magit-get-ref" function (:arguments ("ref")) nil [40916 40988])
            ("magit-get-current-branch" function nil nil [40990 41148])
            ("magit-get-current-tag" function (:arguments ("with-distance-p")) nil [41150 41891])
            ("magit-get-next-tag" function (:arguments ("with-distance-p")) nil [41893 42622])
            ("magit-get-remote" function (:arguments ("branch")) nil [42624 43007])
            ("magit-get-current-remote" function nil nil [43009 43292])
            ("magit-ref-exists-p" function (:arguments ("ref")) nil [43294 43382])
            ("magit-rev-parse" function (:arguments ("ref")) nil [43384 43483])
            ("magit-ref-ambiguous-p" function (:arguments ("ref")) nil [43485 43716])
            ("magit-rev-diff-count" function (:arguments ("a" "b")) nil [43718 44523])
            ("magit-name-rev" function (:arguments ("rev" "no-trim")) nil [44525 45978])
            ("magit-file-uptodate-p" function (:arguments ("file")) nil [45980 46074])
            ("magit-anything-staged-p" function nil nil [46076 46175])
            ("magit-everything-clean-p" function nil nil [46177 46305])
            ("magit-commit-parents" function (:arguments ("commit")) nil [46307 46421])
            ("magit-assert-one-parent" function (:arguments ("commit" "command")) nil [46423 46581])
            ("magit-format-commit" function (:arguments ("commit" "format")) nil [46583 46819])
            ("magit-with-refresh" function (:arguments ("body")) nil [46838 46949])
            ("magit-with-git-editor-setup" function (:arguments ("body")) nil [46951 48505])
            ("defvar-local" code nil nil [48533 48909])
            ("magit-list-interesting-refs" function (:arguments ("uninteresting")) nil [48911 49698])
            ("magit-format-ref" function (:arguments ("ref")) nil [49700 50438])
            ("magit-uninteresting-refs" variable (:default-value (quote ("refs/remotes/\\([^/]+\\)/HEAD$" "refs/stash"))) nil [50440 50524])
            ("magit-read-file-hist" variable nil nil [50526 50559])
            ("magit-read-file-from-rev" function (:arguments ("revision")) nil [50561 51024])
            ("magit-read-rev-history" variable nil nil [51026 51129])
            ("magit-read-rev" function (:arguments ("prompt" "default" "uninteresting" "noselection")) nil [51131 51676])
            ("magit-read-rev-with-default" function (:arguments ("prompt" "no-trim" "uninteresting")) nil [51678 52074])
            ("magit-read-rev-range" function (:arguments ("op" "def-beg" "def-end")) nil [52076 52417])
            ("magit-rev-to-git" function (:arguments ("rev")) nil [52419 52595])
            ("magit-rev-range-to-git" function (:arguments ("range")) nil [52597 52957])
            ("magit-rev-describe" function (:arguments ("rev")) nil [52959 53139])
            ("magit-rev-range-describe" function (:arguments ("range" "things")) nil [53141 53664])
            ("magit-default-rev" function (:arguments ("no-trim")) nil [53666 53946])
            ("magit-commit-at-point" function (:arguments ("noerror")) nil [53948 54281])
            ("magit-read-remote" function (:arguments ("prompt" "def" "require-match")) nil [54283 54796])
            ("magit-read-remote-branch" function (:arguments ("remote" "prompt" "default")) nil [54798 55484])
            ("cl-defstruct" code nil nil [55909 56016])
            ("defvar-local" code nil nil [56042 56121])
            ("put" code nil nil [56122 56165])
            ("magit-old-top-section" variable nil nil [56167 56201])
            ("magit-section-hidden-default" variable nil nil [56203 56244])
            ("magit-show-diffstat" variable (:default-value t) nil [56246 56335])
            ("defvar-local" code nil nil [56337 56386])
            ("put" code nil nil [56387 56443])
            ("magit-define-inserter" function (:arguments ("sym" "arglist" "body")) nil [56468 57113])
            ("magit-new-section" function (:arguments ("title" "type")) nil [57115 58037])
            ("magit-cancel-section" function (:arguments ("section")) nil [58039 58415])
            ("magit-with-section" function (:arguments ("title" "type" "body")) nil [58417 59092])
            ("magit-insert-section" function (:arguments ("section-title-and-type" "buffer-title" "washer" "cmd" "args")) nil [59094 60767])
            ("magit-git-section" function (:arguments ("section-title-and-type" "buffer-title" "washer" "args")) nil [60769 61164])
            ("magit-set-section" function (:arguments ("title" "type" "start" "end")) nil [61166 61469])
            ("magit-set-section-info" function (:arguments ("info" "section")) nil [61471 61592])
            ("magit-set-section-needs-refresh-on-show" function (:arguments ("flag" "section")) nil [61594 61766])
            ("magit-create-buffer-sections" function (:arguments ("body")) nil [61768 62368])
            ("magit-propertize-section" function (:arguments ("section")) nil [62370 62679])
            ("magit-find-section" function (:arguments ("path" "top")) nil [62705 63111])
            ("magit-section-path" function (:arguments ("section")) nil [63113 63343])
            ("magit-find-section-after" function (:arguments ("pos")) nil [63345 63492])
            ("magit-find-section-after*" function (:arguments ("pos" "secs")) nil [63494 63924])
            ("magit-find-section-before" function (:arguments ("pos")) nil [63926 64554])
            ("magit-find-section-before*" function (:arguments ("pos" "secs")) nil [64556 64840])
            ("magit-current-section" function nil nil [64842 64947])
            ("magit-find-section-at" function (:arguments ("pos")) nil [64949 65091])
            ("magit-goto-next-section" function (:user-visible-flag t) nil [65115 65327])
            ("magit-goto-previous-section" function (:user-visible-flag t) nil [65329 65536])
            ("magit-goto-parent-section" function (:user-visible-flag t) nil [65538 65755])
            ("magit-goto-next-sibling-section" function (:user-visible-flag t) nil [65757 66247])
            ("magit-goto-previous-sibling-section" function (:user-visible-flag t) nil [66249 66747])
            ("magit-goto-section" function (:arguments ("section")) nil [66749 67137])
            ("magit-goto-section-at-path" function (:arguments ("path")) nil [67139 67378])
            ("magit-goto-diff-section-at-file" function (:arguments ("file")) nil [67381 67880])
            ("magit-goto-diffstats" function (:user-visible-flag t) nil [67882 68381])
            ("magit-define-section-jumper" function (:arguments ("sym" "title")) nil [68383 68806])
            ("magit-define-section-jumper" code nil nil [68808 68865])
            ("magit-define-section-jumper" code nil nil [68866 68924])
            ("magit-define-section-jumper" code nil nil [68925 68981])
            ("magit-define-section-jumper" code nil nil [68982 69040])
            ("magit-for-all-sections" function (:arguments ("func" "top")) nil [69066 69406])
            ("magit-wash-sequence" function (:arguments ("func")) nil [69408 69603])
            ("magit-section-set-hidden" function (:arguments ("section" "hidden")) nil [69630 70333])
            ("magit-section-any-hidden" function (:arguments ("section")) nil [70335 70647])
            ("magit-section-collapse" function (:arguments ("section")) nil [70649 70860])
            ("magit-section-expand" function (:arguments ("section")) nil [70862 71068])
            ("magit-section-expand-all-aux" function (:arguments ("section")) nil [71070 71286])
            ("magit-section-expand-all" function (:arguments ("section")) nil [71288 71451])
            ("magit-section-hideshow" function (:arguments ("flag-or-func")) nil [71453 71985])
            ("magit-show-section" function (:user-visible-flag t) nil [71987 72089])
            ("magit-hide-section" function (:user-visible-flag t) nil [72091 72191])
            ("magit-collapse-section" function (:user-visible-flag t) nil [72193 72338])
            ("magit-expand-section" function (:user-visible-flag t) nil [72340 72481])
            ("magit-toggle-file-section" function (:user-visible-flag t) nil [72483 72735])
            ("magit-toggle-section" function (:user-visible-flag t) nil [72737 72937])
            ("magit-expand-collapse-section" function (:user-visible-flag t) nil [72939 73236])
            ("magit-cycle-section" function (:user-visible-flag t) nil [73238 73826])
            ("magit-section-lineage" function (:arguments ("section")) nil [73828 74015])
            ("magit-section-show-level" function (:arguments ("section" "level" "threshold" "path")) nil [74017 74418])
            ("magit-show-level" function (:arguments ("level" "all")) nil [74420 74881])
            ("magit-show-only-files" function (:user-visible-flag t) nil [74883 75186])
            ("magit-show-only-files-all" function (:user-visible-flag t) nil [75188 75467])
            ("magit-define-level-shower-1" function (:arguments ("level" "all")) nil [75469 75984])
            ("magit-define-level-shower" function (:arguments ("level")) nil [75986 76238])
            ("magit-define-level-shower" code nil nil [76240 76269])
            ("magit-define-level-shower" code nil nil [76270 76299])
            ("magit-define-level-shower" code nil nil [76300 76329])
            ("magit-define-level-shower" code nil nil [76330 76359])
            ("magit-highlighted-section" variable nil nil [76388 76426])
            ("magit-refine-section" function (:arguments ("section")) nil [76428 77021])
            ("magit-unrefine-section" function (:arguments ("section")) nil [77023 77598])
            ("magit-highlight-overlay" variable nil nil [77600 77636])
            ("magit-highlight-section" function nil nil [77638 78567])
            ("magit-section-context-type" function (:arguments ("section")) nil [78591 78926])
            ("magit-prefix-p" function (:arguments ("l1" "l2")) nil [78928 79451])
            ("magit-section-match" function (:arguments ("condition" "section")) nil [79453 79955])
            ("magit-section-case" function (:arguments ("head" "clauses")) nil [79957 81270])
            ("magit-section-action-success" variable
               (:constant-flag t
                :default-value (make-symbol "magit-section-action-success"))
                nil [81272 81358])
            ("magit-section-action" function (:arguments ("head" "clauses")) nil [81360 82816])
            ("magit-add-action-clauses" function (:arguments ("head" "clauses")) nil [82818 83779])
            ("define-obsolete-function-alias" code nil nil [83781 83867])
            ("magit-define-command" function (:arguments ("sym" "arglist" "body")) nil [83888 85348])
            ("magit-set-mode-line-process" function (:arguments ("str")) nil [85369 85576])
            ("magit-process-indicator-from-command" function (:arguments ("comps")) nil [85578 86012])
            ("magit-process" variable nil nil [86014 86040])
            ("magit-process-client-buffer" variable nil nil [86041 86081])
            ("magit-process-buffer-name" variable (:default-value "*magit-process*") nil [86082 86176])
            ("magit-run*" function (:arguments ("cmd-and-args" "logline" "noerase" "noerror" "nowait" "input")) nil [86178 90873])
            ("magit-process-sentinel" function (:arguments ("process" "event")) nil [90875 92221])
            ("magit-process-filter" function (:arguments ("proc" "string")) nil [92223 93116])
            ("magit-process-yes-or-no-prompt" function (:arguments ("proc" "string")) nil [93118 93689])
            ("magit-process-password-prompt" function (:arguments ("proc" "string")) nil [93691 93973])
            ("magit-process-username-prompt" function (:arguments ("proc" "string")) nil [93975 94393])
            ("magit-process-match-prompt" function (:arguments ("prompts" "string")) nil [94395 94783])
            ("magit-run" function (:arguments ("cmd" "args")) nil [94785 94875])
            ("magit-run-git*" function (:arguments ("subcmd-and-args" "logline" "noerase" "noerror" "nowait" "input")) nil [94877 95183])
            ("magit-run-git" function (:arguments ("args")) nil [95185 95268])
            ("magit-run-git-with-input" function (:arguments ("input" "args")) nil [95270 95392])
            ("magit-run-git-async" function (:arguments ("args")) nil [95394 95552])
            ("magit-run-git-async-with-input" function (:arguments ("input" "args")) nil [95554 95655])
            ("magit-display-process" function (:user-visible-flag t) nil [95657 95888])
            ("magit-mode-hook" variable nil nil [95917 95973])
            ("put" code nil nil [95975 96013])
            ("defvar-local" code nil nil [96015 96056])
            ("put" code nil nil [96057 96105])
            ("defvar-local" code nil nil [96107 96144])
            ("put" code nil nil [96145 96189])
            ("defvar-local" code nil nil [96191 96226])
            ("put" code nil nil [96227 96269])
            ("magit-remember-point" function nil nil [96271 96336])
            ("magit-invisible-region-end" function (:arguments ("pos")) nil [96338 96491])
            ("magit-invisible-region-start" function (:arguments ("pos")) nil [96493 96657])
            ("magit-correct-point-after-command" function nil nil [96659 97354])
            ("magit-mode" function nil nil [97378 98274])
            ("magit-mode-init" function (:arguments ("dir" "submode" "refresh-func" "refresh-args")) nil [98276 98505])
            ("magit-find-buffer" function (:arguments ("submode" "dir")) nil [98525 98925])
            ("magit-find-status-buffer" function (:arguments ("dir")) nil [98927 99020])
            ("magit-for-all-buffers" function (:arguments ("func" "dir")) nil [99022 99288])
            ("magit-refresh-buffer" function (:arguments ("buffer")) nil [99311 100649])
            ("magit-revert-buffer" function nil nil [100651 101260])
            ("magit-update-vc-modeline" function nil nil [101262 102046])
            ("magit-refresh-needing-buffers" variable nil nil [102072 102114])
            ("magit-refresh-pending" variable nil nil [102115 102149])
            ("magit-refresh-wrapper" function (:arguments ("func")) nil [102151 103080])
            ("magit-need-refresh" function (:arguments ("buffer")) nil [103082 103476])
            ("magit-refresh" function (:user-visible-flag t) nil [103478 103703])
            ("magit-refresh-all" function (:user-visible-flag t) nil [103705 103970])
            ("defvar-local" code nil nil [103992 104119])
            ("put" code nil nil [104120 104181])
            ("magit-buffer-switch" function (:arguments ("buf")) nil [104183 104425])
            ("magit-quit-window" function
               (:user-visible-flag t
                :arguments ("kill-buffer"))
                nil [104427 104793])
            ("magit-wash-untracked-file" function nil nil [104816 105129])
            ("magit-wash-untracked-files" function nil nil [105131 105480])
            ("magit-insert-untracked-files" function nil nil [105482 105866])
            ("magit-diff-context-lines" variable (:default-value 3) nil [105889 105924])
            ("magit-diff-U-arg" function nil nil [105926 105996])
            ("magit-diff-smaller-hunks" function
               (:user-visible-flag t
                :arguments ("count"))
                nil [105998 106213])
            ("magit-diff-larger-hunks" function
               (:user-visible-flag t
                :arguments ("count"))
                nil [106215 106421])
            ("magit-diff-default-hunks" function (:user-visible-flag t) nil [106423 106585])
            ("magit-toggle-diff-refine-hunk" function
               (:user-visible-flag t
                :arguments ("other"))
                nil [106587 108004])
            ("magit-diff-line-file" function nil nil [108006 108250])
            ("magit-wash-diffs" function nil nil [108252 108360])
            ("magit-wash-diff-or-other-file" function nil nil [108362 108457])
            ("magit-diffstat-ediff" function nil nil [108459 108628])
            ("magit-wash-diffstat" function (:arguments ("guess")) nil [108630 111037])
            ("magit-wash-diffstats" function nil nil [111039 112048])
            ("magit-wash-diffstats-postwork" function (:arguments ("file" "section")) nil [112050 112588])
            ("magit-diffstat-item-kind" function (:arguments ("diffstat")) nil [112590 112671])
            ("magit-diffstat-item-file" function (:arguments ("diffstat")) nil [112673 112982])
            ("magit-diffstat-item-status" function (:arguments ("diffstat")) nil [112984 113145])
            ("magit-wash-other-file" function nil nil [113147 113510])
            ("magit-hide-diffs" variable nil nil [113512 113541])
            ("magit-indentation-level" variable (:default-value 1) nil [113543 113577])
            ("magit-insert-diff-title" function (:arguments ("status" "file" "file2")) nil [113579 114409])
            ("magit-current-diff-range" variable nil nil [114411 114505])
            ("magit-wash-typechange-section" function (:arguments ("file")) nil [114507 115281])
            ("magit-wash-diff-section" function nil nil [115283 118006])
            ("magit-wash-diff" function nil nil [118008 118290])
            ("magit-diff-item-kind" function (:arguments ("diff")) nil [118292 118361])
            ("magit-diff-item-file" function (:arguments ("diff")) nil [118363 118433])
            ("magit-diff-item-file2" function (:arguments ("diff")) nil [118435 118512])
            ("magit-diff-item-range" function (:arguments ("diff")) nil [118514 118586])
            ("magit-wash-hunk" function nil nil [118588 120553])
            ("magit-highlight-line-whitespace" function nil nil [120555 121832])
            ("magit-looking-at-combined-diff-p" function nil nil [121834 121898])
            ("magit-maybe-diff-refine-hunk" function nil nil [121900 122077])
            ("magit-diff-options" variable nil nil [122079 122110])
            ("magit-insert-diff" function (:arguments ("file" "status")) nil [122112 122906])
            ("magit-last-raw-diff" variable nil nil [122908 122940])
            ("magit-ignore-unmerged-raw-diffs" variable nil nil [122941 122985])
            ("magit-wash-raw-diffs" function nil nil [122987 123102])
            ("magit-wash-raw-diff" function nil nil [123104 124946])
            ("magit-hunk-item-diff" function (:arguments ("hunk")) nil [124948 125133])
            ("magit-diff-item-insert-header" function (:arguments ("diff" "buf")) nil [125135 125533])
            ("magit-insert-diff-item-patch" function (:arguments ("diff" "buf")) nil [125535 125803])
            ("magit-insert-hunk-item-patch" function (:arguments ("hunk" "buf")) nil [125805 126025])
            ("magit-insert-hunk-item-region-patch" function (:arguments ("hunk" "reverse" "beg" "end" "buf")) nil [126027 126918])
            ("magit-hunk-item-is-conflict-p" function (:arguments ("hunk")) nil [126920 127111])
            ("magit-hunk-item-target-line" function (:arguments ("hunk")) nil [127113 127685])
            ("defvar-local" code nil nil [127687 127778])
            ("defvar-local" code nil nil [127780 127886])
            ("magit-save-index" function (:user-visible-flag t) nil [127888 128791])
            ("magit-show" function
               (:user-visible-flag t
                :arguments ("commit" "filename" "select" "prefix"))
                nil [128793 131106])
            ("magit-apply-diff-item" function (:arguments ("diff" "args")) nil [131108 131507])
            ("magit-apply-hunk-item*" function (:arguments ("hunk" "reverse" "args")) nil [131509 132717])
            ("magit-apply-hunk-item" function (:arguments ("hunk" "args")) nil [132719 132815])
            ("magit-apply-hunk-item-reverse" function (:arguments ("hunk" "args")) nil [132817 132919])
            ("magit-define-inserter" code nil nil [132921 133259])
            ("magit-define-inserter" code nil nil [133261 133834])
            ("magit-git-log-options" variable (:default-value (list "--pretty=format:* %h %s" (format "--abbrev=%d" magit-sha1-abbrev-length))) nil [133953 134072])
            ("magit-git-reflog-options" variable (:default-value (list "--pretty=format:* %h%gs" (format "--abbrev=%d" magit-sha1-abbrev-length))) nil [134188 134320])
            ("magit-unpushed-or-unpulled-commit-re" variable
               (:constant-flag t
                :default-value (concat "^\\* " "\\([0-9a-fA-F]+\\) " "\\(.*\\)$"))
                nil [134322 134539])
            ("magit-ref-nonchars" variable
               (:constant-flag t
                :default-value " - ~^:?*[\\")
                nil [134635 134818])
            ("magit-ref-nonslash-re" variable
               (:constant-flag t
                :default-value (concat "\\(?:" "[^" magit-ref-nonchars "./]" "\\.?" "\\)*"))
                nil [134820 135204])
            ("magit-refname-re" variable
               (:constant-flag t
                :default-value (concat "\\(?:HEAD\\|" "\\(?:tag: \\)?" magit-ref-nonslash-re "\\(?:" "/" magit-ref-nonslash-re "\\)*" "/" magit-ref-nonslash-re "[^" magit-ref-nonchars "./]" "\\)"))
                nil [135206 135747])
            ("magit-log-oneline-re" variable
               (:constant-flag t
                :default-value (concat "^\\(\\(?:[---_\\*|/.] ?\\)+ *\\)?" "\\(?:" "\\([0-9a-fA-F]+\\)" "\\(?:" " " "\\(" "(" magit-refname-re "\\(?:, " magit-refname-re "\\)*" ")" "\\)" "\\)?" "\\)?" " ?" "\\(?:" "\\([BGUN]\\)?" "\\[\\([^]]*\\)\\]" "\\[\\([^]]*\\)\\]" "\\)?" "\\(.+\\)?$"))
                nil [135749 136407])
            ("magit-log-longline-re" variable
               (:constant-flag t
                :default-value (concat "\\(\\(?: ?[---_\\*|/.]+ \\)* *\\)" "\\(?:" "commit " "\\([0-9a-fA-F]+\\)" "\\(?:" " " "\\(" "(" magit-refname-re "\\(?:, " magit-refname-re "\\)*" ")" "\\)" "\\)?$" "\\)?" "\\(.+\\)?$"))
                nil [136409 136856])
            ("magit-log-reflog-re" variable
               (:constant-flag t
                :default-value (concat "^\\([^]+\\)?" "\\([^]+\\)" "\\([^:]+\\)?" "\\(?:: \\)?" "\\(.+\\)?$"))
                nil [136858 137131])
            ("magit-reflog-subject-re" variable (:default-value (concat "\\([^ ]+\\) ?" "\\(\\(?: ?[^---(][^ ]+\\)+\\)? ?" "\\(\\(?: ?-[^ ]+\\)+\\)?" "\\(?: ?(\\([^)]+\\))\\)?")) nil [137173 137438])
            ("magit-present-log-line-function" variable (:default-value (quote magit-present-log-line)) nil [137466 137703])
            ("magit-log-get-bisect-state-color" function (:arguments ("suffix")) nil [137705 137895])
            ("magit-log-get-patches-color" function (:arguments ("suffix")) nil [137897 138067])
            ("magit-log-remotes-color-hook" variable nil nil [138069 138110])
            ("magit-log-get-remotes-color" function (:arguments ("suffix")) nil [138112 138291])
            ("magit-refs-namespaces" variable (:default-value (quote (("tags" . magit-log-head-label-tags) ("remotes" magit-log-get-remotes-color) ("heads" . magit-log-head-label-local) ("patches" magit-log-get-patches-color) ("bisect" magit-log-get-bisect-state-color)))) nil [138293 138544])
            ("magit-ref-get-label-color" function (:arguments ("r")) nil [138546 139550])
            ("magit-reflog-labels" variable (:default-value (quote (("commit" . magit-log-reflog-label-commit) ("amend" . magit-log-reflog-label-amend) ("merge" . magit-log-reflog-label-merge) ("checkout" . magit-log-reflog-label-checkout) ("branch" . magit-log-reflog-label-checkout) ("reset" . magit-log-reflog-label-reset) ("rebase" . magit-log-reflog-label-rebase) ("cherry-pick" . magit-log-reflog-label-cherry-pick) ("initial" . magit-log-reflog-label-commit) ("pull" . magit-log-reflog-label-remote) ("clone" . magit-log-reflog-label-remote)))) nil [139552 140159])
            ("magit-log-format-reflog" function (:arguments ("subject")) nil [140161 141008])
            ("magit-present-log-line" function (:arguments ("line")) nil [141010 142829])
            ("magit-log-author-date-max-length" variable (:default-value 25) nil [142831 142949])
            ("defvar-local" code nil nil [142951 143043])
            ("defvar-local" code nil nil [143045 143132])
            ("defvar-local" code nil nil [143134 143219])
            ("defvar-local" code nil nil [143221 143307])
            ("magit-log-make-author-date-overlay" function (:arguments ("author" "date")) nil [143309 144424])
            ("magit-log-set-author-date-overlays" function nil nil [144426 146182])
            ("magit-log-buffer-name" variable (:default-value "*magit-log*") nil [146184 146272])
            ("magit-log-display-author-date" function nil nil [146274 146500])
            ("magit-log-initialize-author-date-overlay" function nil nil [146502 146874])
            ("magit-log-create-author-date-overlay" function nil nil [146876 147203])
            ("magit-log-count" variable nil nil [147205 147310])
            ("magit-create-log-buffer-sections" function (:arguments ("body")) nil [147312 147900])
            ("cl-defstruct" code nil nil [147902 147976])
            ("magit-parse-log-line" function (:arguments ("line" "style")) nil [147978 149317])
            ("magit-wash-log-line" function (:arguments ("style")) nil [149319 150064])
            ("magit-wash-log" function (:arguments ("style")) nil [150066 150305])
            ("magit-wash-color-log" function (:arguments ("style")) nil [150307 150596])
            ("magit-currently-shown-commit" variable nil nil [150598 150639])
            ("defvar-local" code nil nil [150641 150760])
            ("put" code nil nil [150761 150816])
            ("defvar-local" code nil nil [150818 150943])
            ("put" code nil nil [150944 151002])
            ("magit-wash-commit" function nil nil [151004 154236])
            ("magit-make-commit-button" function (:arguments ("start" "end")) nil [154238 154685])
            ("magit-refresh-commit-buffer" function (:arguments ("commit")) nil [154687 155212])
            ("define-derived-mode" code nil nil [155231 155363])
            ("magit-commit-buffer-name" variable (:default-value "*magit-commit*") nil [155365 155467])
            ("magit-show-commit" function
               (:user-visible-flag t
                :arguments ("commit" "scroll" "inhibit-history" "select"))
                nil [155469 157505])
            ("magit-show-commit-backward" function
               (:user-visible-flag t
                :arguments ("ignored"))
                nil [157507 158125])
            ("magit-show-commit-forward" function
               (:user-visible-flag t
                :arguments ("ignored"))
                nil [158127 158746])
            ("magit-marked-commit" variable nil nil [158748 158780])
            ("defvar-local" code nil nil [158782 158819])
            ("put" code nil nil [158820 158864])
            ("magit-refresh-marked-commits" function nil nil [158866 158972])
            ("magit-refresh-marked-commits-in-buffer" function nil nil [158974 159596])
            ("magit-set-marked-commit" function (:arguments ("commit")) nil [159598 159707])
            ("magit-marked-commit" function nil nil [159709 159799])
            ("magit-remote-branch-name" function (:arguments ("remote" "branch")) nil [159801 159977])
            ("magit-wash-unpulled-or-unpushed" function nil nil [160017 160861])
            ("magit-define-inserter" code nil nil [160863 161236])
            ("magit-define-inserter" code nil nil [161238 161611])
            ("magit-remote-branch-for" function (:arguments ("local-branch" "fully-qualified-name")) nil [161613 162310])
            ("magit-remote-string-hook" variable nil nil [162312 162349])
            ("magit-remote-string" function (:arguments ("remote" "remote-branch" "remote-rebase")) nil [162351 162853])
            ("declare-function" code nil nil [162855 162927])
            ("magit-status-line-align-to" variable (:default-value 9) nil [162929 162966])
            ("magit-insert-status-line" function (:arguments ("heading" "info-string")) nil [162968 163189])
            ("magit-insert-status-tags-line" function nil nil [163191 163899])
            ("magit-format-status-tag-sentence" function (:arguments ("behindp" "tag" "cnt" "ignored")) nil [163901 164364])
            ("magit-refresh-status" function nil nil [164400 166715])
            ("magit-init" function
               (:user-visible-flag t
                :arguments ("dir"))
                nil [166717 167519])
            ("define-derived-mode" code nil nil [167521 167658])
            ("magit-default-directory" variable nil nil [167701 167737])
            ("magit-save-some-buffers" function
               (:user-visible-flag t
                :arguments ("msg" "pred"))
                nil [167739 168752])
            ("magit-save-buffers-predicate-all" function nil nil [168754 168854])
            ("magit-save-buffers-predicate-tree-only" function nil nil [168856 169197])
            ("magit-status" function
               (:user-visible-flag t
                :arguments ("dir"))
                nil [169253 170774])
            ("magit-read-top-dir" function (:arguments ("dir")) nil [170798 171590])
            ("magit-list-repos" function (:arguments ("dirs")) nil [171592 171864])
            ("magit-list-repos*" function (:arguments ("dir" "depth")) nil [171866 172310])
            ("magit-remove-conflicts" function (:arguments ("alist")) nil [172312 173106])
            ("magit-merge-warn-dirty-worktree" variable (:default-value t) nil [173137 173338])
            ("magit-merge-check-clean" function nil nil [173340 173542])
            ("magit-merge" function
               (:user-visible-flag t
                :arguments ("revision" "do-commit"))
                nil [173544 174154])
            ("magit-merge-abort" function (:user-visible-flag t) nil [174156 174416])
            ("magit-stage-item" function
               (:user-visible-flag t
                :arguments ("ask"))
                nil [174442 175858])
            ("magit-unstage-item" function (:user-visible-flag t) nil [175860 176828])
            ("magit-stage-all" function
               (:user-visible-flag t
                :arguments ("also-untracked-p"))
                nil [176830 177166])
            ("magit-unstage-all" function (:user-visible-flag t) nil [177168 177321])
            ("magit-escape-branch-name" function (:arguments ("branch")) nil [177339 177490])
            ("magit-default-tracking-name-remote-plus-branch" function (:arguments ("remote" "branch")) nil [177492 177708])
            ("magit-default-tracking-name-branch-only" function (:arguments ("remote" "branch")) nil [177710 177869])
            ("magit-get-tracking-name" function (:arguments ("remote" "branch")) nil [177871 178505])
            ("magit-maybe-create-local-tracking-branch" function (:arguments ("rev")) nil [178507 178974])
            ("magit-define-command" code nil nil [178976 179976])
            ("magit-read-create-branch-args" function nil nil [179978 180379])
            ("magit-define-command" code nil nil [180381 180907])
            ("magit-delete-branch" function
               (:user-visible-flag t
                :arguments ("branch" "force"))
                nil [180909 182243])
            ("magit-move-branch" function
               (:user-visible-flag t
                :arguments ("old" "new" "force"))
                nil [182245 182685])
            ("magit-guess-branch" function nil nil [182687 184005])
            ("magit-add-remote" function
               (:user-visible-flag t
                :arguments ("remote" "url"))
                nil [184022 184274])
            ("magit-remove-remote" function
               (:user-visible-flag t
                :arguments ("remote"))
                nil [184276 184463])
            ("magit-rename-remote" function
               (:user-visible-flag t
                :arguments ("old" "new"))
                nil [184465 184710])
            ("magit-guess-remote" function nil nil [184712 184955])
            ("magit-rebase-info" function nil nil [184970 186401])
            ("magit-rebase-step" function nil nil [186403 187255])
            ("magit-interactive-rebase" function (:user-visible-flag t) nil [187257 187853])
            ("magit-define-command" code nil nil [187867 188701])
            ("magit-define-command" code nil nil [188703 189114])
            ("magit-define-command" code nil nil [189116 189957])
            ("magit-read-rewrite-info" function nil nil [189975 190220])
            ("magit-write-rewrite-info" function (:arguments ("info")) nil [190222 190385])
            ("magit-define-inserter" code nil nil [190387 191234])
            ("magit-rewrite-set-commit-property" function (:arguments ("commit" "prop" "value")) nil [191236 191553])
            ("magit-rewrite-set-used" function nil nil [191555 191716])
            ("magit-rewrite-set-unused" function nil nil [191718 191883])
            ("magit-define-inserter" code nil nil [191885 192261])
            ("magit-rewrite-start" function (:arguments ("from" "onto")) nil [192263 193154])
            ("magit-rewrite-stop" function (:arguments ("noconfirm")) nil [193156 193449])
            ("magit-rewrite-abort" function nil nil [193451 193849])
            ("magit-rewrite-finish" function nil nil [193851 193953])
            ("magit-rewrite-finish-step" function nil nil [193955 194610])
            ("magit-define-command" code nil nil [194627 194812])
            ("magit-define-command" code nil nil [194814 195050])
            ("magit-define-command" code nil nil [195052 195201])
            ("magit-define-command" code nil nil [195217 197714])
            ("magit-parse-arguments" function (:arguments ("command")) nil [197730 197899])
            ("magit-shell-command" function
               (:user-visible-flag t
                :arguments ("command"))
                nil [197901 198126])
            ("magit-git-command-history" variable nil nil [198128 198166])
            ("magit-git-command" function
               (:user-visible-flag t
                :arguments ("command"))
                nil [198168 198623])
            ("magit-define-command" code nil nil [198639 199414])
            ("magit-define-command" code nil nil [199416 202554])
            ("magit-add-log" function nil nil [202569 204826])
            ("magit-define-command" code nil nil [204842 205171])
            ("magit-define-command" code nil nil [205173 205615])
            ("magit-define-command" code nil nil [205617 205855])
            ("magit-read-tag" function (:arguments ("prompt" "require-match")) nil [205857 206040])
            ("magit-wash-stash" function nil nil [206057 206630])
            ("magit-wash-stashes" function nil nil [206632 206744])
            ("magit-define-inserter" code nil nil [206746 206899])
            ("magit-read-stash-history" variable nil nil [206901 206982])
            ("magit-define-command" code nil nil [206984 207478])
            ("magit-define-command" code nil nil [207480 207949])
            ("magit-currently-shown-stash" variable nil nil [207951 207991])
            ("define-derived-mode" code nil nil [207993 208135])
            ("magit-stash-buffer-name" variable (:default-value "*magit-stash*") nil [208137 208225])
            ("magit-show-stash" function (:arguments ("stash" "scroll")) nil [208227 209401])
            ("magit-apply-item" function nil nil [209414 209950])
            ("magit-apply-commit" function (:arguments ("commit")) nil [209952 210199])
            ("magit-cherry-pick-item" function nil nil [210219 210539])
            ("magit-cherry-pick-commit" function (:arguments ("commit")) nil [210541 210678])
            ("magit-with-revert-confirmation" function (:arguments ("body")) nil [210693 210861])
            ("magit-revert-item" function nil nil [210863 211487])
            ("magit-revert-commit" function (:arguments ("commit")) nil [211489 211625])
            ("magit-define-command" code nil nil [211641 212080])
            ("magit-define-command" code nil nil [212082 212202])
            ("magit-define-command" code nil nil [212204 212645])
            ("magit-define-command" code nil nil [212647 212782])
            ("magit-define-command" code nil nil [212784 213230])
            ("magit-define-command" code nil nil [213232 213309])
            ("magit-log-show-more-entries" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [213325 213919])
            ("magit-refresh-log-buffer" function (:arguments ("range" "style" "args")) nil [213921 215128])
            ("define-derived-mode" code nil nil [215130 215262])
            ("defvar-local" code nil nil [215281 215407])
            ("magit-refresh-reflog-buffer" function (:arguments ("head" "args")) nil [215409 215890])
            ("define-derived-mode" code nil nil [215892 216040])
            ("magit-ediff-buffers" variable nil nil [216059 216156])
            ("magit-ediff-windows" variable nil nil [216158 216265])
            ("magit-ediff" function (:user-visible-flag t) nil [216267 217593])
            ("magit-ediff-add-cleanup" function nil nil [217595 217870])
            ("magit-ediff*" function (:arguments ("a" "b" "c")) nil [217872 218128])
            ("magit-ediff-restore" function nil nil [218130 218726])
            ("magit-refresh-diff-buffer" function (:arguments ("range" "args")) nil [218728 219500])
            ("define-derived-mode" code nil nil [219517 219655])
            ("magit-define-command" code nil nil [219657 220067])
            ("magit-define-command" code nil nil [220069 220224])
            ("magit-diff-with-mark" function nil nil [220226 220361])
            ("magit-wazzup-toggle-ignore" function (:arguments ("branch" "edit")) nil [220380 221028])
            ("magit-refresh-wazzup-buffer" function (:arguments ("head" "all")) nil [221030 223579])
            ("define-derived-mode" code nil nil [223581 223763])
            ("magit-wazzup" function (:arguments ("all")) nil [223765 224094])
            ("defvar-local" code nil nil [224279 224317])
            ("magit-refresh-file-log-buffer" function (:arguments ("file" "range" "style")) nil [224319 225495])
            ("magit-file-log" function
               (:user-visible-flag t
                :arguments ("all"))
                nil [225497 226233])
            ("magit-define-command" code nil nil [226235 226327])
            ("magit-show-file-revision" function (:user-visible-flag t) nil [226329 227051])
            ("magit-edit-ignore-string" function (:arguments ("file")) nil [227066 227599])
            ("magit-ignore-file" function (:arguments ("file" "edit-ignore-string" "local")) nil [227601 228577])
            ("magit--ignore-item" function (:arguments ("arg" "local")) nil [228579 228853])
            ("magit-ignore-item" function (:user-visible-flag t) nil [228855 228971])
            ("magit-ignore-item-locally" function (:user-visible-flag t) nil [228973 229112])
            ("magit-discard-diff" function (:arguments ("diff" "stagedp")) nil [229128 229815])
            ("magit-discard-item" function nil nil [229817 232059])
            ("magit-move-item" function nil nil [232072 232280])
            ("magit-visiting-file-item" function (:arguments ("body")) nil [232282 232589])
            ("magit-add-change-log-entry-no-option" function
               (:user-visible-flag t
                :arguments ("other-window"))
                nil [232607 232986])
            ("magit-add-change-log-entry-other-window" function nil nil [232988 233142])
            ("eval-after-load" code nil nil [233156 233993])
            ("magit-visit-file-item" function
               (:user-visible-flag t
                :arguments ("other-window"))
                nil [234007 235634])
            ("magit-visit-item" function
               (:user-visible-flag t
                :arguments ("other-window"))
                nil [235636 236327])
            ("magit-show-item-or-scroll-up" function nil nil [236340 236567])
            ("magit-show-item-or-scroll-down" function nil nil [236569 236804])
            ("magit-mark-item" function (:arguments ("unmark")) nil [236817 237139])
            ("magit-describe-item" function nil nil [237156 237554])
            ("magit-copy-item-as-kill" function (:user-visible-flag t) nil [237556 237760])
            ("magit-define-command" code nil nil [237773 238328])
            ("magit-submodule-update" function
               (:user-visible-flag t
                :arguments ("init"))
                nil [238348 238659])
            ("magit-submodule-update-init" function (:user-visible-flag t) nil [238661 238809])
            ("magit-submodule-init" function (:user-visible-flag t) nil [238811 238984])
            ("magit-submodule-sync" function (:user-visible-flag t) nil [238986 239183])
            ("magit-interactive-resolve" function (:arguments ("file")) nil [239199 241270])
            ("magit-interactive-resolve-item" function nil nil [241272 241433])
            ("define-derived-mode" code nil nil [241460 241552])
            ("magit--branch-name-at-point" function nil nil [241554 241725])
            ("magit--branches-for-remote-repo" function (:arguments ("remote")) nil [241727 242078])
            ("magit-branches-buffer-name" variable (:default-value "*magit-branches*") nil [242080 242134])
            ("magit--is-branch-at-point-remote" function nil nil [242136 242312])
            ("magit-remote-part-of-branch" function (:arguments ("branch")) nil [242314 242683])
            ("magit-branch-no-remote" function (:arguments ("branch")) nil [242685 243174])
            ("magit-wash-branch-line" function (:arguments ("remote-name")) nil [243176 246859])
            ("magit-wash-remote-branches-group" function (:arguments ("group")) nil [246861 247588])
            ("magit-wash-branches-between-point-and-marker" function (:arguments ("marker" "remote-name")) nil [247590 247875])
            ("magit-wash-branches" function nil nil [247877 249460])
            ("magit-refresh-branch-manager" function nil nil [249462 249742])
            ("magit-define-command" code nil nil [249744 250000])
            ("magit-change-what-branch-tracks" function (:user-visible-flag t) nil [250002 251802])
            ("magit-run-git-gui" function (:user-visible-flag t) nil [251843 252055])
            ("magit-run-gitk" function (:user-visible-flag t) nil [252057 253384])
            ("magit-load-config-extensions" function nil nil [253409 253787])
            ("magit-font-lock-keywords" variable
               (:constant-flag t
                :default-value (eval-when-compile (\` (((\, (concat "(\\(" (regexp-opt (quote ("magit-define-level-shower" "magit-define-section-jumper" "magit-define-inserter" "magit-define-command"))) "\\)\\>[ 	'(]*\\(\\sw+\\)?")) (1 font-lock-keyword-face) (2 font-lock-function-name-face nil t)) ((\, (concat "(" (regexp-opt (quote ("magit-with-refresh" "magit-with-silent-modifications" "magit-with-section" "magit-create-buffer-sections" "magit-section-action" "magit-add-action-clauses" "magit-create-log-buffer-sections" "magit-with-revert-confirmation" "magit-visiting-file-item" "magit-tests--with-temp-dir" "magit-tests--with-temp-repo" "magit-tests--with-temp-clone")) t) "\\>")) . 1)))))
                nil [253811 255164])
            ("magit-version" function
               (:user-visible-flag t
                :arguments ("noerror"))
                nil [255186 256855])
            ("cl-eval-when" code nil nil [256857 256901])
            ("magit" package nil nil [256903 256919])
            ("magit-key-mode" include nil nil [256943 256968])
            ("magit-log-edit" include nil nil [256969 256994])
            ("magit-bisect" include nil nil [256995 257018])
            ("magit-cherry" include nil nil [257019 257042]))          
    :file "magit.el"
    :pointmax 257067
    :fsize 257068
    :lastmodtime '(21005 34656 0 0)
    :unmatched-syntax '((close-paren 2587 . 2588) (symbol 2428 . 2445) (open-paren 2427 . 2428))
    )
   (semanticdb-table "magit-compat.el"
    :file "magit-compat.el"
    :fsize 7324
    :lastmodtime '(21005 34656 0 0)
    )
   (semanticdb-table "magit-key-mode.el"
    :file "magit-key-mode.el"
    :fsize 22516
    :lastmodtime '(21005 34656 0 0)
    )
   (semanticdb-table "magit-log-edit.el"
    :file "magit-log-edit.el"
    :fsize 18559
    :lastmodtime '(21005 34656 0 0)
    )
   (semanticdb-table "magit-bisect.el"
    :file "magit-bisect.el"
    :fsize 8506
    :lastmodtime '(21005 34656 0 0)
    )
   (semanticdb-table "magit-cherry.el"
    :file "magit-cherry.el"
    :fsize 3904
    :lastmodtime '(21005 34656 0 0)
    )
   )
  :file "!drive_c!Users!hyphen!.emacs.d!plugins!magit!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2"
  )
