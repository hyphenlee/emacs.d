;; Object go-mode/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "go-mode/"
  :tables (list 
   (semanticdb-table "go-mode.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("cl" include nil nil [791 804])
            ("cl" include nil nil [791 804])
            ("cl" include nil nil [791 804])
            ("go-mode-syntax-table" variable (:default-value (let ((st (make-syntax-table))) (modify-syntax-entry 95 "w" st) (modify-syntax-entry 43 "." st) (modify-syntax-entry 45 "." st) (modify-syntax-entry 42 "." st) (modify-syntax-entry 47 "." st) (modify-syntax-entry 37 "." st) (modify-syntax-entry 38 "." st) (modify-syntax-entry 124 "." st) (modify-syntax-entry 94 "." st) (modify-syntax-entry 33 "." st) (modify-syntax-entry 61 "." st) (modify-syntax-entry 60 "." st) (modify-syntax-entry 62 "." st) (modify-syntax-entry 34 "." st) (modify-syntax-entry 39 "." st) (modify-syntax-entry 96 "." st) (modify-syntax-entry 92 "." st) st)) nil [807 1666])
            ("go-mode-keywords" variable (:default-value (quote ("break" "default" "func" "interface" "select" "case" "defer" "go" "map" "struct" "chan" "else" "goto" "package" "switch" "const" "fallthrough" "if" "range" "type" "continue" "for" "import" "return" "var"))) nil [1668 2070])
            ("go-mode-font-lock-keywords" variable (:default-value (let ((builtins (quote ("append" "cap" "close" "complex" "copy" "delete" "imag" "len" "make" "new" "panic" "print" "println" "real" "recover"))) (constants (quote ("nil" "true" "false" "iota"))) (type-name "\\s *\\(?:[*(]\\s *\\)*\\(?:\\w+\\s *\\.\\s *\\)?\\(\\w+\\)")) (\` ((go-mode-font-lock-cs-comment 0 font-lock-comment-face t) (go-mode-font-lock-cs-string 0 font-lock-string-face t) ((\, (regexp-opt go-mode-keywords (quote words))) . font-lock-keyword-face) ((\, (regexp-opt builtins (quote words))) . font-lock-builtin-face) ((\, (regexp-opt constants (quote words))) . font-lock-constant-face) ("\\<func\\>\\s *\\(\\w+\\)" 1 font-lock-function-name-face) ("\\(\\w+\\)\\s *(" 1 font-lock-function-name-face) ("\\<type\\>\\s *\\(\\w+\\)" 1 font-lock-type-face) ((\, (concat "\\<type\\>\\s *\\w+\\s *" type-name)) 1 font-lock-type-face) ((\, (concat "\\<map\\s *\\[" type-name)) 1 font-lock-type-face) ((\, (concat "\\<chan\\>\\s *\\(?:<-\\)?" type-name)) 1 font-lock-type-face) ((\, (concat "\\<\\(?:new\\|make\\)\\>\\(?:\\s \\|)\\)*(" type-name)) 1 font-lock-type-face) ((\, (concat "\\.\\s *(" type-name)) 1 font-lock-type-face) ((\, (concat "\\<func\\>\\s *(\\w+\\s +" type-name)) 1 font-lock-type-face) ("^\\s *\\(\\w+\\)\\s *:\\(\\S.\\|$\\)" 1 font-lock-constant-face) ("\\<\\(goto\\|break\\|continue\\)\\>\\s *\\(\\w+\\)" 2 font-lock-constant-face))))) nil [2072 4240])
            ("go-mode-map" variable (:default-value (let ((m (make-sparse-keymap))) (define-key m "}" (function go-mode-insert-and-indent)) (define-key m ")" (function go-mode-insert-and-indent)) (define-key m "," (function go-mode-insert-and-indent)) (define-key m ":" (function go-mode-delayed-electric)) (define-key m "=" (function go-mode-insert-and-indent)) m)) nil [4324 4755])
            ("go-mode-insert-and-indent" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [4757 4992])
            ("go-mode-delayed-point" variable nil nil [4994 5213])
            ("make-variable-buffer-local" code nil nil [5214 5265])
            ("go-mode-delayed-electric" function
               (:user-visible-flag t
                :arguments ("p"))
                nil [5267 5647])
            ("go-mode-delayed-electric-hook" function (:arguments ("b" "e" "l")) nil [5649 6003])
            ("go-mode-mark-cs-end" variable (:default-value 1) nil [6086 6300])
            ("make-variable-buffer-local" code nil nil [6301 6350])
            ("go-mode-mark-string-end" variable (:default-value 1) nil [6352 6566])
            ("make-variable-buffer-local" code nil nil [6567 6620])
            ("go-mode-mark-comment-end" variable (:default-value 1) nil [6622 6839])
            ("make-variable-buffer-local" code nil nil [6840 6894])
            ("go-mode-mark-nesting-end" variable (:default-value 1) nil [6896 7042])
            ("make-variable-buffer-local" code nil nil [7043 7097])
            ("go-mode-mark-clear-cache" function (:arguments ("b" "e")) nil [7099 8661])
            ("go-mode-parser" function (:arguments ("body")) nil [8663 9414])
            ("go-mode-cs" function (:arguments ("pos")) nil [9416 9791])
            ("go-mode-mark-cs" function (:arguments ("end")) nil [9793 11330])
            ("go-mode-in-comment" function (:arguments ("pos")) nil [11332 11720])
            ("go-mode-mark-comment" function (:arguments ("end")) nil [11722 12792])
            ("go-mode-in-string" function (:arguments ("pos")) nil [12794 13169])
            ("go-mode-mark-string" function (:arguments ("end")) nil [13171 14546])
            ("go-mode-font-lock-cs" function (:arguments ("limit" "comment")) nil [14548 15889])
            ("go-mode-font-lock-cs-string" function (:arguments ("limit")) nil [15891 16005])
            ("go-mode-font-lock-cs-comment" function (:arguments ("limit")) nil [16007 16121])
            ("go-mode-nesting" function (:arguments ("pos")) nil [16123 16697])
            ("go-mode-mark-nesting" function (:arguments ("pos")) nil [16699 17994])
            ("go-mode-non-terminating-keywords-regexp" variable (:default-value (let* ((kws go-mode-keywords) (kws (remove "break" kws)) (kws (remove "continue" kws)) (kws (remove "fallthrough" kws)) (kws (remove "return" kws))) (regexp-opt kws (quote words)))) nil [18082 18442])
            ("go-mode-semicolon-p" function nil nil [18444 19162])
            ("go-mode-whitespace-p" function (:arguments ("char")) nil [19164 19279])
            ("go-mode-backward-skip-comments" function nil nil [19281 19951])
            ("go-mode-indentation" function nil nil [19953 23869])
            ("go-mode-indent-line" function (:user-visible-flag t) nil [23871 24343])
            ("define-derived-mode" code nil nil [24442 25488])
            ("add-to-list" code nil nil [25505 25561])
            ("go-mode-reload" function (:user-visible-flag t) nil [25563 25758])
            ("gofmt" function (:user-visible-flag t) nil [25775 27140])
            ("gofmt-before-save" function (:user-visible-flag t) nil [27157 27365])
            ("godoc-read-query" function nil nil [27367 28029])
            ("godoc-get-buffer" function (:arguments ("query")) nil [28031 28332])
            ("godoc-buffer-sentinel" function (:arguments ("proc" "event")) nil [28334 28842])
            ("godoc" function
               (:user-visible-flag t
                :arguments ("query"))
                nil [28859 29199])
            ("go-mode" package nil nil [29201 29219]))          
    :file "go-mode.el"
    :pointmax 29220
    :fsize 29219
    :lastmodtime '(21005 33503 0 0)
    :unmatched-syntax 'nil
    )
   )
  :file "!drive_c!Users!hyphen!.emacs.d!plugins!go-mode!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2"
  )
