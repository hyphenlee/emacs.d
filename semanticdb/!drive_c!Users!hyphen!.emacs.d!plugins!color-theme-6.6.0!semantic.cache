;; Object color-theme-6.6.0/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "color-theme-6.6.0/"
  :tables (list 
   (semanticdb-table "color-theme-subdued.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("color-theme" include nil nil [873 895])
            ("color-theme-subdued" function (:user-visible-flag t) nil [897 5200])
            ("color-theme-subdued" package nil nil [5202 5232]))          
    :file "color-theme-subdued.el"
    :pointmax 5233
    :fsize 5232
    :lastmodtime '(21005 33498 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "color-theme.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("easymenu" include nil nil [1827 1846])
            ("reporter" include nil nil [1849 1868])
            ("sendmail" include nil nil [1871 1890])
            ("cl" include nil nil [1893 1906])
            ("cus-face" include nil nil [2005 2024])
            ("wid-edit" include nil nil [2025 2044])
            ("color-theme-maintainer-address" variable
               (:constant-flag t
                :default-value "zedek@gnu.org")
                nil [2085 2184])
            ("cond" code nil nil [2240 2448])
            ("color-theme-xemacs-p" variable (:default-value (and (featurep (quote xemacs)) (string-match "XEmacs" emacs-version))) nil [2450 2608])
            ("or" code nil nil [2659 2788])
            ("cond" code nil nil [3398 4017])
            ("color-theme-alist" function (:arguments ("plist")) nil [4019 4729])
            ("color-theme" customgroup (:user-visible-flag t) nil [4762 4943])
            ("color-theme-legal-frame-parameters" variable (:default-value "\\(color\\|mode\\)$") nil [4945 5418])
            ("color-theme-legal-variables" variable (:default-value "\\(color\\|face\\)$") nil [5420 5748])
            ("color-theme-illegal-faces" variable (:default-value "^w3-") nil [5750 6067])
            ("color-theme-illegal-default-attributes" variable (:default-value (quote (:family :height :width))) nil [6069 6369])
            ("color-theme-is-global" variable
               (:user-visible-flag t
                :default-value t)
                nil [6371 7674])
            ("color-theme-is-cumulative" variable
               (:user-visible-flag t
                :default-value t)
                nil [7676 7921])
            ("color-theme-directory" variable nil nil [7923 8369])
            ("color-theme-libraries" variable (:default-value (directory-files (concat (file-name-directory (locate-library "color-theme")) "/themes") t "^color-theme")) nil [8371 8870])
            ("color-theme-load-all-themes" variable (:default-value t) nil [8872 9075])
            ("color-theme-mode-hook" variable nil nil [9077 9181])
            ("color-theme-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map (kbd "RET") (quote color-theme-install-at-point)) (define-key map (kbd "c") (quote list-colors-display)) (define-key map (kbd "d") (quote color-theme-describe)) (define-key map (kbd "f") (quote list-faces-display)) (define-key map (kbd "i") (quote color-theme-install-at-point)) (define-key map (kbd "l") (quote color-theme-install-at-point-for-current-frame)) (define-key map (kbd "p") (quote color-theme-print)) (define-key map (kbd "q") (quote bury-buffer)) (define-key map (kbd "?") (quote color-theme-describe)) (if color-theme-xemacs-p (define-key map (kbd "<button2>") (quote color-theme-install-at-mouse)) (define-key map (kbd "<mouse-2>") (quote color-theme-install-at-mouse))) map)) nil [9183 9996])
            ("color-theme-initialized" variable nil nil [9998 10120])
            ("color-theme-buffer-name" variable (:default-value "*Color Theme Selection*") nil [10122 10226])
            ("color-theme-original-frame-alist" variable nil nil [10228 10331])
            ("color-theme-history" variable nil nil [10333 10415])
            ("color-theme-history-max-length" variable nil nil [10417 10716])
            ("color-theme-counter" variable nil nil [10718 10897])
            ("color-theme-entry-path" variable (:default-value (cond ((lookup-key global-map [menu-bar tools]) (quote ("tools"))) ((featurep (quote xemacs)) (setq tool-entry (quote ("Tools")))) (t (quote ("Tools"))))) nil [10899 11421])
            ("color-theme-add-to-history" function (:arguments ("name")) nil [11423 11925])
            ("color-themes" variable (:default-value (quote ((color-theme-aalto-dark "Aalto Dark" "Jari Aalto <jari.aalto@poboxes.com>") (color-theme-aalto-light "Aalto Light" "Jari Aalto <jari.aalto@poboxes.com>") (color-theme-aliceblue "Alice Blue" "Girish Bharadwaj <girishb@gbvsoft.com>") (color-theme-andreas "Andreas" "Andreas Busch <Andreas.Busch@politics.ox.ac.uk>") (color-theme-arjen "Arjen" "Arjen Wiersma <arjen@wiersma.org>") (color-theme-beige-diff "Beige Diff" "Alex Schroeder <alex@gnu.org>" t) (color-theme-bharadwaj "Bharadwaj" "Girish Bharadwaj <girishb@gbvsoft.com>") (color-theme-bharadwaj-slate "Bharadwaj Slate" "Girish Bharadwaj <girishb@gbvsoft.com>") (color-theme-billw "Billw" "Bill White <billw@wolfram.com>") (color-theme-black-on-gray "BlackOnGray" "Sudhir Bhojwani <sbhojwani@altoweb.com>") (color-theme-blippblopp "Blipp Blopp" "Thomas Sicheritz-Ponten<thomas@biopython.org>") (color-theme-simple-1 "Black" "Jonadab <jonadab@bright.net>") (color-theme-blue-erc "Blue ERC" "Alex Schroeder <alex@gnu.org>" t) (color-theme-blue-gnus "Blue Gnus" "Alex Schroeder <alex@gnu.org>" t) (color-theme-blue-mood "Blue Mood" "Nelson Loyola <nloyola@yahoo.com>") (color-theme-blue-sea "Blue Sea" "Alex Schroeder <alex@gnu.org>") (color-theme-calm-forest "Calm Forest" "Artur Hefczyc <kobit@plusnet.pl>") (color-theme-charcoal-black "Charcoal Black" "Lars Chr. Hausmann <jazz@zqz.dk>") (color-theme-goldenrod "Cheap Goldenrod" "Alex Schroeder <alex@gnu.org>") (color-theme-clarity "Clarity and Beauty" "Richard Wellum <rwellum@cisco.com>") (color-theme-classic "Classic" "Frederic Giroud <postcard@worldonline.fr>") (color-theme-comidia "Comidia" "Marcelo Dias de Toledo <mtole@ig.com.br>") (color-theme-jsc-dark "Cooper Dark" "John S Cooper <John.Cooper@eu.citrix.com>") (color-theme-jsc-light "Cooper Light" "John S Cooper <John.Cooper@eu.citrix.com>") (color-theme-jsc-light2 "Cooper Light 2" "John S Cooper <John.Cooper@eu.citrix.com>") (color-theme-dark-blue "Dark Blue" "Chris McMahan <cmcmahan@one.net>") (color-theme-dark-blue2 "Dark Blue 2" "Chris McMahan <cmcmahan@one.net>") (color-theme-dark-green "Dark Green" "eddy_woody@hotmail.com") (color-theme-dark-laptop "Dark Laptop" "Laurent Michel <ldm@cs.brown.edu>") (color-theme-deep-blue "Deep Blue" "Tomas Cerha <cerha@brailcom.org>") (color-theme-digital-ofs1 "Digital OFS1" "Gareth Owen <gowen@gwowen.freeserve.co.uk>") (color-theme-euphoria "Euphoria" "oGLOWo@oGLOWo.cjb.net") (color-theme-feng-shui "Feng Shui" "Walter Higgins <walterh@rocketmail.com>") (color-theme-fischmeister "Fischmeister" "Sebastian Fischmeister <sfischme@nexus.lzk.tuwien.ac.at>") (color-theme-gnome "Gnome" "Jonadab <jonadab@bright.net>") (color-theme-gnome2 "Gnome 2" "Alex Schroeder <alex@gnu.org>") (color-theme-gray1 "Gray1" "Paul Pulli <P.Pulli@motorola.com>") (color-theme-gray30 "Gray30" "Girish Bharadwaj <girishb@gbvsoft.com>") (color-theme-kingsajz "Green Kingsajz" "Olgierd `Kingsajz' Ziolko <kingsajz@rpg.pl>") (color-theme-greiner "Greiner" "Kevin Greiner <kgreiner@mapquest.com>") (color-theme-gtk-ide "GTK IDE" "Gordon Messmer <gordon@dragonsdawn.net>") (color-theme-high-contrast "High Contrast" "Alex Schroeder <alex@gnu.org>") (color-theme-hober "Hober" "Edward O'Connor <ted@oconnor.cx>") (color-theme-infodoc "Infodoc" "Frederic Giroud <postcard@worldonline.fr>") (color-theme-jb-simple "JB Simple" "jeff@dvns.com") (color-theme-jedit-grey "Jedit Grey" "Gordon Messmer <gordon@dragonsdawn.net>") (color-theme-jonadabian "Jonadab" "Jonadab <jonadab@bright.net>") (color-theme-jonadabian-slate "Jonadabian Slate" "Jonadab <jonadab@bright.net>") (color-theme-katester "Katester" "Higgins_Walter@emc.com") (color-theme-late-night "Late Night" "Alex Schroeder <alex@gnu.org>") (color-theme-lawrence "Lawrence" "lawrence mitchell <wence@gmx.li>") (color-theme-lethe "Lethe" "Ivica Loncar <ivica.loncar@srk.fer.hr>") (color-theme-ld-dark "Linh Dang Dark" "Linh Dang <linhd@nortelnetworks.com>") (color-theme-marine "Marine" "Girish Bharadwaj <girishb@gbvsoft.com>") (color-theme-matrix "Matrix" "Walter Higgins <walterh@rocketmail.com>") (color-theme-marquardt "Marquardt" "Colin Marquardt <colin@marquardt-home.de>") (color-theme-midnight "Midnight" "Gordon Messmer <gordon@dragonsdawn.net>") (color-theme-mistyday "Misty Day" "Hari Kumar <Hari.Kumar@mtm.kuleuven.ac.be>") (color-theme-montz "Montz" "Brady Montz <bradym@becomm.com>") (color-theme-oswald "Oswald" "Tom Oswald <toswald@sharplabs.com>") (color-theme-parus "Parus" "Jon K Hellan <hellan@acm.org>") (color-theme-pierson "Pierson" "Dan L. Pierson <dan@sol.control.com>") (color-theme-ramangalahy "Ramangalahy" "Solofo Ramangalahy <solofo@irisa.fr>") (color-theme-raspopovic "Raspopovic" "Pedja Raspopovic <pedja@lsil.com>") (color-theme-renegade "Renegade" "Dave Benjamin <ramen@ramenfest.com>") (color-theme-resolve "Resolve" "Damien Elmes <resolve@repose.cx>") (color-theme-retro-green "Retro Green" "Alex Schroeder <alex@gnu.org>") (color-theme-retro-orange "Retro Orange" "Alex Schroeder <alex@gnu.org>") (color-theme-robin-hood "Robin Hood" "Alex Schroeder <alex@gnu.org>") (color-theme-rotor "Rotor" "Jinwei Shen <shenjw@wam.umd.edu>") (color-theme-ryerson "Ryerson" "Luis Fernandes <elf@ee.ryerson.ca>") (color-theme-salmon-diff "Salmon Diff" "Alex Schroeder <alex@gnu.org>" t) (color-theme-salmon-font-lock "Salmon Font-Lock" "Alex Schroeder <alex@gnu.org>" t) (color-theme-scintilla "Scintilla" "Gordon Messmer <gordon@dragonsdawn.net>") (color-theme-shaman "Shaman" "shaman@interdon.net") (color-theme-sitaramv-nt "Sitaram NT" "Sitaram Venkatraman <sitaramv@loc251.tandem.com>") (color-theme-sitaramv-solaris "Sitaram Solaris" "Sitaram Venkatraman <sitaramv@loc251.tandem.com>") (color-theme-snow "Snow" "Nicolas Rist <Nicolas.Rist@alcatel.de>") (color-theme-snowish "Snowish" "Girish Bharadwaj <girishb@gbvsoft.com>") (color-theme-standard-ediff "Standard Ediff" "Emacs Team, added by Alex Schroeder <alex@gnu.org>" t) (color-theme-standard "Standard Emacs 20" "Emacs Team, added by Alex Schroeder <alex@gnu.org>") (color-theme-emacs-21 "Standard Emacs 21" "Emacs Team, added by Alex Schroeder <alex@gnu.org>") (color-theme-emacs-nw "Standard Emacs 21 No Window" "Emacs Team, added by D. Goel <deego@gnufans.org>") (color-theme-xemacs "Standard XEmacs" "XEmacs Team, added by Alex Schroeder <alex@gnu.org>") (color-theme-subtle-blue "Subtle Blue" "Chris McMahan <cmcmahan@one.net>") (color-theme-subtle-hacker "Subtle Hacker" "Colin Walters <levanti@verbum.org>") (color-theme-taming-mr-arneson "Taming Mr Arneson" "Erik Arneson <erik@aarg.net>") (color-theme-taylor "Taylor" "Art Taylor <reeses@hemisphere.org>") (color-theme-tty-dark "TTY Dark" "O Polite <m2@plusseven.com>") (color-theme-vim-colors "Vim Colors" "Michael Soulier <msoulier@biryani.nssg.mitel.com>") (color-theme-whateveryouwant "Whateveryouwant" "Fabien Penso <penso@linuxfr.org>, color by Scott Jaderholm <scott@jaderholm.com>") (color-theme-wheat "Wheat" "Alex Schroeder <alex@gnu.org>") (color-theme-pok-wob "White On Black" "S. Pokrovsky <pok@nbsp.nsk.su>") (color-theme-pok-wog "White On Grey" "S. Pokrovsky <pok@nbsp.nsk.su>") (color-theme-word-perfect "WordPerfect" "Thomas Gehrlein <Thomas.Gehrlein@t-online.de>") (color-theme-xp "XP" "Girish Bharadwaj <girishb@gbvsoft.com>")))) nil [12076 20386])
            ("color-theme-backup-original-values" function nil nil [20403 20762])
            ("add-hook" code nil nil [20763 20826])
            ("color-theme-select" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [20843 22557])
            ("when" code nil nil [22559 22752])
            ("color-theme-mode" function nil nil [22754 24606])
            ("color-theme-describe" function (:user-visible-flag t) nil [24667 24986])
            ("color-theme-install-at-mouse" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [25003 25294])
            ("color-theme-install-at-point" function (:user-visible-flag t) nil [25308 26148])
            ("color-theme-install-at-point-for-current-frame" function (:user-visible-flag t) nil [26165 26447])
            ("color-theme-filter" function (:arguments ("old-list" "regexp" "exclude")) nil [26525 27683])
            ("color-theme-spec-filter" function (:arguments ("spec")) nil [27685 28205])
            ("color-theme-plist-delete" function (:arguments ("plist" "prop")) nil [28510 28987])
            ("if" code nil nil [29310 30263])
            ("color-theme-spec-canonical-font" function (:arguments ("atts")) nil [30564 31095])
            ("color-theme-spec-resolve-height" function (:arguments ("old" "new")) nil [31554 32214])
            ("color-theme-spec-resolve-inheritance" function (:arguments ("atts")) nil [32675 33847])
            ("color-theme-spec-maybe-invert" function (:arguments ("atts")) nil [34864 35600])
            ("color-theme-spec" function (:arguments ("face")) nil [36164 36996])
            ("color-theme-get-params" function nil nil [36998 37463])
            ("color-theme-get-vars" function nil nil [37465 38056])
            ("color-theme-print-alist" function (:arguments ("alist")) nil [38058 38323])
            ("color-theme-get-faces" function nil nil [38325 38798])
            ("color-theme-get-face-definitions" function nil nil [38800 38972])
            ("color-theme-print-faces" function (:arguments ("faces")) nil [38974 39245])
            ("color-theme-reset-faces" function nil nil [39247 39823])
            ("color-theme-print-theme" function (:arguments ("func" "doc" "params" "vars" "faces")) nil [39825 40589])
            ("color-theme-print" function
               (:user-visible-flag t
                :arguments ("buf"))
                nil [40606 42075])
            ("color-theme-analyze-find-theme" function (:arguments ("code")) nil [42077 42424])
            ("color-theme-analyze-add-face" function (:arguments ("a" "b" "regexp" "faces")) nil [42989 43623])
            ("color-theme-analyze-add-faces" function (:arguments ("faces")) nil [44590 47853])
            ("color-theme-analyze-remove-heights" function (:arguments ("faces")) nil [47855 48807])
            ("color-theme-analyze-defun" function (:user-visible-flag t) nil [49052 51089])
            ("color-theme-snapshot" function nil nil [51143 51175])
            ("color-theme-make-snapshot" function nil nil [51192 51939])
            ("color-theme-frame-param-frobbing-rules" variable (:default-value (quote ((foreground-color default foreground) (background-color default background)))) nil [52001 52331])
            ("color-theme-frob-faces" function (:arguments ("params")) nil [52390 52820])
            ("color-theme-alist-reduce" function (:arguments ("old-list")) nil [52822 53215])
            ("color-theme-install-frame-params" function (:arguments ("params")) nil [53217 55257])
            ("color-theme-install-variables" function (:arguments ("vars")) nil [55332 56095])
            ("color-theme-install-faces" function (:arguments ("faces")) nil [56097 58099])
            ("color-theme-canonic" function (:arguments ("theme")) nil [59036 59613])
            ("color-theme-function" function (:arguments ("theme")) nil [59615 59709])
            ("color-theme-frame-params" function (:arguments ("theme")) nil [59711 59813])
            ("color-theme-variables" function (:arguments ("theme")) nil [59815 59903])
            ("color-theme-faces" function (:arguments ("theme")) nil [59905 59989])
            ("color-theme-merge-alists" function (:arguments ("alists")) nil [59991 60365])
            ("color-theme-compare" function
               (:user-visible-flag t
                :arguments ("theme-a" "theme-b"))
                nil [60752 62434])
            ("color-theme-install" function (:arguments ("theme")) nil [62483 64199])
            ("color-theme-submit" function (:user-visible-flag t) nil [64241 66159])
            ("define-color-theme" function (:arguments ("name" "author" "description" "forms")) nil [66193 66676])
            ("color-theme-initialize" function (:user-visible-flag t) nil [66723 67255])
            ("when" code nil nil [67257 67376])
            ("color-theme" package nil nil [67616 67638]))          
    :file "color-theme.el"
    :pointmax 67669
    :fsize 67668
    :lastmodtime '(21005 33498 0 0)
    :unmatched-syntax '((close-paren 1890 . 1891) (symbol 1807 . 1824) (open-paren 1806 . 1807))
    )
   )
  :file "!drive_c!Users!hyphen!.emacs.d!plugins!color-theme-6.6.0!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2"
  )
