;; Object lisp/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "lisp/"
  :tables (list 
   (semanticdb-table "custom.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("widget" include nil nil [1232 1249])
            ("custom-define-hook" variable nil nil [1251 1400])
            ("custom-dont-initialize" variable nil nil [1402 1585])
            ("custom-current-group-alist" variable nil nil [1587 1700])
            ("custom-initialize-default" function (:arguments ("symbol" "value")) nil [1730 2238])
            ("custom-initialize-set" function (:arguments ("symbol" "value")) nil [2240 2768])
            ("custom-initialize-reset" function (:arguments ("symbol" "value")) nil [2770 3491])
            ("custom-initialize-changed" function (:arguments ("symbol" "value")) nil [3493 4072])
            ("custom-delayed-init-variables" variable nil nil [4074 4171])
            ("custom-initialize-delay" function (:arguments ("symbol" "_value")) nil [4173 5297])
            ("custom-declare-variable" function (:arguments ("symbol" "default" "doc" "args")) nil [5299 7898])
            ("defcustom" function (:arguments ("symbol" "standard" "doc" "args")) nil [7900 13974])
            ("defface" function (:arguments ("face" "spec" "doc" "args")) nil [14002 16913])
            ("custom-current-group" function nil nil [16942 17031])
            ("custom-declare-group" function (:arguments ("symbol" "members" "doc" "args")) nil [17033 18094])
            ("defgroup" function (:arguments ("symbol" "members" "doc" "args")) nil [18096 19256])
            ("custom-add-to-group" function (:arguments ("group" "option" "widget")) nil [19258 19604])
            ("custom-group-of-mode" function (:arguments ("mode")) nil [19606 20008])
            ("custom-handle-all-keywords" function (:arguments ("symbol" "args" "type")) nil [20027 20617])
            ("custom-handle-keyword" function (:arguments ("symbol" "keyword" "value" "type")) nil [20619 21330])
            ("custom-add-dependencies" function (:arguments ("symbol" "value")) nil [21332 22085])
            ("custom-add-option" function (:arguments ("symbol" "option")) nil [22087 22538])
            ("defalias" code nil nil [22539 22595])
            ("custom-add-link" function (:arguments ("symbol" "widget")) nil [22597 22833])
            ("custom-add-version" function (:arguments ("symbol" "version")) nil [22835 22985])
            ("custom-add-package-version" function (:arguments ("symbol" "version")) nil [22987 23161])
            ("custom-add-load" function (:arguments ("symbol" "load")) nil [23163 23459])
            ("custom-autoload" function (:arguments ("symbol" "load" "noset")) nil [23461 23747])
            ("custom-variable-p" function (:arguments ("variable")) nil [23749 24182])
            ("define-obsolete-function-alias" code nil nil [24184 24259])
            ("custom-note-var-changed" function (:arguments ("variable")) nil [24261 24556])
            ("custom-load-recursion" variable nil nil [24699 24775])
            ("custom-load-symbol" function (:arguments ("symbol")) nil [24777 26034])
            ("custom-local-buffer" variable nil nil [26037 26357])
            ("put" code nil nil [26358 26403])
            ("custom-set-default" function (:arguments ("variable" "value")) nil [26405 26786])
            ("custom-set-minor-mode" function (:arguments ("variable" "value")) nil [26788 27212])
            ("custom-quote" function (:arguments ("sexp")) nil [27214 27552])
            ("customize-mark-to-save" function (:arguments ("symbol")) nil [27554 28717])
            ("customize-mark-as-set" function (:arguments ("symbol")) nil [28719 29874])
            ("custom-reevaluate-setting" function (:arguments ("symbol")) nil [29876 30348])
            ("custom-known-themes" variable (:default-value (quote (user changed))) nil [32175 32563])
            ("custom-theme-p" function (:arguments ("theme")) nil [32565 32674])
            ("custom-check-theme" function (:arguments ("theme")) nil [32676 32854])
            ("custom-push-theme" function (:arguments ("prop" "symbol" "theme" "mode" "value")) nil [32856 35001])
            ("custom-fix-face-spec" function (:arguments ("spec")) nil [35003 35773])
            ("custom-set-variables" function (:arguments ("args")) nil [35776 36387])
            ("custom-theme-set-variables" function (:arguments ("theme" "args")) nil [36389 39862])
            ("deftheme" function (:arguments ("theme" "doc" "ignored")) nil [40458 41079])
            ("custom-declare-theme" function (:arguments ("theme" "feature" "doc" "ignored")) nil [41081 41569])
            ("custom-make-theme-feature" function (:arguments ("theme")) nil [41571 42076])
            ("custom-theme-directory" variable (:default-value user-emacs-directory) nil [42100 42447])
            ("custom-theme-load-path" variable (:default-value (list (quote custom-theme-directory) t)) nil [42449 43250])
            ("custom--inhibit-theme-enable" variable nil nil [43252 43538])
            ("provide-theme" function (:arguments ("theme")) nil [43540 43938])
            ("custom-safe-themes" variable (:default-value (quote (default))) nil [43940 44560])
            ("load-theme" function
               (:user-visible-flag t
                :arguments ("theme" "no-confirm" "no-enable"))
                nil [44562 47438])
            ("custom-theme-load-confirm" function (:arguments ("hash")) nil [47440 48190])
            ("custom-theme-name-valid-p" function (:arguments ("name")) nil [48192 48457])
            ("custom-available-themes" function nil nil [48459 48991])
            ("custom-theme--load-path" function nil nil [48993 49312])
            ("enable-theme" function
               (:user-visible-flag t
                :arguments ("theme"))
                nil [49359 50595])
            ("custom-enabled-themes" variable nil nil [50597 51907])
            ("custom-theme-enabled-p" function (:arguments ("theme")) nil [51909 52027])
            ("disable-theme" function
               (:user-visible-flag t
                :arguments ("theme"))
                nil [52029 53628])
            ("custom--frame-color-default" function (:arguments ("frame" "attribute" "resource-attr" "resource-class" "tty-default" "x-default")) nil [53630 53990])
            ("custom-variable-theme-value" function (:arguments ("variable")) nil [53992 54385])
            ("custom-theme-recalc-variable" function (:arguments ("variable")) nil [54387 54842])
            ("custom-theme-recalc-face" function (:arguments ("face")) nil [54844 55116])
            ("custom-theme-reset-variables" function (:arguments ("theme" "args")) nil [55333 55704])
            ("custom-reset-variables" function (:arguments ("args")) nil [55706 56047])
            ("while" code nil nil [56128 56307])
            ("custom" package nil nil [56309 56326]))          
    :file "custom.el"
    :pointmax 56352
    :fsize 56351
    :lastmodtime '(20806 7940 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "widget.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("define-widget-keywords" function (:arguments ("_keys")) nil [1399 1853])
            ("put" code nil nil [3047 3085])
            ("define-widget" function (:arguments ("name" "class" "doc" "args")) nil [3125 3681])
            ("defalias" code nil nil [3742 3787])
            ("widget" package nil nil [3803 3820]))          
    :file "widget.el"
    :pointmax 3846
    :fsize 3845
    :lastmodtime '(20806 7946 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "subr.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("custom-declare-variable-list" variable nil nil [1076 1270])
            ("custom-declare-variable-early" function (:arguments ("arguments")) nil [1363 1503])
            ("declare-function" function (:arguments ("fn" "file" "arglist" "fileonly")) nil [1505 3022])
            ("defalias" code nil nil [3051 3072])
            ("noreturn" function (:arguments ("form")) nil [3074 3278])
            ("1value" function (:arguments ("form")) nil [3280 3518])
            ("def-edebug-spec" function (:arguments ("symbol" "spec")) nil [3520 3980])
            ("lambda" function (:arguments ("cdr")) nil [3982 5140])
            ("setq-local" function (:arguments ("var" "val")) nil [5142 5354])
            ("defvar-local" function (:arguments ("var" "val" "docstring")) nil [5356 5797])
            ("apply-partially" function (:arguments ("fun" "args")) nil [5799 6214])
            ("push" function (:arguments ("newelt" "place")) nil [6216 6810])
            ("pop" function (:arguments ("place")) nil [6812 7376])
            ("when" function (:arguments ("cond" "body")) nil [7378 7666])
            ("unless" function (:arguments ("cond" "body")) nil [7668 7954])
            ("if" code nil nil [7956 11547])
            ("ignore-errors" function (:arguments ("body")) nil [11549 11856])
            ("ignore" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [11887 12035])
            ("error" function (:arguments ("args")) nil [12092 12421])
            ("set-advertised-calling-convention" code nil nil [12422 12492])
            ("user-error" function (:arguments ("format" "args")) nil [12494 13034])
            ("frame-configuration-p" function (:arguments ("object")) nil [13148 13403])
            ("caar" function (:arguments ("x")) nil [13428 13499])
            ("cadr" function (:arguments ("x")) nil [13501 13572])
            ("cdar" function (:arguments ("x")) nil [13574 13645])
            ("cddr" function (:arguments ("x")) nil [13647 13718])
            ("last" function (:arguments ("list" "n")) nil [13720 14137])
            ("butlast" function (:arguments ("list" "n")) nil [14139 14300])
            ("nbutlast" function (:arguments ("list" "n")) nil [14302 14530])
            ("delete-dups" function (:arguments ("list")) nil [14532 14885])
            ("number-sequence" function (:arguments ("from" "to" "inc")) nil [14887 16711])
            ("copy-tree" function (:arguments ("tree" "vecp")) nil [16713 17462])
            ("assoc-default" function (:arguments ("key" "alist" "test" "default")) nil [17502 18302])
            ("assoc-ignore-case" function (:arguments ("key" "alist")) nil [18304 18626])
            ("assoc-ignore-representation" function (:arguments ("key" "alist")) nil [18628 18896])
            ("member-ignore-case" function (:arguments ("elt" "list")) nil [18898 19333])
            ("assq-delete-all" function (:arguments ("key" "alist")) nil [19335 19819])
            ("rassq-delete-all" function (:arguments ("value" "alist")) nil [19821 20314])
            ("remove" function (:arguments ("elt" "seq")) nil [20316 20669])
            ("remq" function (:arguments ("elt" "list")) nil [20671 21002])
            ("kbd" function (:arguments ("keys")) nil [21027 21337])
            ("put" code nil nil [21338 21356])
            ("undefined" function (:user-visible-flag t) nil [21358 21456])
            ("put" code nil nil [21551 21586])
            ("suppress-keymap" function (:arguments ("map" "nodigits")) nil [21588 22152])
            ("make-composed-keymap" function (:arguments ("maps" "parent")) nil [22154 22806])
            ("define-key-after" function (:arguments ("keymap" "key" "definition" "after")) nil [22808 24869])
            ("map-keymap-sorted" function (:arguments ("function" "keymap")) nil [24871 25551])
            ("keymap--menu-item-binding" function (:arguments ("val")) nil [25553 26023])
            ("keymap--menu-item-with-binding" function (:arguments ("item" "binding")) nil [26077 26677])
            ("keymap--merge-bindings" function (:arguments ("val1" "val2")) nil [26679 27145])
            ("keymap-canonicalize" function (:arguments ("map")) nil [27147 29016])
            ("put" code nil nil [29018 29075])
            ("keyboard-translate" function (:arguments ("from" "to")) nil [29077 29452])
            ("global-set-key" function
               (:user-visible-flag t
                :arguments ("key" "command"))
                nil [29483 30229])
            ("local-set-key" function
               (:user-visible-flag t
                :arguments ("key" "command"))
                nil [30231 31035])
            ("global-unset-key" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [31037 31233])
            ("local-unset-key" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [31235 31464])
            ("key-substitution-in-progress" variable nil nil [31520 31613])
            ("substitute-key-definition" function (:arguments ("olddef" "newdef" "keymap" "oldmap" "prefix")) nil [31615 33000])
            ("substitute-key-definition-key" function (:arguments ("defn" "olddef" "newdef" "prefix" "keymap")) nil [33002 34667])
            ("global-map" variable nil nil [34816 34990])
            ("esc-map" variable nil nil [34992 35132])
            ("ctl-x-map" variable nil nil [35134 35269])
            ("ctl-x-4-map" variable (:default-value (make-sparse-keymap)) nil [35271 35349])
            ("defalias" code nil nil [35350 35388])
            ("define-key" code nil nil [35389 35431])
            ("ctl-x-5-map" variable (:default-value (make-sparse-keymap)) nil [35433 35505])
            ("defalias" code nil nil [35506 35544])
            ("define-key" code nil nil [35545 35587])
            ("listify-key-sequence-1" variable
               (:constant-flag t
                :default-value (logior 128 134217728))
                nil [35627 35682])
            ("listify-key-sequence" function (:arguments ("key")) nil [35684 35922])
            ("eventp" function (:arguments ("obj")) nil [35924 36125])
            ("event-modifiers" function (:arguments ("event")) nil [36127 37421])
            ("event-basic-type" function (:arguments ("event")) nil [37423 38191])
            ("mouse-movement-p" function (:arguments ("object")) nil [38193 38326])
            ("mouse-event-p" function (:arguments ("object")) nil [38328 38546])
            ("event-start" function (:arguments ("event")) nil [38548 39279])
            ("event-end" function (:arguments ("event")) nil [39281 40121])
            ("event-click-count" function (:arguments ("event")) nil [40123 40333])
            ("posnp" function (:arguments ("obj")) nil [40390 40690])
            ("posn-window" function (:arguments ("position")) nil [40724 40906])
            ("posn-area" function (:arguments ("position")) nil [40908 41232])
            ("posn-point" function (:arguments ("position")) nil [41234 41509])
            ("posn-set-point" function (:arguments ("position")) nil [41511 41831])
            ("posn-x-y" function (:arguments ("position")) nil [41833 42086])
            ("declare-function" code nil nil [42088 42154])
            ("posn-col-row" function (:arguments ("position")) nil [42156 43702])
            ("posn-actual-col-row" function (:arguments ("position")) nil [43704 44138])
            ("posn-timestamp" function (:arguments ("position")) nil [44140 44328])
            ("posn-string" function (:arguments ("position")) nil [44330 44582])
            ("posn-image" function (:arguments ("position")) nil [44584 44824])
            ("posn-object" function (:arguments ("position")) nil [44826 45195])
            ("posn-object-x-y" function (:arguments ("position")) nil [45197 45484])
            ("posn-object-width-height" function (:arguments ("position")) nil [45486 45746])
            ("define-obsolete-function-alias" code nil nil [45789 45854])
            ("define-obsolete-function-alias" code nil nil [45855 45928])
            ("define-obsolete-function-alias" code nil nil [45929 45993])
            ("define-obsolete-function-alias" code nil nil [45994 46065])
            ("define-obsolete-function-alias" code nil nil [46066 46139])
            ("define-obsolete-function-alias" code nil nil [46140 46212])
            ("make-obsolete" code nil nil [46214 46280])
            ("make-obsolete" code nil nil [46281 46330])
            ("insert-string" function (:arguments ("args")) nil [46332 46650])
            ("makehash" function (:arguments ("test")) nil [46652 46772])
            ("defalias" code nil nil [46820 46854])
            ("make-obsolete" code nil nil [46855 46909])
            ("defalias" code nil nil [46910 46946])
            ("make-obsolete" code nil nil [46947 47003])
            ("make-obsolete" code nil nil [47004 47111])
            ("make-obsolete" code nil nil [47112 47173])
            ("set-advertised-calling-convention" code nil nil [47174 47248])
            ("set-advertised-calling-convention" code nil nil [47249 47350])
            ("set-advertised-calling-convention" code nil nil [47351 47419])
            ("set-advertised-calling-convention" code nil nil [47420 47505])
            ("make-obsolete-variable" code nil nil [47910 47985])
            ("make-obsolete-variable" code nil nil [47986 48065])
            ("make-obsolete-variable" code nil nil [48066 48133])
            ("make-obsolete-variable" code nil nil [48134 48199])
            ("make-obsolete-variable" code nil nil [48200 48261])
            ("make-obsolete-variable" code nil nil [48262 48333])
            ("make-obsolete-variable" code nil nil [48334 48399])
            ("make-obsolete-variable" code nil nil [48400 48461])
            ("make-obsolete-variable" code nil nil [48462 48537])
            ("make-obsolete-variable" code nil nil [48538 48615])
            ("make-obsolete-variable" code nil nil [48616 48695])
            ("make-obsolete-variable" code nil nil [48696 48773])
            ("make-obsolete-variable" code nil nil [48774 48853])
            ("make-obsolete-variable" code nil nil [48854 48943])
            ("make-obsolete-variable" code nil nil [48944 49019])
            ("make-obsolete-variable" code nil nil [49020 49101])
            ("make-obsolete-variable" code nil nil [49102 49185])
            ("make-obsolete-variable" code nil nil [49186 49281])
            ("make-obsolete-variable" code nil nil [49282 49369])
            ("make-obsolete-variable" code nil nil [49370 49451])
            ("make-obsolete-variable" code nil nil [49452 49539])
            ("make-obsolete-variable" code nil nil [49540 49631])
            ("make-obsolete-variable" code nil nil [49632 49697])
            ("make-obsolete-variable" code nil nil [49698 49763])
            ("make-obsolete-variable" code nil nil [49764 49839])
            ("make-obsolete-variable" code nil nil [49840 49943])
            ("make-obsolete-variable" code nil nil [49944 50037])
            ("make-obsolete-variable" code nil nil [50038 50101])
            ("make-obsolete-variable" code nil nil [50102 50242])
            ("make-obsolete-variable" code nil nil [50244 50308])
            ("make-obsolete-variable" code nil nil [50309 50392])
            ("make-obsolete-variable" code nil nil [50393 50465])
            ("make-obsolete-variable" code nil nil [50466 50542])
            ("make-obsolete" code nil nil [50543 50599])
            ("make-obsolete" code nil nil [50600 50660])
            ("make-obsolete" code nil nil [50662 50716])
            ("make-obsolete" code nil nil [50717 50773])
            ("define-obsolete-variable-alias" code nil nil [50812 50899])
            ("define-obsolete-variable-alias" code nil nil [50901 50994])
            ("define-obsolete-variable-alias" code nil nil [50995 51088])
            ("make-obsolete-variable" code nil nil [51334 51398])
            ("defvaralias" code nil nil [51400 51457])
            ("defalias" code nil nil [51530 51574])
            ("defalias" code nil nil [51575 51619])
            ("defalias" code nil nil [51620 51653])
            ("defalias" code nil nil [51654 51687])
            ("defalias" code nil nil [51688 51723])
            ("defalias" code nil nil [51724 51750])
            ("defalias" code nil nil [51751 51777])
            ("defalias" code nil nil [51778 51800])
            ("defalias" code nil nil [51826 51865])
            ("defalias" code nil nil [51866 51920])
            ("defalias" code nil nil [51921 51991])
            ("defalias" code nil nil [51992 52064])
            ("defalias" code nil nil [52065 52108])
            ("defalias" code nil nil [52109 52153])
            ("defalias" code nil nil [52154 52187])
            ("defalias" code nil nil [52188 52221])
            ("defalias" code nil nil [52253 52296])
            ("defalias" code nil nil [52297 52346])
            ("defalias" code nil nil [52348 52401])
            ("add-hook" function (:arguments ("hook" "function" "append" "local")) nil [52440 54576])
            ("remove-hook" function (:arguments ("hook" "function" "local")) nil [54578 56246])
            ("letrec" function (:arguments ("binders" "body")) nil [56248 56877])
            ("with-wrapper-hook" function (:arguments ("hook" "args" "body")) nil [56879 59822])
            ("add-to-list" function (:arguments ("list-var" "element" "append" "compare-fn")) nil [59824 61127])
            ("add-to-ordered-list" function (:arguments ("list-var" "element" "order")) nil [61130 62449])
            ("add-to-history" function (:arguments ("history-var" "newelt" "maxelt" "keep-all")) nil [62451 63663])
            ("delay-mode-hooks" variable nil nil [63685 63779])
            ("delayed-mode-hooks" variable nil nil [63780 63861])
            ("make-variable-buffer-local" code nil nil [63862 63910])
            ("put" code nil nil [63911 63953])
            ("change-major-mode-after-body-hook" variable nil nil [63955 64069])
            ("after-change-major-mode-hook" variable nil nil [64071 64173])
            ("run-mode-hooks" function (:arguments ("hooks")) nil [64175 65058])
            ("delay-mode-hooks" function (:arguments ("body")) nil [65060 65461])
            ("derived-mode-p" function (:arguments ("modes")) nil [65522 65835])
            ("minor-mode-list" variable (:default-value (quote (auto-save-mode auto-fill-mode abbrev-mode overwrite-mode view-mode hs-minor-mode))) nil [66026 66219])
            ("add-minor-mode" function (:arguments ("toggle" "name" "keymap" "after" "toggle-fun")) nil [66221 68906])
            ("autoloadp" function (:arguments ("object")) nil [68927 69029])
            ("symbol-file" function (:arguments ("symbol" "type")) nil [69513 70737])
            ("locate-library" function
               (:user-visible-flag t
                :arguments ("library" "nosuffix" "path" "interactive-call"))
                nil [70739 72145])
            ("load-history-regexp" function (:arguments ("file")) nil [72186 72822])
            ("load-history-filename-element" function (:arguments ("file-regexp")) nil [72824 73260])
            ("put" code nil nil [73262 73308])
            ("eval-after-load" function (:arguments ("file" "form")) nil [73309 76250])
            ("after-load-functions" variable nil nil [76252 76425])
            ("do-after-load-evaluation" function (:arguments ("abs-file")) nil [76427 77427])
            ("eval-next-after-load" function (:arguments ("file")) nil [77429 77729])
            ("display-delayed-warnings" function nil nil [77731 77998])
            ("collapse-delayed-warnings" function nil nil [78000 78679])
            ("delayed-warnings-hook" variable (:default-value (quote (collapse-delayed-warnings display-delayed-warnings))) nil [78809 79149])
            ("process-lines" function (:arguments ("program" "args")) nil [79174 79779])
            ("process-live-p" function (:arguments ("process")) nil [79781 80021])
            ("make-obsolete" code nil nil [80041 80166])
            ("process-kill-without-query" function (:arguments ("process" "_flag")) nil [80167 80511])
            ("process-kill-buffer-query-function" function nil nil [80513 80932])
            ("add-hook" code nil nil [80934 81009])
            ("process-get" function (:arguments ("process" "propname")) nil [81040 81252])
            ("process-put" function (:arguments ("process" "propname" "value")) nil [81254 81493])
            ("read-quoted-char-radix" variable (:default-value 8) nil [81533 81678])
            ("custom-declare-variable-early" code nil nil [81680 81923])
            ("read-key-empty-map" variable
               (:constant-flag t
                :default-value (make-sparse-keymap))
                nil [81925 81975])
            ("read-key-delay" variable (:default-value 0.01) nil [81977 82005])
            ("read-key" function (:arguments ("prompt")) nil [82054 84760])
            ("read-quoted-char" function (:arguments ("prompt")) nil [84762 87357])
            ("read-passwd-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "" (function delete-minibuffer-contents)) map)) nil [87359 87696])
            ("read-passwd" function (:arguments ("prompt" "confirm" "default")) nil [87698 90154])
            ("read-number" function (:arguments ("prompt" "default")) nil [90218 91240])
            ("read-char-choice" function (:arguments ("prompt" "chars" "inhibit-keyboard-quit")) nil [91242 92981])
            ("sit-for" function (:arguments ("seconds" "nodisp" "obsolete")) nil [92983 94490])
            ("set-advertised-calling-convention" code nil nil [94491 94570])
            ("y-or-n-p" function (:arguments ("prompt")) nil [94572 98231])
            ("atomic-change-group" function (:arguments ("body")) nil [98262 99468])
            ("prepare-change-group" function (:arguments ("buffer")) nil [99470 100946])
            ("activate-change-group" function (:arguments ("handle")) nil [100948 101186])
            ("accept-change-group" function (:arguments ("handle")) nil [101188 101479])
            ("cancel-change-group" function (:arguments ("handle")) nil [101481 102652])
            ("define-obsolete-function-alias" code nil nil [102710 102792])
            ("force-mode-line-update" function (:arguments ("all")) nil [102794 103168])
            ("momentary-string-display" function (:arguments ("string" "pos" "exit-char" "message")) nil [103170 104623])
            ("copy-overlay" function (:arguments ("o")) nil [104652 105226])
            ("remove-overlays" function (:arguments ("beg" "end" "name" "val")) nil [105228 106236])
            ("suspend-hook" variable nil nil [106258 106342])
            ("suspend-resume-hook" variable nil nil [106344 106442])
            ("temp-buffer-show-hook" variable nil nil [106444 106660])
            ("temp-buffer-setup-hook" variable nil nil [106662 106893])
            ("defvar-local" code nil nil [106895 107234])
            ("put" code nil nil [107343 107396])
            ("put" code nil nil [107397 107468])
            ("user-emacs-directory" variable
               (:constant-flag t
                :default-value (if (eq system-type (quote ms-dos)) "~/_emacs.d/" "~/.emacs.d/"))
                nil [107470 107845])
            ("locate-user-emacs-file" function (:arguments ("new-name" "old-name")) nil [107847 108839])
            ("buffer-narrowed-p" function nil nil [108872 109006])
            ("find-tag-default" function nil nil [109008 109958])
            ("play-sound" function (:arguments ("sound")) nil [109960 110779])
            ("declare-function" code nil nil [110781 110837])
            ("shell-quote-argument" function (:arguments ("argument")) nil [110839 112984])
            ("string-or-null-p" function (:arguments ("object")) nil [112986 113123])
            ("booleanp" function (:arguments ("object")) nil [113125 113283])
            ("field-at-pos" function (:arguments ("pos")) nil [113285 113555])
            ("sha1" function (:arguments ("object" "start" "end" "binary")) nil [113557 113920])
            ("function-get" function (:arguments ("f" "prop" "autoload")) nil [113922 114732])
            ("yank-handled-properties" variable nil nil [114782 114814])
            ("yank-excluded-properties" variable nil nil [114815 114848])
            ("remove-yank-excluded-properties" function (:arguments ("start" "end")) nil [114850 115639])
            ("yank-undo-function" variable nil nil [115641 115668])
            ("insert-for-yank" function (:arguments ("string")) nil [115670 116029])
            ("insert-for-yank-1" function (:arguments ("string")) nil [116031 118381])
            ("insert-buffer-substring-no-properties" function (:arguments ("buffer" "start" "end")) nil [118383 118868])
            ("insert-buffer-substring-as-yank" function (:arguments ("buffer" "start" "end")) nil [118870 119556])
            ("yank-handle-font-lock-face-property" function (:arguments ("face" "start" "end")) nil [119558 119870])
            ("yank-handle-category-property" function (:arguments ("category" "start" "end")) nil [120009 120447])
            ("start-process-shell-command" function (:arguments ("name" "buffer" "args")) nil [120485 121398])
            ("set-advertised-calling-convention" code nil nil [121399 121528])
            ("start-file-process-shell-command" function (:arguments ("name" "buffer" "args")) nil [121530 121949])
            ("set-advertised-calling-convention" code nil nil [121950 122084])
            ("call-process-shell-command" function (:arguments ("command" "infile" "buffer" "display" "args")) nil [122086 123531])
            ("process-file-shell-command" function (:arguments ("command" "infile" "buffer" "display" "args")) nil [123533 123977])
            ("with-current-buffer" function (:arguments ("buffer-or-name" "body")) nil [124032 124420])
            ("internal--before-with-selected-window" function (:arguments ("window")) nil [124422 124942])
            ("internal--after-with-selected-window" function (:arguments ("state")) nil [124944 125504])
            ("with-selected-window" function (:arguments ("window" "body")) nil [125506 126644])
            ("with-selected-frame" function (:arguments ("frame" "body")) nil [126646 127387])
            ("save-window-excursion" function (:arguments ("body")) nil [127389 128208])
            ("internal-temp-output-buffer-show" function (:arguments ("buffer")) nil [128210 129605])
            ("with-output-to-temp-buffer" function (:arguments ("bufname" "body")) nil [129658 131858])
            ("with-temp-file" function (:arguments ("file" "body")) nil [131860 132555])
            ("with-temp-message" function (:arguments ("message" "body")) nil [132557 133484])
            ("with-temp-buffer" function (:arguments ("body")) nil [133486 134045])
            ("with-silent-modifications" function (:arguments ("body")) nil [134047 135243])
            ("with-output-to-string" function (:arguments ("body")) nil [135245 135690])
            ("with-local-quit" function (:arguments ("body")) nil [135692 136447])
            ("while-no-input" function (:arguments ("body")) nil [136449 136949])
            ("condition-case-unless-debug" function (:arguments ("var" "bodyform" "handlers")) nil [136951 137456])
            ("define-obsolete-function-alias" code nil nil [137458 137553])
            ("with-demoted-errors" function (:arguments ("body")) nil [137555 138051])
            ("combine-after-change-calls" function (:arguments ("body")) nil [138053 138748])
            ("with-case-table" function (:arguments ("table" "body")) nil [138750 139271])
            ("save-match-data-internal" variable nil nil [139304 139337])
            ("save-match-data" function (:arguments ("body")) nil [139595 140275])
            ("match-string" function (:arguments ("num" "string")) nil [140277 140922])
            ("match-string-no-properties" function (:arguments ("num" "string")) nil [140924 141648])
            ("match-substitute-replacement" function (:arguments ("replacement" "fixedcase" "literal" "string" "subexp")) nil [141651 142300])
            ("looking-back" function (:arguments ("regexp" "limit" "greedy")) nil [142303 143387])
            ("looking-at-p" function (:arguments ("regexp")) nil [143389 143567])
            ("string-match-p" function (:arguments ("regexp" "string" "start")) nil [143569 143789])
            ("subregexp-context-p" function (:arguments ("regexp" "pos" "start")) nil [143791 145701])
            ("split-string-default-separators" variable
               (:constant-flag t
                :default-value "[ 	
]+")
                nil [145723 146076])
            ("split-string" function (:arguments ("string" "separators" "omit-nulls")) nil [146338 148239])
            ("combine-and-quote-strings" function (:arguments ("strings" "separator")) nil [148241 148802])
            ("split-string-and-unquote" function (:arguments ("string" "separator")) nil [148804 149440])
            ("subst-char-in-string" function (:arguments ("fromchar" "tochar" "string" "inplace")) nil [149474 149878])
            ("replace-regexp-in-string" function (:arguments ("regexp" "rep" "string" "fixedcase" "literal" "subexp" "start")) nil [149880 152459])
            ("string-prefix-p" function (:arguments ("str1" "str2" "ignore-case")) nil [152462 152761])
            ("bidi-string-mark-left-to-right" function (:arguments ("str")) nil [152763 153546])
            ("add-to-invisibility-spec" function (:arguments ("element")) nil [153574 153917])
            ("remove-from-invisibility-spec" function (:arguments ("element")) nil [153919 154143])
            ("with-syntax-table" function (:arguments ("table" "body")) nil [154167 154803])
            ("make-syntax-table" function (:arguments ("oldtable")) nil [154805 155125])
            ("syntax-after" function (:arguments ("pos")) nil [155127 155500])
            ("syntax-class" function (:arguments ("syntax")) nil [155502 155854])
            ("text-clone-maintain" function (:arguments ("ol1" "after" "beg" "end" "_len")) nil [155875 157905])
            ("text-clone-create" function (:arguments ("start" "end" "spreadp" "syntax")) nil [157907 160094])
            ("define-mail-user-agent" function (:arguments ("symbol" "composefunc" "sendfunc" "abortfunc" "hookvar")) nil [160202 161780])
            ("set-temporary-overlay-map" function (:arguments ("map" "keep-pred")) nil [161783 163454])
            ("progress-reporter-update" function (:arguments ("reporter" "value")) nil [164037 164804])
            ("make-progress-reporter" function (:arguments ("message" "min-value" "max-value" "current-value" "min-change" "min-time")) nil [164806 166651])
            ("progress-reporter-force-update" function (:arguments ("reporter" "value" "new-message")) nil [166653 167152])
            ("progress-reporter--pulse-characters" variable (:default-value ["-" "\\" "|" "/"]) nil [167154 167271])
            ("progress-reporter-do-update" function (:arguments ("reporter" "value")) nil [167273 168979])
            ("progress-reporter-done" function (:arguments ("reporter")) nil [168981 169136])
            ("dotimes-with-progress-reporter" function (:arguments ("spec" "message" "body")) nil [169138 170242])
            ("version-separator" variable
               (:constant-flag t
                :default-value ".")
                nil [170279 170438])
            ("version-regexp-alist" variable
               (:constant-flag t
                :default-value (quote (("^[-_+ ]?alpha$" . -3) ("^[-_+]$" . -3) ("^[-_+ ]cvs$" . -3) ("^[-_+ ]?beta$" . -2) ("^[-_+ ]?\\(pre\\|rcc\\)$" . -1))))
                nil [170441 171666])
            ("version-to-list" function (:arguments ("ver")) nil [171669 174007])
            ("version-list-<" function (:arguments ("l1" "l2")) nil [174010 174841])
            ("version-list-=" function (:arguments ("l1" "l2")) nil [174844 175643])
            ("version-list-<=" function (:arguments ("l1" "l2")) nil [175646 176431])
            ("version-list-not-zero" function (:arguments ("lst")) nil [176433 176743])
            ("version<" function (:arguments ("v1" "v2")) nil [176746 177202])
            ("version<=" function (:arguments ("v1" "v2")) nil [177205 177675])
            ("version=" function (:arguments ("v1" "v2")) nil [177677 178123])
            ("menu-bar-separator" variable
               (:constant-flag t
                :default-value (quote ("--")))
                nil [178137 178199])
            ("when" code nil nil [178361 178486]))          
    :file "subr.el"
    :pointmax 178510
    :fsize 178510
    :lastmodtime '(20806 7945 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "files.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("font-lock-keywords" variable nil nil [1074 1101])
            ("backup" customgroup (:user-visible-flag t) nil [1103 1174])
            ("find-file" customgroup (:user-visible-flag t) nil [1176 1235])
            ("delete-auto-save-files" variable (:default-value t) nil [1238 1488])
            ("directory-abbrev-alist" variable nil nil [1490 2455])
            ("make-backup-files" variable (:default-value t) nil [2457 3380])
            ("backup-inhibited" variable nil nil [3481 3694])
            ("put" code nil nil [3695 3737])
            ("backup-by-copying" variable nil nil [3739 3917])
            ("backup-by-copying-when-linked" variable nil nil [3919 4212])
            ("backup-by-copying-when-mismatch" variable (:default-value t) nil [4214 4702])
            ("put" code nil nil [4703 4760])
            ("backup-by-copying-when-privileged-mismatch" variable (:default-value 200) nil [4762 5385])
            ("backup-enable-predicate" variable (:default-value (quote normal-backup-enable-predicate)) nil [5387 5606])
            ("buffer-offer-save" variable nil nil [5608 5827])
            ("make-variable-buffer-local" code nil nil [5828 5875])
            ("put" code nil nil [5876 5919])
            ("find-file-existing-other-name" variable (:default-value t) nil [5921 6214])
            ("find-file-visit-truename" variable nil nil [6216 6469])
            ("put" code nil nil [6470 6532])
            ("revert-without-query" variable nil nil [6534 6899])
            ("buffer-file-number" variable nil nil [6901 7170])
            ("make-variable-buffer-local" code nil nil [7171 7219])
            ("put" code nil nil [7220 7264])
            ("buffer-file-numbers-unique" variable (:default-value (not (memq system-type (quote (windows-nt))))) nil [7266 7411])
            ("buffer-file-read-only" variable nil nil [7413 7503])
            ("make-variable-buffer-local" code nil nil [7504 7555])
            ("small-temporary-file-directory" variable (:default-value (if (eq system-type (quote ms-dos)) (getenv "TMPDIR"))) nil [7557 8001])
            ("null-device" variable (:default-value (purecopy "/dev/null")) nil [8069 8138])
            ("declare-function" code nil nil [8140 8190])
            ("declare-function" code nil nil [8191 8240])
            ("declare-function" code nil nil [8241 8327])
            ("declare-function" code nil nil [8328 8373])
            ("declare-function" code nil nil [8374 8446])
            ("declare-function" code nil nil [8447 8503])
            ("declare-function" code nil nil [8504 8550])
            ("declare-function" code nil nil [8551 8610])
            ("file-name-invalid-regexp" variable (:default-value (cond ((and (eq system-type (quote ms-dos)) (not (msdos-long-file-names))) (purecopy (concat "^\\([^A-Z[-`a-z]\\|..+\\)?:\\|" "[+, ;=|<>\"?*]\\|\\[\\|\\]\\|" "[ -]\\|" "\\(/\\.\\.?[^/]\\)\\|" "\\(/[^/.]+\\.[^/.]*\\.\\)"))) ((memq system-type (quote (ms-dos windows-nt cygwin))) (purecopy (concat "^\\([^A-Z[-`a-z]\\|..+\\)?:\\|" "[|<>\"?* -]"))) (t (purecopy "[ ]")))) nil [8612 9285])
            ("file-precious-flag" variable nil nil [9287 10127])
            ("break-hardlink-on-save" variable nil nil [10129 10826])
            ("version-control" variable nil nil [10828 11198])
            ("put" code nil nil [11199 11295])
            ("dired-kept-versions" variable (:default-value 2) nil [11297 11437])
            ("delete-old-versions" variable nil nil [11439 11705])
            ("kept-old-versions" variable (:default-value 2) nil [11707 11846])
            ("put" code nil nil [11847 11902])
            ("kept-new-versions" variable (:default-value 2) nil [11904 12081])
            ("put" code nil nil [12082 12137])
            ("require-final-newline" variable nil nil [12139 12892])
            ("mode-require-final-newline" variable (:default-value t) nil [12894 14029])
            ("auto-save-default" variable (:default-value t) nil [14031 14173])
            ("auto-save-file-name-transforms" variable (:default-value (\` (("\\`/[^/]*:\\([^/]*/\\)*\\([^/]*\\)\\'" (\, (concat temporary-file-directory "\\2")) t)))) nil [14175 15603])
            ("save-abbrevs" variable (:default-value t) nil [15605 15816])
            ("find-file-run-dired" variable (:default-value t) nil [15818 16015])
            ("find-directory-functions" variable (:default-value (quote (cvs-dired-noselect dired-noselect))) nil [16017 16345])
            ("file-name-at-point-functions" variable (:default-value (quote (ffap-guess-file-name-at-point))) nil [16406 16734])
            ("define-obsolete-variable-alias" code nil nil [16842 16943])
            ("find-file-not-found-functions" variable nil nil [16944 17245])
            ("define-obsolete-variable-alias" code nil nil [17343 17415])
            ("find-file-hook" variable nil nil [17416 17693])
            ("define-obsolete-variable-alias" code nil nil [17695 17774])
            ("write-file-functions" variable nil nil [17775 18556])
            ("put" code nil nil [18557 18603])
            ("local-write-file-hooks" variable nil nil [18605 18640])
            ("make-variable-buffer-local" code nil nil [18641 18693])
            ("put" code nil nil [18694 18742])
            ("make-obsolete-variable" code nil nil [18743 18820])
            ("define-obsolete-variable-alias" code nil nil [18822 18913])
            ("write-contents-functions" variable nil nil [18914 19670])
            ("make-variable-buffer-local" code nil nil [19671 19725])
            ("enable-local-variables" variable (:default-value t) nil [19727 20979])
            ("local-enable-local-variables" variable (:default-value t) nil [22342 22727])
            ("enable-local-eval" variable (:default-value (quote maybe)) nil [22729 23120])
            ("or" code nil nil [23185 23248])
            ("or" code nil nil [23249 23316])
            ("or" code nil nil [23317 23384])
            ("view-read-only" variable nil nil [23386 23738])
            ("file-name-history" variable nil nil [23740 23923])
            ("put" code nil nil [23926 23980])
            ("ange-ftp-completion-hook-function" function (:arguments ("op" "args")) nil [23981 24587])
            ("declare-function" code nil nil [24589 24661])
            ("declare-function" code nil nil [24662 24734])
            ("convert-standard-filename" function (:arguments ("filename")) nil [24736 25989])
            ("read-directory-name" function (:arguments ("prompt" "dir" "default-dirname" "mustmatch" "initial")) nil [25991 27112])
            ("pwd" function (:user-visible-flag t) nil [27116 27235])
            ("cd-path" variable nil nil [27237 27367])
            ("parse-colon-path" function (:arguments ("search-path")) nil [27369 27988])
            ("cd-absolute" function (:arguments ("dir")) nil [27990 28885])
            ("cd" function
               (:user-visible-flag t
                :arguments ("dir"))
                nil [28887 30777])
            ("load-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [30779 31090])
            ("locate-file" function (:arguments ("filename" "path" "suffixes" "predicate")) nil [31092 32490])
            ("locate-file-completion-table" function (:arguments ("dirs" "suffixes" "string" "pred" "action")) nil [32492 35454])
            ("locate-file-completion" function (:arguments ("string" "path-and-suffixes" "action")) nil [35456 35864])
            ("locate-dominating-stop-dir-regexp" variable (:default-value (purecopy "\\`\\(?:[\\/][\\/][^\\/]+[\\/]\\|/\\(?:net\\|afs\\|\\.\\.\\.\\)/\\)\\'")) nil [35866 36470])
            ("locate-dominating-file" function (:arguments ("file" "name")) nil [38023 40212])
            ("executable-find" function (:arguments ("command")) nil [40215 40523])
            ("load-library" function
               (:user-visible-flag t
                :arguments ("library"))
                nil [40525 41122])
            ("file-remote-p" function (:arguments ("file" "identification" "connected")) nil [41124 42878])
            ("remote-shell-program" variable (:default-value (purecopy (let ((list (quote ("ssh" "remsh" "rcmd" "rsh")))) (while (and list (not (executable-find (car list))) (setq list (cdr list)))) (or (car list) "ssh")))) nil [43177 43896])
            ("remote-file-name-inhibit-cache" variable (:default-value 10) nil [43898 45123])
            ("file-local-copy" function (:arguments ("file")) nil [45125 45514])
            ("file-truename" function (:arguments ("filename" "counter" "prev-dirs")) nil [45516 50407])
            ("file-chase-links" function (:arguments ("filename" "limit")) nil [50409 51812])
            ("file-size-human-readable" function (:arguments ("file-size" "flavor")) nil [51944 53061])
            ("make-temp-file" function (:arguments ("prefix" "dir-flag" "suffix")) nil [53063 54654])
            ("recode-file-name" function
               (:user-visible-flag t
                :arguments ("file" "coding" "new-coding" "ok-if-already-exists"))
                nil [54656 56893])
            ("confirm-nonexistent-file-or-buffer" variable (:default-value (quote after-completion)) nil [56896 57509])
            ("confirm-nonexistent-file-or-buffer" function nil nil [57511 57952])
            ("minibuffer-with-setup-hook" function (:arguments ("fun" "body")) nil [57954 58780])
            ("find-file-read-args" function (:arguments ("prompt" "mustmatch")) nil [58782 58896])
            ("find-file" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [58898 60142])
            ("find-file-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [60144 61074])
            ("find-file-other-frame" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [61076 62000])
            ("find-file-existing" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [62002 62437])
            ("find-file--read-only" function (:arguments ("fun" "filename" "wildcards")) nil [62439 62866])
            ("find-file-read-only" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [62868 63251])
            ("find-file-read-only-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [63253 63706])
            ("find-file-read-only-other-frame" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [63708 64156])
            ("find-alternate-file-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [64158 65107])
            ("kill-buffer-hook" variable nil nil [65168 65316])
            ("find-alternate-file" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [65318 68287])
            ("create-file-buffer" function (:arguments ("filename")) nil [68290 68832])
            ("generate-new-buffer" function (:arguments ("name")) nil [68834 69039])
            ("automount-dir-prefix" variable (:default-value (purecopy "^/tmp_mnt/")) nil [69041 69193])
            ("make-obsolete-variable" code nil nil [69194 69271])
            ("abbreviated-home-dir" variable nil nil [69273 69380])
            ("abbreviate-file-name" function (:arguments ("filename")) nil [69382 71733])
            ("find-buffer-visiting" function (:arguments ("filename" "predicate")) nil [71735 73662])
            ("find-file-wildcards" variable (:default-value t) nil [73665 73912])
            ("find-file-suppress-same-file-warnings" variable nil nil [73914 74240])
            ("large-file-warning-threshold" variable (:default-value 10000000) nil [74242 74521])
            ("abort-if-file-too-large" function (:arguments ("size" "op-type" "filename")) nil [74523 75010])
            ("find-file-noselect" function (:arguments ("filename" "nowarn" "rawfile" "wildcards")) nil [75012 81971])
            ("find-file-noselect-1" function (:arguments ("buf" "filename" "nowarn" "rawfile" "truename" "number")) nil [81973 84509])
            ("file-name-buffer-file-type-alist" variable nil nil [84512 84553])
            ("insert-file-contents-literally" function (:arguments ("filename" "visit" "beg" "end" "replace")) nil [84573 85573])
            ("insert-file-1" function (:arguments ("filename" "insert-func")) nil [85575 86272])
            ("insert-file-literally" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [86274 86695])
            ("find-file-literally" variable nil nil [86697 86904])
            ("put" code nil nil [86905 86950])
            ("find-file-literally" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [86952 88046])
            ("after-find-file" function (:arguments ("error" "warn" "noauto" "_after-find-file-from-revert-buffer" "nomodes")) nil [88049 91394])
            ("report-errors" function (:arguments ("format" "body")) nil [91396 91876])
            ("normal-mode" function
               (:user-visible-flag t
                :arguments ("find-file"))
                nil [91878 93529])
            ("auto-mode-case-fold" variable (:default-value t) nil [93531 93969])
            ("auto-mode-alist" variable (:default-value (mapcar (lambda (elt) (cons (purecopy (car elt)) (cdr elt))) (\` (("\\.[sx]?html?\\(\\.[a-zA-Z_]+\\)?\\'" . html-mode) ("\\.svgz?\\'" . image-mode) ("\\.svgz?\\'" . xml-mode) ("\\.x[bp]m\\'" . image-mode) ("\\.x[bp]m\\'" . c-mode) ("\\.p[bpgn]m\\'" . image-mode) ("\\.tiff?\\'" . image-mode) ("\\.gif\\'" . image-mode) ("\\.png\\'" . image-mode) ("\\.jpe?g\\'" . image-mode) ("\\.te?xt\\'" . text-mode) ("\\.[tT]e[xX]\\'" . tex-mode) ("\\.ins\\'" . tex-mode) ("\\.ltx\\'" . latex-mode) ("\\.dtx\\'" . doctex-mode) ("\\.org\\'" . org-mode) ("\\.el\\'" . emacs-lisp-mode) ("Project\\.ede\\'" . emacs-lisp-mode) ("\\.\\(scm\\|stk\\|ss\\|sch\\)\\'" . scheme-mode) ("\\.l\\'" . lisp-mode) ("\\.li?sp\\'" . lisp-mode) ("\\.[fF]\\'" . fortran-mode) ("\\.for\\'" . fortran-mode) ("\\.p\\'" . pascal-mode) ("\\.pas\\'" . pascal-mode) ("\\.\\(dpr\\|DPR\\)\\'" . delphi-mode) ("\\.ad[abs]\\'" . ada-mode) ("\\.ad[bs].dg\\'" . ada-mode) ("\\.\\([pP]\\([Llm]\\|erl\\|od\\)\\|al\\)\\'" . perl-mode) ("Imakefile\\'" . makefile-imake-mode) ("Makeppfile\\(?:\\.mk\\)?\\'" . makefile-makepp-mode) ("\\.makepp\\'" . makefile-makepp-mode) (\,@ (if (memq system-type (quote (berkeley-unix darwin))) (quote (("\\.mk\\'" . makefile-bsdmake-mode) ("\\.make\\'" . makefile-bsdmake-mode) ("GNUmakefile\\'" . makefile-gmake-mode) ("[Mm]akefile\\'" . makefile-bsdmake-mode))) (quote (("\\.mk\\'" . makefile-gmake-mode) ("\\.make\\'" . makefile-gmake-mode) ("[Mm]akefile\\'" . makefile-gmake-mode))))) ("\\.am\\'" . makefile-automake-mode) ("\\.texinfo\\'" . texinfo-mode) ("\\.te?xi\\'" . texinfo-mode) ("\\.[sS]\\'" . asm-mode) ("\\.asm\\'" . asm-mode) ("\\.css\\'" . css-mode) ("\\.mixal\\'" . mixal-mode) ("\\.gcov\\'" . compilation-mode) ("/\\.[a-z0-9-]*gdbinit" . gdb-script-mode) ("[cC]hange\\.?[lL]og?\\'" . change-log-mode) ("[cC]hange[lL]og[-.][0-9]+\\'" . change-log-mode) ("\\$CHANGE_LOG\\$\\.TXT" . change-log-mode) ("\\.scm\\.[0-9]*\\'" . scheme-mode) ("\\.[ck]?sh\\'\\|\\.shar\\'\\|/\\.z?profile\\'" . sh-mode) ("\\.bash\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\(bash_profile\\|z?login\\|bash_login\\|z?logout\\)\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\(bash_logout\\|shrc\\|[kz]shrc\\|bashrc\\|t?cshrc\\|esrc\\)\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\([kz]shenv\\|xinitrc\\|startxrc\\|xsession\\)\\'" . sh-mode) ("\\.m?spec\\'" . sh-mode) ("\\.m[mes]\\'" . nroff-mode) ("\\.man\\'" . nroff-mode) ("\\.sty\\'" . latex-mode) ("\\.cl[so]\\'" . latex-mode) ("\\.bbl\\'" . latex-mode) ("\\.bib\\'" . bibtex-mode) ("\\.bst\\'" . bibtex-style-mode) ("\\.sql\\'" . sql-mode) ("\\.m[4c]\\'" . m4-mode) ("\\.mf\\'" . metafont-mode) ("\\.mp\\'" . metapost-mode) ("\\.vhdl?\\'" . vhdl-mode) ("\\.article\\'" . text-mode) ("\\.letter\\'" . text-mode) ("\\.i?tcl\\'" . tcl-mode) ("\\.exp\\'" . tcl-mode) ("\\.itk\\'" . tcl-mode) ("\\.icn\\'" . icon-mode) ("\\.sim\\'" . simula-mode) ("\\.mss\\'" . scribe-mode) ("\\.f9[05]\\'" . f90-mode) ("\\.f0[38]\\'" . f90-mode) ("\\.indent\\.pro\\'" . fundamental-mode) ("\\.\\(pro\\|PRO\\)\\'" . idlwave-mode) ("\\.srt\\'" . srecode-template-mode) ("\\.prolog\\'" . prolog-mode) ("\\.tar\\'" . tar-mode) ("\\.\\(arc\\|zip\\|lzh\\|lha\\|zoo\\|[jew]ar\\|xpi\\|rar\\|7z\\|ARC\\|ZIP\\|LZH\\|LHA\\|ZOO\\|[JEW]AR\\|XPI\\|RAR\\|7Z\\)\\'" . archive-mode) ("\\.\\(sx[dmicw]\\|od[fgpst]\\|oxt\\)\\'" . archive-mode) ("\\.\\(deb\\|[oi]pk\\)\\'" . archive-mode) ("\\`/tmp/Re" . text-mode) ("/Message[0-9]*\\'" . text-mode) ("\\`/tmp/fol/" . text-mode) ("\\.oak\\'" . scheme-mode) ("\\.sgml?\\'" . sgml-mode) ("\\.x[ms]l\\'" . xml-mode) ("\\.dbk\\'" . xml-mode) ("\\.dtd\\'" . sgml-mode) ("\\.ds\\(ss\\)?l\\'" . dsssl-mode) ("\\.js\\'" . javascript-mode) ("\\.json\\'" . javascript-mode) ("\\.[ds]?vh?\\'" . verilog-mode) ("\\.by\\'" . bovine-grammar-mode) ("\\.wy\\'" . wisent-grammar-mode) ("[]>:/\\]\\..*\\(emacs\\|gnus\\|viper\\)\\'" . emacs-lisp-mode) ("\\`\\..*emacs\\'" . emacs-lisp-mode) ("[:/]_emacs\\'" . emacs-lisp-mode) ("/crontab\\.X*[0-9]+\\'" . shell-script-mode) ("\\.ml\\'" . lisp-mode) ("\\.ld[si]?\\'" . ld-script-mode) ("ld\\.?script\\'" . ld-script-mode) ("\\.xs\\'" . c-mode) ("\\.x[abdsru]?[cnw]?\\'" . ld-script-mode) ("\\.zone\\'" . dns-mode) ("\\.soa\\'" . dns-mode) ("\\.asd\\'" . lisp-mode) ("\\.\\(asn\\|mib\\|smi\\)\\'" . snmp-mode) ("\\.\\(as\\|mi\\|sm\\)2\\'" . snmpv2-mode) ("\\.\\(diffs?\\|patch\\|rej\\)\\'" . diff-mode) ("\\.\\(dif\\|pat\\)\\'" . diff-mode) ("\\.[eE]?[pP][sS]\\'" . ps-mode) ("\\.\\(?:PDF\\|DVI\\|OD[FGPST]\\|DOCX?\\|XLSX?\\|PPTX?\\|pdf\\|dvi\\|od[fgpst]\\|docx?\\|xlsx?\\|pptx?\\)\\'" . doc-view-mode-maybe) ("configure\\.\\(ac\\|in\\)\\'" . autoconf-mode) ("\\.s\\(v\\|iv\\|ieve\\)\\'" . sieve-mode) ("BROWSE\\'" . ebrowse-tree-mode) ("\\.ebrowse\\'" . ebrowse-tree-mode) ("#\\*mail\\*" . mail-mode) ("\\.g\\'" . antlr-mode) ("\\.mod\\'" . m2-mode) ("\\.ses\\'" . ses-mode) ("\\.docbook\\'" . sgml-mode) ("\\.com\\'" . dcl-mode) ("/config\\.\\(?:bat\\|log\\)\\'" . fundamental-mode) ("\\.\\(?:[iI][nN][iI]\\|[lL][sS][tT]\\|[rR][eE][gG]\\|[sS][yY][sS]\\)\\'" . conf-mode) ("\\.\\(?:desktop\\|la\\)\\'" . conf-unix-mode) ("\\.ppd\\'" . conf-ppd-mode) ("java.+\\.conf\\'" . conf-javaprop-mode) ("\\.properties\\(?:\\.[a-zA-Z0-9._-]+\\)?\\'" . conf-javaprop-mode) ("\\`/etc/\\(?:DIR_COLORS\\|ethers\\|.?fstab\\|.*hosts\\|lesskey\\|login\\.?de\\(?:fs\\|vperm\\)\\|magic\\|mtab\\|pam\\.d/.*\\|permissions\\(?:\\.d/.+\\)?\\|protocols\\|rpc\\|services\\)\\'" . conf-space-mode) ("\\`/etc/\\(?:acpid?/.+\\|aliases\\(?:\\.d/.+\\)?\\|default/.+\\|group-?\\|hosts\\..+\\|inittab\\|ksysguarddrc\\|opera6rc\\|passwd-?\\|shadow-?\\|sysconfig/.+\\)\\'" . conf-mode) ("[cC]hange[lL]og[-.][-0-9a-z]+\\'" . change-log-mode) ("/\\.?\\(?:gnokiirc\\|kde.*rc\\|mime\\.types\\|wgetrc\\)\\'" . conf-mode) ("/\\.\\(?:enigma\\|gltron\\|gtk\\|hxplayer\\|net\\|neverball\\|qt/.+\\|realplayer\\|scummvm\\|sversion\\|sylpheed/.+\\|xmp\\)rc\\'" . conf-mode) ("/\\.\\(?:gdbtkinit\\|grip\\|orbital/.+txt\\|rhosts\\|tuxracer/options\\)\\'" . conf-mode) ("/\\.?X\\(?:default\\|resource\\|re\\)s\\>" . conf-xdefaults-mode) ("/X11.+app-defaults/" . conf-xdefaults-mode) ("/X11.+locale/.+/Compose\\'" . conf-colon-mode) ("/X11.+locale/compose\\.dir\\'" . conf-javaprop-mode) ("\\.~?[0-9]+\\.[0-9][-.0-9]*~?\\'" nil t) ("\\.\\(?:orig\\|in\\|[bB][aA][kK]\\)\\'" nil t) ("[/.]c\\(?:on\\)?f\\(?:i?g\\)?\\(?:\\.[a-zA-Z0-9._-]+\\)?\\'" . conf-mode-maybe) ("\\.[1-9]\\'" . nroff-mode))))) nil [93971 105125])
            ("put" code nil nil [105126 105172])
            ("conf-mode-maybe" function nil nil [105174 105424])
            ("interpreter-mode-alist" variable (:default-value (mapcar (lambda (l) (cons (purecopy (car l)) (cdr l))) (quote (("perl" . perl-mode) ("perl5" . perl-mode) ("miniperl" . perl-mode) ("wish" . tcl-mode) ("wishx" . tcl-mode) ("tcl" . tcl-mode) ("tclsh" . tcl-mode) ("scm" . scheme-mode) ("ash" . sh-mode) ("bash" . sh-mode) ("bash2" . sh-mode) ("csh" . sh-mode) ("dtksh" . sh-mode) ("es" . sh-mode) ("itcsh" . sh-mode) ("jsh" . sh-mode) ("ksh" . sh-mode) ("oash" . sh-mode) ("pdksh" . sh-mode) ("rbash" . sh-mode) ("rc" . sh-mode) ("rpm" . sh-mode) ("sh" . sh-mode) ("sh5" . sh-mode) ("tcsh" . sh-mode) ("wksh" . sh-mode) ("wsh" . sh-mode) ("zsh" . sh-mode) ("tail" . text-mode) ("more" . text-mode) ("less" . text-mode) ("pg" . text-mode) ("make" . makefile-gmake-mode) ("guile" . scheme-mode) ("clisp" . lisp-mode) ("emacs" . emacs-lisp-mode))))) nil [105426 107007])
            ("define-obsolete-variable-alias" code nil nil [107009 107122])
            ("inhibit-local-variables-regexps" variable (:default-value (mapcar (quote purecopy) (quote ("\\.tar\\'" "\\.t[bg]z\\'" "\\.arc\\'" "\\.zip\\'" "\\.lzh\\'" "\\.lha\\'" "\\.zoo\\'" "\\.[jew]ar\\'" "\\.xpi\\'" "\\.rar\\'" "\\.7z\\'" "\\.sx[dmicw]\\'" "\\.odt\\'" "\\.tiff?\\'" "\\.gif\\'" "\\.png\\'" "\\.jpe?g\\'")))) nil [107321 108139])
            ("define-obsolete-variable-alias" code nil nil [108141 108251])
            ("inhibit-local-variables-suffixes" variable nil nil [108253 108503])
            ("inhibit-local-variables-p" function nil nil [108548 109229])
            ("auto-mode-interpreter-regexp" variable (:default-value (purecopy "#![ 	]?\\([^ 	
]*/bin/env[ 	]\\)?\\([^ 	
]+\\)")) nil [109231 109749])
            ("magic-mode-alist" variable nil nil [109751 110285])
            ("put" code nil nil [110286 110333])
            ("magic-fallback-mode-alist" variable (:default-value (purecopy (\` ((image-type-auto-detected-p . image-mode) ("\\(PK00\\)?[P]K" . archive-mode) ((\, (let* ((incomment-re "\\(?:[^-]\\|-[^-]\\)") (comment-re (concat "\\(?:!--" incomment-re "*-->[ 	
]*<\\)"))) (concat "\\(?:<\\?xml[ 	
]+[^>]*>\\)?[ 	
]*<" comment-re "*" "\\(?:!DOCTYPE[ 	
]+[^>]*>[ 	
]*<[ 	
]*" comment-re "*\\)?" "[Hh][Tt][Mm][Ll]"))) . html-mode) ("<!DOCTYPE[ 	
]+[Hh][Tt][Mm][Ll]" . html-mode) ("<\\?xml " . xml-mode) ((\, (let* ((incomment-re "\\(?:[^-]\\|-[^-]\\)") (comment-re (concat "\\(?:!--" incomment-re "*-->[ 	
]*<\\)"))) (concat "[ 	
]*<" comment-re "*!DOCTYPE "))) . sgml-mode) ("%!PS" . ps-mode) ("# xmcd " . conf-unix-mode))))) nil [110335 111876])
            ("put" code nil nil [111877 111933])
            ("magic-mode-regexp-match-limit" variable (:default-value 4000) nil [111935 112077])
            ("set-auto-mode" function (:arguments ("keep-mode-if-same")) nil [112079 118269])
            ("set-auto-mode-0" function (:arguments ("mode" "keep-mode-if-same")) nil [118522 118929])
            ("file-auto-mode-skip" variable (:default-value "^\\(#!\\|'\\\\\"\\)") nil [118931 119197])
            ("set-auto-mode-1" function nil nil [119199 120704])
            ("ignored-local-variables" variable (:default-value (quote (ignored-local-variables safe-local-variable-values file-local-variables-alist dir-local-variables-alist))) nil [120742 120948])
            ("put" code nil nil [120949 121003])
            ("hack-local-variables-hook" variable nil nil [121005 121238])
            ("safe-local-variable-values" variable nil nil [121240 121500])
            ("safe-local-eval-forms" variable (:default-value (quote ((add-hook (quote write-file-hooks) (quote time-stamp)) (add-hook (quote write-file-functions) (quote time-stamp)) (add-hook (quote before-save-hook) (quote time-stamp) nil t) (add-hook (quote before-save-hook) (quote delete-trailing-whitespace) nil t)))) nil [121502 122164])
            ("mapc" code nil nil [122192 122809])
            ("dolist" code nil nil [123451 124139])
            ("put" code nil nil [124141 124255])
            ("put" code nil nil [124257 124303])
            ("file-local-variables-alist" variable nil nil [124305 124660])
            ("make-variable-buffer-local" code nil nil [124661 124717])
            ("put" code nil nil [124718 124770])
            ("dir-local-variables-alist" variable nil nil [124772 125154])
            ("make-variable-buffer-local" code nil nil [125155 125210])
            ("before-hack-local-variables-hook" variable nil nil [125212 125630])
            ("hack-local-variables-confirm" function (:arguments ("all-vars" "unsafe-vars" "risky-vars" "dir-name")) nil [125632 128502])
            ("hack-local-variables-prop-line" function (:arguments ("mode-only")) nil [128504 130882])
            ("hack-local-variables-filter" function (:arguments ("variables" "dir-name")) nil [130884 133370])
            ("hack-local-variables" function (:arguments ("mode-only")) nil [133372 138827])
            ("hack-local-variables-apply" function nil nil [138829 139630])
            ("safe-local-variable-p" function (:arguments ("sym" "val")) nil [139632 140320])
            ("risky-local-variable-p" function (:arguments ("sym" "_ignored")) nil [140322 141225])
            ("hack-one-local-variable-quotep" function (:arguments ("exp")) nil [141227 141331])
            ("hack-one-local-variable-constantp" function (:arguments ("exp")) nil [141333 141521])
            ("hack-one-local-variable-eval-safep" function (:arguments ("exp")) nil [141523 143343])
            ("hack-one-local-variable" function (:arguments ("var" "val")) nil [143345 144317])
            ("dir-locals-class-alist" variable (:default-value (quote nil)) nil [144383 144498])
            ("dir-locals-directory-cache" variable (:default-value (quote nil)) nil [144500 145076])
            ("dir-locals-get-class-variables" function (:arguments ("class")) nil [145078 145211])
            ("dir-locals-collect-mode-variables" function (:arguments ("mode-variables" "variables")) nil [145213 145858])
            ("dir-locals-collect-variables" function (:arguments ("class-variables" "root" "variables")) nil [145860 147871])
            ("dir-locals-set-directory-class" function (:arguments ("directory" "class" "mtime")) nil [147873 148637])
            ("dir-locals-set-class-variables" function (:arguments ("class" "variables")) nil [148639 150102])
            ("dir-locals-file" variable
               (:constant-flag t
                :default-value ".dir-locals.el")
                nil [150104 150286])
            ("dir-locals-find-file" function (:arguments ("file")) nil [150288 153352])
            ("dir-locals-read-from-file" function (:arguments ("file")) nil [153354 154250])
            ("enable-remote-dir-locals" variable nil nil [154252 154418])
            ("hack-dir-local-variables" function nil nil [154420 155665])
            ("hack-dir-local-variables-non-file-buffer" function nil nil [155667 155973])
            ("change-major-mode-with-file-name" variable (:default-value t) nil [155977 156414])
            ("set-visited-file-name" function
               (:user-visible-flag t
                :arguments ("filename" "no-query" "along-with-file"))
                nil [156416 161393])
            ("write-file" function
               (:user-visible-flag t
                :arguments ("filename" "confirm"))
                nil [161395 163272])
            ("backup-buffer" function nil nil [163275 167201])
            ("backup-buffer-copy" function (:arguments ("from-name" "to-name" "modes" "context")) nil [167203 168328])
            ("file-name-version-regexp" variable (:default-value "\\(?:~\\|\\.~[-[:alnum:]:#@^._]+\\(?:~[[:digit:]]+\\)?~\\)") nil [168330 168623])
            ("file-name-sans-versions" function (:arguments ("name" "keep-backup-version")) nil [168625 169324])
            ("file-ownership-preserved-p" function (:arguments ("file")) nil [169326 170125])
            ("file-name-sans-extension" function (:arguments ("filename")) nil [170127 170822])
            ("file-name-extension" function (:arguments ("filename" "period")) nil [170824 171641])
            ("file-name-base" function (:arguments ("filename")) nil [171643 171887])
            ("make-backup-file-name-function" variable nil nil [171889 172375])
            ("backup-directory-alist" variable nil nil [172377 173414])
            ("normal-backup-enable-predicate" function (:arguments ("name")) nil [173416 174284])
            ("make-backup-file-name" function (:arguments ("file")) nil [174286 175303])
            ("make-backup-file-name-1" function (:arguments ("file")) nil [175305 177369])
            ("backup-file-name-p" function (:arguments ("file")) nil [177371 177632])
            ("backup-extract-version-start" variable nil nil [177634 177671])
            ("backup-extract-version" function (:arguments ("fn")) nil [177846 178298])
            ("find-backup-file-name" function (:arguments ("fn")) nil [178300 180421])
            ("file-nlinks" function (:arguments ("filename")) nil [180423 180540])
            ("file-relative-name" function (:arguments ("filename" "directory")) nil [182516 185321])
            ("save-buffer" function
               (:user-visible-flag t
                :arguments ("args"))
                nil [185324 187724])
            ("delete-auto-save-file-if-necessary" function (:arguments ("force")) nil [187726 188297])
            ("auto-save-hook" variable nil nil [188299 188371])
            ("before-save-hook" variable nil nil [188373 188543])
            ("after-save-hook" variable nil nil [188545 188736])
            ("save-buffer-coding-system" variable nil nil [188738 189110])
            ("make-variable-buffer-local" code nil nil [189112 189167])
            ("put" code nil nil [189168 189219])
            ("basic-save-buffer" function (:user-visible-flag t) nil [189221 193046])
            ("basic-save-buffer-1" function nil nil [193320 193711])
            ("basic-save-buffer-2" function nil nil [193792 198262])
            ("declare-function" code nil nil [198264 198350])
            ("save-some-buffers-action-alist" variable (:default-value (\` ((18 (\, (lambda (buf) (if (not enable-recursive-minibuffers) (progn (display-buffer buf) (setq other-window-scroll-buffer buf)) (view-buffer buf (lambda (_) (exit-recursive-edit))) (recursive-edit)) nil)) (\, (purecopy "view this buffer"))) (100 (\, (lambda (buf) (if (null (buffer-file-name buf)) (message "Not applicable: no file") (require (quote diff)) (let ((diffbuf (diff-no-select (buffer-file-name buf) buf nil (quote noasync)))) (if (not enable-recursive-minibuffers) (progn (display-buffer diffbuf) (setq other-window-scroll-buffer diffbuf)) (view-buffer diffbuf (lambda (_) (exit-recursive-edit))) (recursive-edit)))) nil)) (\, (purecopy "view changes in this buffer")))))) nil [198352 199518])
            ("put" code nil nil [199519 199580])
            ("buffer-save-without-query" variable nil nil [199582 199698])
            ("make-variable-buffer-local" code nil nil [199699 199754])
            ("save-some-buffers" function
               (:user-visible-flag t
                :arguments ("arg" "pred"))
                nil [199756 203214])
            ("not-modified" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [203217 203668])
            ("toggle-read-only" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [203670 203911])
            ("insert-file" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [203913 204309])
            ("append-to-file" function
               (:user-visible-flag t
                :arguments ("start" "end" "filename"))
                nil [204311 204922])
            ("file-newest-backup" function (:arguments ("filename")) nil [204924 205847])
            ("rename-uniquely" function (:user-visible-flag t) nil [205849 206865])
            ("make-directory" function
               (:user-visible-flag t
                :arguments ("dir" "parents"))
                nil [206867 208439])
            ("directory-files-no-dot-files-regexp" variable
               (:constant-flag t
                :default-value "^\\([^.]\\|\\.\\([^.]\\|\\..\\)\\).*")
                nil [208441 208587])
            ("delete-directory" function
               (:user-visible-flag t
                :arguments ("directory" "recursive" "trash"))
                nil [208589 211050])
            ("file-equal-p" function (:arguments ("file1" "file2")) nil [211052 211612])
            ("file-in-directory-p" function (:arguments ("file" "dir")) nil [211614 212552])
            ("copy-directory" function
               (:user-visible-flag t
                :arguments ("directory" "newname" "keep-time" "parents" "copy-contents"))
                nil [212554 215741])
            ("prune-directory-list" function (:arguments ("dirs" "keep" "reject")) nil [215789 216351])
            ("put" code nil nil [216355 216403])
            ("revert-buffer-function" variable nil nil [216404 216626])
            ("put" code nil nil [216628 216697])
            ("revert-buffer-insert-file-contents-function" variable nil nil [216698 216994])
            ("buffer-stale-function" variable nil nil [216996 217784])
            ("before-revert-hook" variable nil nil [217786 217978])
            ("after-revert-hook" variable nil nil [217980 218324])
            ("revert-buffer-in-progress-p" variable nil nil [218326 218503])
            ("revert-buffer-internal-hook" variable nil nil [218505 218541])
            ("revert-buffer" function
               (:user-visible-flag t
                :arguments ("ignore-auto" "noconfirm" "preserve-modes"))
                nil [218543 224823])
            ("recover-this-file" function (:user-visible-flag t) nil [224825 224976])
            ("recover-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [224978 227062])
            ("recover-session" function (:user-visible-flag t) nil [227064 228592])
            ("recover-session-finish" function (:user-visible-flag t) nil [228594 230997])
            ("kill-buffer-ask" function (:arguments ("buffer")) nil [230999 231250])
            ("kill-some-buffers" function
               (:user-visible-flag t
                :arguments ("list"))
                nil [231252 231855])
            ("kill-matching-buffers" function
               (:user-visible-flag t
                :arguments ("regexp" "internal-too"))
                nil [231857 232385])
            ("rename-auto-save-file" function nil nil [232389 232953])
            ("make-auto-save-file-name" function nil nil [232955 237184])
            ("auto-save-file-name-p" function (:arguments ("filename")) nil [237186 237410])
            ("wildcard-to-regexp" function (:arguments ("wildcard")) nil [237413 239596])
            ("list-directory-brief-switches" variable (:default-value (purecopy "-CF")) nil [239599 239760])
            ("list-directory-verbose-switches" variable (:default-value (purecopy "-l")) nil [239762 239928])
            ("file-expand-wildcards" function (:arguments ("pattern" "full")) nil [239930 241651])
            ("files" package nil nil [241725 241761])
            ("list-directory" function
               (:user-visible-flag t
                :arguments ("dirname" "verbose"))
                nil [241763 243109])
            ("shell-quote-wildcard-pattern" function (:arguments ("pattern")) nil [243111 244939])
            ("insert-directory-program" variable (:default-value (purecopy "ls")) nil [244942 245069])
            ("directory-free-space-program" variable (:default-value (purecopy "df")) nil [245071 245608])
            ("directory-free-space-args" variable (:default-value (purecopy (if (eq system-type (quote darwin)) "-k" "-Pk"))) nil [245610 245797])
            ("get-free-disk-space" function (:arguments ("dir")) nil [245799 247550])
            ("directory-listing-before-filename-regexp" variable (:default-value (let* ((l "\\([A-Za-z]\\|[^ -]\\)") (l-or-quote "\\([A-Za-z']\\|[^ -]\\)") (month (concat l-or-quote l-or-quote "+\\.?")) (s " ") (yyyy "[0-9][0-9][0-9][0-9]") (dd "[ 0-3][0-9]") (HH:MM "[ 0-2][0-9][:.][0-5][0-9]") (seconds "[0-6][0-9]\\([.,][0-9]+\\)?") (zone "[-+][0-2][0-9][0-5][0-9]") (iso-mm-dd "[01][0-9]-[0-3][0-9]") (iso-time (concat HH:MM "\\(:" seconds "\\( ?" zone "\\)?\\)?")) (iso (concat "\\(\\(" yyyy "-\\)?" iso-mm-dd "[ T]" iso-time "\\|" yyyy "-" iso-mm-dd "\\)")) (western (concat "\\(" month s "+" dd "\\|" dd "\\.?" s month "\\)" s "+" "\\(" HH:MM "\\|" yyyy "\\)")) (western-comma (concat month s "+" dd "," s "+" yyyy)) (mm "[ 0-1]?[0-9]") (east-asian (concat "\\(" mm l "?" s dd l "?" s "+" "\\|" dd s mm s "+" "\\)" "\\(" HH:MM "\\|" yyyy l "?" "\\)"))) (purecopy (concat "\\([0-9][BkKMGTPEZY]? " iso "\\|.*[0-9][BkKMGTPEZY]? " "\\(" western "\\|" western-comma "\\|" east-asian "\\)" "\\) +")))) nil [247622 250011])
            ("insert-directory-ls-version" variable (:default-value (quote unknown)) nil [250013 250058])
            ("insert-directory" function (:arguments ("file" "switches" "wildcard" "full-directory-p")) nil [251132 261160])
            ("insert-directory-adj-pos" function (:arguments ("pos" "error-lines")) nil [261162 261728])
            ("insert-directory-safely" function (:arguments ("file" "switches" "wildcard" "full-directory-p")) nil [261730 262214])
            ("kill-emacs-query-functions" variable nil nil [262216 262522])
            ("confirm-kill-emacs" variable nil nil [262524 262919])
            ("save-buffers-kill-emacs" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [262921 264565])
            ("save-buffers-kill-terminal" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [264567 265068])
            ("setq" code nil nil [265178 265299])
            ("file-name-non-special" function (:arguments ("operation" "arguments")) nil [265500 268124])
            ("file-modes-char-to-who" function (:arguments ("char")) nil [268167 268634])
            ("file-modes-char-to-right" function (:arguments ("char" "from")) nil [268636 269485])
            ("file-modes-rights-to-number" function (:arguments ("rights" "who-mask" "from")) nil [269487 270641])
            ("file-modes-symbolic-to-number" function (:arguments ("modes" "from")) nil [270643 271710])
            ("read-file-modes" function (:arguments ("prompt" "orig-file")) nil [271712 272777])
            ("trash-directory" variable nil nil [272803 273206])
            ("trash--hexify-table" variable nil nil [273208 273236])
            ("declare-function" code nil nil [273238 273304])
            ("move-file-to-trash" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [273306 278726])
            ("define-key" code nil nil [278730 278770])
            ("define-key" code nil nil [278771 278821])
            ("define-key" code nil nil [278822 278872])
            ("define-key" code nil nil [278873 278915])
            ("define-key" code nil nil [278916 278961])
            ("define-key" code nil nil [278962 279003])
            ("define-key" code nil nil [279004 279043])
            ("define-key" code nil nil [279044 279082])
            ("define-key" code nil nil [279083 279128])
            ("define-key" code nil nil [279129 279186])
            ("define-key" code nil nil [279187 279232])
            ("define-key" code nil nil [279234 279286])
            ("define-key" code nil nil [279287 279349])
            ("define-key" code nil nil [279350 279405])
            ("define-key" code nil nil [279406 279465])
            ("define-key" code nil nil [279466 279513])
            ("define-key" code nil nil [279515 279573])
            ("define-key" code nil nil [279574 279625])
            ("define-key" code nil nil [279626 279680])
            ("define-key" code nil nil [279681 279742])
            ("define-key" code nil nil [279743 279802]))          
    :file "files.el"
    :pointmax 279827
    :fsize 279826
    :lastmodtime '(20806 7941 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "simple.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("declare-function" code nil nil [988 1050])
            ("declare-function" code nil nil [1051 1091])
            ("compilation-current-error" variable nil nil [1113 1147])
            ("compilation-context-lines" variable nil nil [1148 1182])
            ("idle-update-delay" variable (:default-value 0.5) nil [1184 1481])
            ("killing" customgroup (:user-visible-flag t) nil [1483 1557])
            ("paren-matching" customgroup (:user-visible-flag t) nil [1559 1661])
            ("next-error" customgroup (:user-visible-flag t) nil [1698 1799])
            ("next-error" variable
               (:default-value (quote ((t (:inherit region))))
                :type "face")
                nil [1801 1932])
            ("next-error-highlight" variable (:default-value 0.5) nil [1934 2689])
            ("next-error-highlight-no-select" variable (:default-value 0.5) nil [2691 3384])
            ("next-error-recenter" variable nil nil [3386 3748])
            ("next-error-hook" variable nil nil [3750 3891])
            ("next-error-highlight-timer" variable nil nil [3893 3932])
            ("next-error-overlay-arrow-position" variable nil nil [3934 3980])
            ("put" code nil nil [3981 4059])
            ("add-to-list" code nil nil [4060 4137])
            ("next-error-last-buffer" variable nil nil [4139 4366])
            ("next-error-function" variable nil nil [4368 4826])
            ("make-variable-buffer-local" code nil nil [4827 4876])
            ("next-error-move-function" variable nil nil [4878 5191])
            ("make-variable-buffer-local" code nil nil [5192 5246])
            ("next-error-buffer-p" function (:arguments ("buffer" "avoid-current" "extra-test-inclusive" "extra-test-exclusive")) nil [5248 6291])
            ("next-error-find-buffer" function (:arguments ("avoid-current" "extra-test-inclusive" "extra-test-exclusive")) nil [6293 8575])
            ("next-error" function
               (:user-visible-flag t
                :arguments ("arg" "reset"))
                nil [8577 10346])
            ("next-error-internal" function nil nil [10348 10769])
            ("defalias" code nil nil [10771 10810])
            ("defalias" code nil nil [10811 10845])
            ("previous-error" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [10847 11164])
            ("first-error" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [11166 11434])
            ("next-error-no-select" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [11436 11888])
            ("previous-error-no-select" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [11890 12268])
            ("next-error-follow-last-line" variable nil nil [12339 12379])
            ("define-minor-mode" code nil nil [12381 13089])
            ("next-error-follow-mode-post-command-hook" function nil nil [13205 13538])
            ("fundamental-mode" function (:user-visible-flag t) nil [13547 13811])
            ("special-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (suppress-keymap map) (define-key map "q" (quote quit-window)) (define-key map " " (quote scroll-up-command)) (define-key map "" (quote scroll-down-command)) (define-key map "?" (quote describe-mode)) (define-key map "h" (quote describe-mode)) (define-key map ">" (quote end-of-buffer)) (define-key map "<" (quote beginning-of-buffer)) (define-key map "g" (quote revert-buffer)) map)) nil [13889 14322])
            ("put" code nil nil [14324 14364])
            ("define-derived-mode" code nil nil [14365 14510])
            ("prog-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [134217745] (quote prog-indent-sexp)) map)) nil [14572 14728])
            ("prog-indent-sexp" function (:user-visible-flag t) nil [14730 14928])
            ("define-derived-mode" code nil nil [14930 15298])
            ("hard-newline" variable (:default-value (propertize "
" (quote hard) t (quote rear-nonsticky) (quote (hard)))) nil [15331 15464])
            ("newline" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [15466 17714])
            ("set-hard-newline-properties" function (:arguments ("from" "to")) nil [17716 18064])
            ("open-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [18066 18778])
            ("split-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [18780 19581])
            ("delete-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [19583 20296])
            ("defalias" code nil nil [20298 20340])
            ("delete-blank-lines" function (:user-visible-flag t) nil [20359 21786])
            ("delete-trailing-lines" variable (:default-value t) nil [21788 22074])
            ("delete-trailing-whitespace" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [22076 23882])
            ("newline-and-indent" function (:user-visible-flag t) nil [23884 24311])
            ("reindent-then-newline-and-indent" function (:user-visible-flag t) nil [24313 25539])
            ("quoted-insert" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [25541 27454])
            ("forward-to-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [27456 27649])
            ("backward-to-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [27651 27850])
            ("back-to-indentation" function (:user-visible-flag t) nil [27852 28142])
            ("fixup-whitespace" function (:user-visible-flag t) nil [28144 28483])
            ("delete-horizontal-space" function
               (:user-visible-flag t
                :arguments ("backward-only"))
                nil [28485 28923])
            ("just-one-space" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [28925 29553])
            ("beginning-of-buffer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [29556 30457])
            ("end-of-buffer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [30459 31626])
            ("delete-active-region" variable (:default-value t) nil [31628 32165])
            ("delete-backward-char" function
               (:user-visible-flag t
                :arguments ("n" "killflag"))
                nil [32167 33565])
            ("delete-forward-char" function
               (:user-visible-flag t
                :arguments ("n" "killflag"))
                nil [33567 34475])
            ("mark-whole-buffer" function (:user-visible-flag t) nil [34477 34881])
            ("goto-line" function
               (:user-visible-flag t
                :arguments ("line" "buffer"))
                nil [34925 37158])
            ("count-words-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "arg"))
                nil [37160 37842])
            ("count-words" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [37844 38628])
            ("count-words--buffer-message" function nil nil [38630 38783])
            ("count-words--message" function (:arguments ("str" "start" "end")) nil [38785 39110])
            ("define-obsolete-function-alias" code nil nil [39112 39191])
            ("what-line" function (:user-visible-flag t) nil [39193 39544])
            ("count-lines" function (:arguments ("start" "end")) nil [39546 40383])
            ("line-number-at-pos" function (:arguments ("pos")) nil [40385 40845])
            ("what-cursor-position" function
               (:user-visible-flag t
                :arguments ("detail"))
                nil [40847 45184])
            ("let" code nil nil [45249 45550])
            ("minibuffer-completing-symbol" variable nil nil [45552 45655])
            ("make-obsolete-variable" code nil nil [45656 45726])
            ("minibuffer-default" variable nil nil [45728 45921])
            ("eval-expression-print-level" variable (:default-value 4) nil [45923 46153])
            ("eval-expression-print-length" variable (:default-value 12) nil [46155 46388])
            ("eval-expression-debug-on-error" variable (:default-value t) nil [46390 46599])
            ("eval-expression-print-format" function (:arguments ("value")) nil [46601 47415])
            ("eval-expression" function
               (:user-visible-flag t
                :arguments ("eval-expression-arg" "eval-expression-insert-value"))
                nil [47545 49427])
            ("edit-and-eval-command" function (:arguments ("prompt" "command")) nil [49429 50356])
            ("repeat-complex-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [50358 51936])
            ("read-extended-command" function nil nil [51938 53462])
            ("suggest-key-bindings" variable (:default-value t) nil [53464 53830])
            ("execute-extended-command" function
               (:user-visible-flag t
                :arguments ("prefixarg" "command-name"))
                nil [53832 56300])
            ("minibuffer-history" variable nil nil [56303 56556])
            ("minibuffer-history-sexp-flag" variable nil nil [56557 56872])
            ("setq" code nil nil [56873 56927])
            ("setq" code nil nil [56928 56966])
            ("minibuffer-history-search-history" variable nil nil [56992 57038])
            ("minibuffer-text-before-history" variable nil nil [57040 57240])
            ("add-hook" code nil nil [57242 57306])
            ("minibuffer-history-initialize" function nil nil [57308 57392])
            ("minibuffer-avoid-prompt" function (:arguments ("_new" "_old")) nil [57394 57556])
            ("minibuffer-history-case-insensitive-variables" variable nil nil [57558 57948])
            ("previous-matching-history-element" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [57950 60794])
            ("next-matching-history-element" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [60796 61850])
            ("minibuffer-temporary-goal-position" variable nil nil [61852 61899])
            ("minibuffer-default-add-function" variable (:default-value (quote minibuffer-default-add-completions)) nil [61901 62541])
            ("minibuffer-default-add-done" variable nil nil [62543 62866])
            ("make-variable-buffer-local" code nil nil [62868 62925])
            ("minibuffer-default-add-completions" function nil nil [62927 63381])
            ("goto-history-element" function
               (:user-visible-flag t
                :arguments ("nabs"))
                nil [63383 65575])
            ("next-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [65577 65828])
            ("previous-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [65830 66088])
            ("next-complete-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [66090 66746])
            ("previous-complete-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [66748 67033])
            ("minibuffer-prompt-width" function nil nil [67092 67381])
            ("add-hook" code nil nil [67414 67481])
            ("minibuffer-history-isearch-message-overlay" variable nil nil [67483 67534])
            ("make-variable-buffer-local" code nil nil [67535 67607])
            ("minibuffer-history-isearch-setup" function nil nil [67609 68249])
            ("minibuffer-history-isearch-end" function nil nil [68251 68481])
            ("minibuffer-history-isearch-search" function nil nil [68483 70388])
            ("minibuffer-history-isearch-message" function (:arguments ("c-q-hack" "ellipsis")) nil [70390 71774])
            ("minibuffer-history-isearch-wrap" function nil nil [71776 72393])
            ("minibuffer-history-isearch-push-state" function nil nil [72395 72705])
            ("minibuffer-history-isearch-pop-state" function (:arguments ("_cmd" "hist-pos")) nil [72707 72919])
            ("define-obsolete-function-alias" code nil nil [72997 73059])
            ("undo-equiv-table" variable
               (:constant-flag t
                :default-value (make-hash-table :test (quote eq) :weakness t))
                nil [73061 73304])
            ("undo-in-region" variable nil nil [73306 73410])
            ("undo-no-redo" variable nil nil [73412 73487])
            ("pending-undo-list" variable nil nil [73489 73640])
            ("undo" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [73642 78050])
            ("buffer-disable-undo" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [78052 78333])
            ("undo-only" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [78335 78597])
            ("undo-in-progress" variable nil nil [78599 78730])
            ("undo-more" function (:arguments ("n")) nil [78732 79427])
            ("undo-copy-list" function (:arguments ("list")) nil [79452 79550])
            ("undo-copy-list-1" function (:arguments ("elt")) nil [79552 79661])
            ("undo-start" function (:arguments ("beg" "end")) nil [79663 80251])
            ("undo-adjusted-markers" variable nil nil [80253 80283])
            ("undo-make-selective-list" function (:arguments ("start" "end")) nil [80285 83001])
            ("undo-elt-in-region" function (:arguments ("undo-elt" "start" "end")) nil [83003 84176])
            ("undo-elt-crosses-region" function (:arguments ("undo-elt" "start" "end")) nil [84178 84686])
            ("undo-delta" function (:arguments ("undo-elt")) nil [84857 85190])
            ("undo-ask-before-discard" variable nil nil [85192 85958])
            ("undo-extra-outer-limit" variable nil nil [85960 86236])
            ("make-variable-buffer-local" code nil nil [86237 86289])
            ("setq" code nil nil [86574 86633])
            ("undo-outer-limit-truncate" function (:arguments ("size")) nil [86634 88323])
            ("shell-command-history" variable nil nil [88326 88516])
            ("shell-command-switch" variable (:default-value (purecopy "-c")) nil [88518 88632])
            ("shell-command-default-error-buffer" variable nil nil [88634 88949])
            ("declare-function" code nil nil [88951 89017])
            ("declare-function" code nil nil [89018 89104])
            ("minibuffer-default-add-shell-commands" function (:user-visible-flag t) nil [89106 89810])
            ("declare-function" code nil nil [89812 89863])
            ("minibuffer-local-shell-command-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "	" (quote completion-at-point)) map)) nil [89865 90110])
            ("read-shell-command" function (:arguments ("prompt" "initial-contents" "hist" "args")) nil [90112 90741])
            ("async-shell-command-buffer" variable (:default-value (quote confirm-new-buffer)) nil [90743 91996])
            ("async-shell-command" function
               (:user-visible-flag t
                :arguments ("command" "output-buffer" "error-buffer"))
                nil [91998 92954])
            ("shell-command" function
               (:user-visible-flag t
                :arguments ("command" "output-buffer" "error-buffer"))
                nil [92956 100889])
            ("display-message-or-buffer" function (:arguments ("message" "buffer-name" "not-this-window" "frame")) nil [100891 103314])
            ("shell-command-sentinel" function (:arguments ("process" "signal")) nil [103410 103621])
            ("shell-command-on-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "command" "output-buffer" "replace" "error-buffer" "display-error-buffer"))
                nil [103623 110810])
            ("shell-command-to-string" function (:arguments ("command")) nil [110812 111072])
            ("process-file" function (:arguments ("program" "infile" "buffer" "display" "args")) nil [111074 112524])
            ("process-file-side-effects" variable (:default-value t) nil [112526 112952])
            ("start-file-process" function (:arguments ("name" "buffer" "program" "program-args")) nil [112954 113839])
            ("tabulated-list-format" variable nil nil [113861 113891])
            ("tabulated-list-entries" variable nil nil [113892 113923])
            ("tabulated-list-sort-key" variable nil nil [113924 113956])
            ("declare-function" code nil nil [113957 114023])
            ("declare-function" code nil nil [114024 114123])
            ("process-menu-query-only" variable nil nil [114125 114161])
            ("define-derived-mode" code nil nil [114163 114659])
            ("list-processes--refresh" function nil nil [114661 116289])
            ("process-menu-visit-buffer" function (:arguments ("button")) nil [116291 116388])
            ("list-processes" function
               (:user-visible-flag t
                :arguments ("query-only" "buffer"))
                nil [116390 117183])
            ("universal-argument-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [t] (quote universal-argument-other-key)) (define-key map (vector meta-prefix-char t) (quote universal-argument-other-key)) (define-key map [switch-frame] nil) (define-key map [21] (quote universal-argument-more)) (define-key map [45] (quote universal-argument-minus)) (define-key map [48] (quote digit-argument)) (define-key map [49] (quote digit-argument)) (define-key map [50] (quote digit-argument)) (define-key map [51] (quote digit-argument)) (define-key map [52] (quote digit-argument)) (define-key map [53] (quote digit-argument)) (define-key map [54] (quote digit-argument)) (define-key map [55] (quote digit-argument)) (define-key map [56] (quote digit-argument)) (define-key map [57] (quote digit-argument)) (define-key map [kp-0] (quote digit-argument)) (define-key map [kp-1] (quote digit-argument)) (define-key map [kp-2] (quote digit-argument)) (define-key map [kp-3] (quote digit-argument)) (define-key map [kp-4] (quote digit-argument)) (define-key map [kp-5] (quote digit-argument)) (define-key map [kp-6] (quote digit-argument)) (define-key map [kp-7] (quote digit-argument)) (define-key map [kp-8] (quote digit-argument)) (define-key map [kp-9] (quote digit-argument)) (define-key map [kp-subtract] (quote universal-argument-minus)) map)) nil [117186 118520])
            ("universal-argument-num-events" variable nil nil [118522 118761])
            ("saved-overriding-map" variable (:default-value t) nil [118763 118932])
            ("save&set-overriding-map" function (:arguments ("map")) nil [118934 119163])
            ("restore-overriding-map" function nil nil [119165 119354])
            ("universal-argument" function (:user-visible-flag t) nil [119356 120155])
            ("universal-argument-more" function (:arguments ("arg")) nil [120296 120596])
            ("negative-argument" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [120598 121022])
            ("digit-argument" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [121024 121740])
            ("universal-argument-minus" function (:arguments ("arg")) nil [121860 122009])
            ("universal-argument-other-key" function (:arguments ("arg")) nil [122109 122447])
            ("filter-buffer-substring-functions" variable nil nil [122451 123536])
            ("buffer-substring-filters" variable nil nil [123538 124189])
            ("make-obsolete-variable" code nil nil [124190 124306])
            ("filter-buffer-substring" function (:arguments ("beg" "end" "delete")) nil [124308 125529])
            ("interprogram-cut-function" variable nil nil [125573 126110])
            ("interprogram-paste-function" variable nil nil [126112 127533])
            ("kill-ring" variable nil nil [127574 128029])
            ("kill-ring-max" variable (:default-value 60) nil [128031 128166])
            ("kill-ring-yank-pointer" variable nil nil [128168 128269])
            ("save-interprogram-paste-before-kill" variable nil nil [128271 128773])
            ("kill-do-not-save-duplicates" variable nil nil [128775 129004])
            ("kill-new" function (:arguments ("string" "replace" "yank-handler")) nil [129006 131290])
            ("set-advertised-calling-convention" code nil nil [131291 131372])
            ("kill-append" function (:arguments ("string" "before-p" "yank-handler")) nil [131374 131840])
            ("set-advertised-calling-convention" code nil nil [131841 131915])
            ("yank-pop-change-selection" variable nil nil [131917 132265])
            ("current-kill" function (:arguments ("n" "do-not-move")) nil [132267 133925])
            ("kill-read-only-ok" variable nil nil [133976 134112])
            ("kill-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "yank-handler"))
                nil [134114 136579])
            ("set-advertised-calling-convention" code nil nil [136580 136646])
            ("copy-region-as-kill" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [136840 137346])
            ("kill-ring-save" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [137348 138079])
            ("indicate-copied-region" function (:arguments ("message-len")) nil [138081 139657])
            ("append-next-kill" function
               (:user-visible-flag t
                :arguments ("interactive"))
                nil [139659 140088])
            ("yank-handled-properties" variable (:default-value (quote ((font-lock-face . yank-handle-font-lock-face-property) (category . yank-handle-category-property)))) nil [140104 140840])
            ("yank-excluded-properties" variable (:default-value (quote (category field follow-link fontified font-lock-face help-echo intangible invisible keymap local-map mouse-face read-only yank-handler))) nil [140913 141376])
            ("yank-window-start" variable nil nil [141378 141408])
            ("yank-undo-function" variable nil nil [141409 141740])
            ("yank-pop" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [141742 143472])
            ("yank" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [143474 144921])
            ("rotate-yank-pointer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [144923 145113])
            ("kill-forward-chars" function (:arguments ("arg")) nil [145178 145323])
            ("kill-backward-chars" function (:arguments ("arg")) nil [145372 145518])
            ("backward-delete-char-untabify-method" variable (:default-value (quote untabify)) nil [145520 145995])
            ("backward-delete-char-untabify" function
               (:user-visible-flag t
                :arguments ("arg" "killp"))
                nil [145997 147349])
            ("zap-to-char" function
               (:user-visible-flag t
                :arguments ("arg" "char"))
                nil [147351 147968])
            ("kill-whole-line" variable nil nil [148005 148150])
            ("kill-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [148152 150361])
            ("kill-whole-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [150363 151993])
            ("forward-visible-line" function (:arguments ("arg")) nil [151995 154485])
            ("end-of-visible-line" function nil nil [154487 155253])
            ("insert-buffer" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [155256 155917])
            ("append-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [155919 156819])
            ("prepend-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [156821 157363])
            ("copy-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [157365 157934])
            ("put" code nil nil [157937 157998])
            ("put" code nil nil [157999 158074])
            ("activate-mark-hook" variable nil nil [158076 158265])
            ("deactivate-mark-hook" variable nil nil [158267 158345])
            ("mark" function (:arguments ("force")) nil [158347 158971])
            ("deactivate-mark" function (:arguments ("force")) nil [158973 160933])
            ("activate-mark" function nil nil [160935 161099])
            ("set-mark" function (:arguments ("pos")) nil [161101 162198])
            ("use-empty-active-region" variable nil nil [162200 162696])
            ("use-region-p" function nil nil [162698 163304])
            ("region-active-p" function nil nil [163306 163674])
            ("mark-ring" variable nil nil [163676 163769])
            ("make-variable-buffer-local" code nil nil [163770 163809])
            ("put" code nil nil [163810 163845])
            ("mark-ring-max" variable (:default-value 16) nil [163847 163992])
            ("global-mark-ring" variable nil nil [163994 164078])
            ("global-mark-ring-max" variable (:default-value 16) nil [164080 164241])
            ("pop-to-mark-command" function (:user-visible-flag t) nil [164243 164552])
            ("push-mark-command" function
               (:user-visible-flag t
                :arguments ("arg" "nomsg"))
                nil [164554 165023])
            ("set-mark-command-repeat-pop" variable nil nil [165025 165484])
            ("set-mark-default-inactive" variable nil nil [165486 165751])
            ("make-obsolete-variable" code nil nil [165752 165814])
            ("set-mark-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [165816 168217])
            ("push-mark" function (:arguments ("location" "nomsg" "activate")) nil [168219 169773])
            ("pop-mark" function nil nil [169775 170194])
            ("define-obsolete-function-alias" code nil nil [170196 170285])
            ("exchange-point-and-mark" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [170286 171245])
            ("shift-select-mode" variable (:default-value t) nil [171247 171819])
            ("handle-shift-selection" function nil nil [171821 172990])
            ("define-minor-mode" code nil nil [172992 174312])
            ("widen-automatically" variable (:default-value t) nil [174314 174648])
            ("non-essential" variable nil nil [174650 175048])
            ("pop-global-mark" function (:user-visible-flag t) nil [175050 175865])
            ("next-line-add-newlines" variable nil nil [175868 176042])
            ("next-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [176044 178115])
            ("previous-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [178117 179666])
            ("track-eol" variable nil nil [179668 179993])
            ("goal-column" variable nil nil [179995 180249])
            ("make-variable-buffer-local" code nil nil [180250 180291])
            ("temporary-goal-column" variable nil nil [180293 180797])
            ("line-move-ignore-invisible" variable (:default-value t) nil [180799 180983])
            ("line-move-visual" variable (:default-value t) nil [180985 181561])
            ("line-move-partial" function (:arguments ("arg" "noerror" "to-end")) nil [181608 183436])
            ("line-move" function (:arguments ("arg" "noerror" "to-end" "try-vscroll")) nil [183760 184688])
            ("line-move-visual" function (:arguments ("arg" "noerror")) nil [184836 186454])
            ("line-move-1" function (:arguments ("arg" "noerror" "_to-end")) nil [186608 191281])
            ("line-move-finish" function (:arguments ("column" "opoint" "forward")) nil [191283 194420])
            ("line-move-to-column" function (:arguments ("col")) nil [194422 195801])
            ("move-end-of-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [195803 197158])
            ("move-beginning-of-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [197160 198682])
            ("put" code nil nil [198812 198846])
            ("set-goal-column" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [198848 199849])
            ("end-of-visual-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [199917 200481])
            ("beginning-of-visual-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [200483 201074])
            ("kill-visual-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [201076 202491])
            ("next-logical-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [202493 202862])
            ("previous-logical-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [202864 203243])
            ("visual-line" customgroup (:user-visible-flag t) nil [203245 203346])
            ("visual-line-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [remap kill-line] (quote kill-visual-line)) (define-key map [remap move-beginning-of-line] (quote beginning-of-visual-line)) (define-key map [remap move-end-of-line] (quote end-of-visual-line)) map)) nil [203348 203836])
            ("visual-line-fringe-indicators" variable (:default-value (quote (nil nil))) nil [203838 205025])
            ("visual-line--saved-state" variable nil nil [205027 205064])
            ("define-minor-mode" code nil nil [205066 206707])
            ("turn-on-visual-line-mode" function nil nil [206709 206767])
            ("define-globalized-minor-mode" code nil nil [206769 206884])
            ("transpose-chars" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [206888 207322])
            ("transpose-words" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [207324 207768])
            ("transpose-sexps" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [207770 209241])
            ("transpose-lines" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [209243 209850])
            ("transpose-subr" function (:arguments ("mover" "arg" "special")) nil [210001 211199])
            ("transpose-subr-1" function (:arguments ("pos1" "pos2")) nil [211201 211952])
            ("backward-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [211955 212151])
            ("mark-word" function
               (:user-visible-flag t
                :arguments ("arg" "allow-extend"))
                nil [212153 212905])
            ("kill-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [212907 213119])
            ("backward-kill-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [213121 213312])
            ("current-word" function (:arguments ("strict" "really-word")) nil [213314 214794])
            ("fill-prefix" variable nil nil [214797 214963])
            ("make-variable-buffer-local" code nil nil [214964 215005])
            ("put" code nil nil [215006 215063])
            ("auto-fill-inhibit-regexp" variable nil nil [215065 215231])
            ("do-auto-fill" function nil nil [215233 218533])
            ("comment-line-break-function" variable (:default-value (quote comment-indent-new-line)) nil [218535 218861])
            ("default-indent-new-line" function
               (:user-visible-flag t
                :arguments ("soft"))
                nil [218863 219970])
            ("normal-auto-fill-function" variable (:default-value (quote do-auto-fill)) nil [219972 220128])
            ("put" code nil nil [220130 220192])
            ("put" code nil nil [220366 220418])
            ("define-minor-mode" code nil nil [220420 221165])
            ("auto-fill-function" function nil nil [221232 221339])
            ("turn-on-auto-fill" function nil nil [221341 221434])
            ("turn-off-auto-fill" function nil nil [221436 221532])
            ("custom-add-option" code nil nil [221534 221588])
            ("set-fill-column" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [221590 222428])
            ("set-selective-display" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [222431 223239])
            ("defvaralias" code nil nil [223241 223299])
            ("toggle-truncate-lines" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [223301 224081])
            ("toggle-word-wrap" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [224083 224627])
            ("overwrite-mode-textual" variable (:default-value (purecopy " Ovwrt")) nil [224629 224746])
            ("overwrite-mode-binary" variable (:default-value (purecopy " Bin Ovwrt")) nil [224747 224874])
            ("define-minor-mode" code nil nil [224876 225609])
            ("define-minor-mode" code nil nil [225611 226539])
            ("define-minor-mode" code nil nil [226541 227017])
            ("define-minor-mode" code nil nil [227019 227323])
            ("define-minor-mode" code nil nil [227325 227633])
            ("define-minor-mode" code nil nil [227635 228631])
            ("paren-blinking" customgroup (:user-visible-flag t) nil [228634 228765])
            ("blink-matching-paren" variable (:default-value t) nil [228767 228916])
            ("blink-matching-paren-on-screen" variable (:default-value t) nil [228918 229317])
            ("blink-matching-paren-distance" variable (:default-value (* 100 1024)) nil [229319 229644])
            ("blink-matching-delay" variable (:default-value 1) nil [229646 229782])
            ("blink-matching-paren-dont-ignore-comments" variable nil nil [229784 230052])
            ("blink-matching-check-mismatch" function (:arguments ("start" "end")) nil [230054 231039])
            ("blink-matching-check-function" variable (:default-value (function blink-matching-check-mismatch)) nil [231041 231407])
            ("blink-matching-open" function (:user-visible-flag t) nil [231409 235440])
            ("blink-paren-function" variable (:default-value (quote blink-matching-open)) nil [235442 235631])
            ("blink-paren-post-self-insert-function" function nil nil [235633 236160])
            ("add-hook" code nil nil [236162 236459])
            ("keyboard-quit" function (:user-visible-flag t) nil [236637 237130])
            ("buffer-quit-function" variable nil nil [237132 237382])
            ("keyboard-escape-quit" function (:user-visible-flag t) nil [237384 238210])
            ("play-sound-file" function
               (:user-visible-flag t
                :arguments ("file" "volume" "device"))
                nil [238212 238607])
            ("read-mail-command" variable (:default-value (quote rmail)) nil [238611 239128])
            ("mail-user-agent" variable (:default-value (quote message-user-agent)) nil [239130 240674])
            ("compose-mail-user-agent-warnings" variable (:default-value t) nil [240676 241001])
            ("rfc822-goto-eoh" function nil nil [241003 241407])
            ("mail-encode-mml" variable nil nil [241449 241588])
            ("compose-mail" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "switch-function" "yank-action" "send-actions" "return-action"))
                nil [241590 244276])
            ("compose-mail-other-window" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "yank-action" "send-actions" "return-action"))
                nil [244278 244669])
            ("compose-mail-other-frame" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "yank-action" "send-actions" "return-action"))
                nil [244671 245059])
            ("set-variable-value-history" variable nil nil [245063 245248])
            ("set-variable" function
               (:user-visible-flag t
                :arguments ("variable" "value" "make-local"))
                nil [245250 248000])
            ("completion-list-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mouse-2] (quote mouse-choose-completion)) (define-key map [follow-link] (quote mouse-face)) (define-key map [down-mouse-2] nil) (define-key map "" (quote choose-completion)) (define-key map "" (quote delete-completion-window)) (define-key map [left] (quote previous-completion)) (define-key map [right] (quote next-completion)) (define-key map "q" (quote quit-window)) (define-key map "z" (quote kill-this-buffer)) map)) nil [248055 248598])
            ("put" code nil nil [248666 248714])
            ("completion-reference-buffer" variable nil nil [248716 248945])
            ("completion-no-auto-exit" variable nil nil [248947 249128])
            ("completion-base-position" variable nil nil [249130 249500])
            ("completion-list-insert-choice-function" variable (:default-value (function completion--replace)) nil [249502 249801])
            ("completion-base-size" variable nil nil [249803 250258])
            ("make-obsolete-variable" code nil nil [250259 250338])
            ("delete-completion-window" function (:user-visible-flag t) nil [250340 250754])
            ("previous-completion" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [250756 250887])
            ("next-completion" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [250889 252139])
            ("choose-completion" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [252141 254033])
            ("choose-completion-guess-base-position" function (:arguments ("string")) nil [254117 254955])
            ("choose-completion-delete-max-match" function (:arguments ("string")) nil [254957 255149])
            ("choose-completion-string-functions" variable nil nil [255151 255871])
            ("choose-completion-string" function (:arguments ("choice" "buffer" "base-position" "insert-function")) nil [255873 259165])
            ("define-derived-mode" code nil nil [259167 259592])
            ("completion-list-mode-finish" function nil nil [259594 259790])
            ("add-hook" code nil nil [259792 259854])
            ("completion-show-help" variable (:default-value t) nil [259918 260069])
            ("completion-setup-function" function nil nil [260200 261742])
            ("add-hook" code nil nil [261744 261804])
            ("define-key" code nil nil [261806 261881])
            ("define-key" code nil nil [261882 261957])
            ("switch-to-completions" function (:user-visible-flag t) nil [261959 262500])
            ("event-apply-alt-modifier" function (:arguments ("_ignore-prompt")) nil [262662 262905])
            ("event-apply-super-modifier" function (:arguments ("_ignore-prompt")) nil [262906 263159])
            ("event-apply-hyper-modifier" function (:arguments ("_ignore-prompt")) nil [263160 263413])
            ("event-apply-shift-modifier" function (:arguments ("_ignore-prompt")) nil [263414 263667])
            ("event-apply-control-modifier" function (:arguments ("_ignore-prompt")) nil [263668 263925])
            ("event-apply-meta-modifier" function (:arguments ("_ignore-prompt")) nil [263926 264174])
            ("event-apply-modifier" function (:arguments ("event" "symbol" "lshiftby" "prefix")) nil [264176 265240])
            ("define-key" code nil nil [265242 265313])
            ("define-key" code nil nil [265314 265385])
            ("define-key" code nil nil [265386 265456])
            ("define-key" code nil nil [265457 265526])
            ("define-key" code nil nil [265527 265598])
            ("define-key" code nil nil [265599 265672])
            ("mapc" code nil nil [265962 266712])
            ("clone-buffer-hook" variable nil nil [266764 266865])
            ("clone-indirect-buffer-hook" variable nil nil [266867 266986])
            ("clone-process" function (:arguments ("process" "newname")) nil [266988 268497])
            ("clone-buffer" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag"))
                nil [268600 271563])
            ("clone-indirect-buffer" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag" "norecord"))
                nil [271566 273158])
            ("clone-indirect-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag" "norecord"))
                nil [273161 273644])
            ("normal-erase-is-backspace" variable (:default-value (quote maybe)) nil [273692 275232])
            ("normal-erase-is-backspace-setup-frame" function (:arguments ("frame")) nil [275234 276309])
            ("define-minor-mode" code nil nil [276311 279801])
            ("vis-mode-saved-buffer-invisibility-spec" variable nil nil [279804 279927])
            ("define-minor-mode" code nil nil [279929 281082])
            ("define-minor-mode" code nil nil [281084 281854])
            ("bad-packages-alist" variable
               (:constant-flag t
                :default-value (quote ((semantic semantic-version "\\`2\\.0pre[1-3]\\'" "The version of `semantic' loaded does not work in Emacs 22.
It can cause constant high CPU load.
Upgrade to at least Semantic 2.0pre4 (distributed with CEDET 1.0pre4).") (CUA-mode t nil "CUA-mode is now part of the standard GNU Emacs distribution,
so you can now enable CUA via the Options menu or by customizing `cua-mode'.

You have loaded an older version of CUA-mode which does not work
correctly with this version of Emacs.  You should remove the old
version and use the one distributed with Emacs."))))
                nil [282812 284291])
            ("bad-package-check" function (:arguments ("package")) nil [284293 284798])
            ("mapc" code nil nil [284800 284918])
            ("simple" package nil nil [284921 284938]))          
    :file "simple.el"
    :pointmax 284964
    :fsize 284963
    :lastmodtime '(20806 7945 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "time.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("display-time" customgroup (:user-visible-flag t) nil [1119 1230])
            ("display-time-mail-file" variable nil nil [1233 1599])
            ("display-time-mail-directory" variable nil nil [1601 1939])
            ("display-time-mail-function" variable nil nil [1941 2315])
            ("display-time-default-load-average" variable nil nil [2317 2888])
            ("display-time-load-average" variable nil nil [2890 3099])
            ("display-time-load-average-threshold" variable (:default-value 0.1) nil [3101 3265])
            ("display-time-day-and-date" variable nil nil [3282 3443])
            ("display-time-timer" variable nil nil [3445 3476])
            ("display-time-interval" variable (:default-value 60) nil [3478 3608])
            ("display-time-24hr-format" variable nil nil [3610 3827])
            ("display-time-string" variable nil nil [3829 3861])
            ("display-time-hook" variable nil nil [3928 4076])
            ("display-time-server-down-time" variable nil nil [4078 4238])
            ("zoneinfo-style-world-list" variable (:default-value (quote (("America/Los_Angeles" "Seattle") ("America/New_York" "New York") ("Europe/London" "London") ("Europe/Paris" "Paris") ("Asia/Calcutta" "Bangalore") ("Asia/Tokyo" "Tokyo")))) nil [4240 4938])
            ("legacy-style-world-list" variable (:default-value (quote (("PST8PDT" "Seattle") ("EST5EDT" "New York") ("GMT0BST" "London") ("CET-1CDT" "Paris") ("IST-5:30" "Bangalore") ("JST-9" "Tokyo")))) nil [4940 5618])
            ("display-time-world-list" variable (:default-value (let ((old-tz (getenv "TZ")) gmt nyt) (unwind-protect (progn (setenv "TZ" "America/New_York") (setq nyt (format-time-string "%z")) (setenv "TZ" "Europe/London") (setq gmt (format-time-string "%z"))) (setenv "TZ" old-tz)) (if (string-equal nyt gmt) legacy-style-world-list zoneinfo-style-world-list))) nil [5620 6575])
            ("display-time-world-time-format" variable (:default-value "%A %d %B %R %Z") nil [6577 6753])
            ("display-time-world-buffer-name" variable (:default-value "*wclock*") nil [6755 6901])
            ("display-time-world-timer-enable" variable (:default-value t) nil [6903 7059])
            ("display-time-world-timer-second" variable (:default-value 60) nil [7061 7219])
            ("display-time" function (:user-visible-flag t) nil [7236 7573])
            ("display-time-mail-face" variable nil nil [7799 8171])
            ("display-time-mail-icon" variable (:default-value (find-image (quote ((:type xpm :file "letter.xpm" :ascent center) (:type pbm :file "letter.pbm" :ascent center))))) nil [8173 8456])
            ("display-time-use-mail-icon" variable nil nil [8506 8791])
            ("display-time-mail-string" variable (:default-value "Mail") nil [8861 9251])
            ("display-time-format" variable nil nil [9253 9623])
            ("display-time-string-forms" variable (:default-value (quote ((if (and (not display-time-format) display-time-day-and-date) (format-time-string "%a %b %e " now) "") (propertize (format-time-string (or display-time-format (if display-time-24hr-format "%H:%M" "%-I:%M%p")) now) (quote help-echo) (format-time-string "%a %b %e, %Y" now)) load (if mail (concat " " (propertize display-time-mail-string (quote display) (\` (when (and display-time-use-mail-icon (display-graphic-p)) (\,@ display-time-mail-icon) (\,@ (if (and display-time-mail-face (memq (plist-get (cdr display-time-mail-icon) :type) (quote (pbm xbm)))) (let ((bg (face-attribute display-time-mail-face :background))) (if (stringp bg) (list :background bg))))))) (quote face) display-time-mail-face (quote help-echo) "You have new mail; mouse-2: Read mail" (quote mouse-face) (quote mode-line-highlight) (quote local-map) (make-mode-line-mouse-map (quote mouse-2) read-mail-command))) "")))) nil [9625 11556])
            ("display-time-event-handler" function nil nil [11558 12545])
            ("display-time-next-load-average" function (:user-visible-flag t) nil [12547 12893])
            ("display-time-mail-check-directory" function nil nil [12895 13311])
            ("with-no-warnings" code nil nil [13313 13693])
            ("display-time-update" function nil nil [13695 17113])
            ("display-time-file-nonempty-p" function (:arguments ("file")) nil [17115 17318])
            ("define-minor-mode" code nil nil [17335 18783])
            ("define-derived-mode" code nil nil [18786 18991])
            ("display-time-world-display" function (:arguments ("alist")) nil [18993 19739])
            ("display-time-world" function (:user-visible-flag t) nil [19756 20437])
            ("display-time-world-timer" function nil nil [20439 20888])
            ("emacs-uptime" function
               (:user-visible-flag t
                :arguments ("format"))
                nil [20905 21430])
            ("emacs-init-time" function (:user-visible-flag t) nil [21447 21753])
            ("time" package nil nil [21755 21770]))          
    :file "time.el"
    :pointmax 21794
    :fsize 21795
    :lastmodtime '(20806 7945 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "env.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("read-envvar-name-history" variable nil nil [1398 1435])
            ("read-envvar-name" function (:arguments ("prompt" "mustmatch")) nil [1437 2239])
            ("setenv-history" variable nil nil [2287 2314])
            ("substitute-env-vars" function (:arguments ("string")) nil [2317 3517])
            ("setenv-internal" function (:arguments ("env" "variable" "value" "keep-empty")) nil [3520 4512])
            ("setenv" function
               (:user-visible-flag t
                :arguments ("variable" "value" "substitute-env-vars"))
                nil [4582 6985])
            ("getenv" function
               (:user-visible-flag t
                :arguments ("variable" "frame"))
                nil [6987 8036])
            ("env" package nil nil [8038 8052]))          
    :file "env.el"
    :pointmax 8075
    :fsize 8074
    :lastmodtime '(20806 7941 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "tooltip.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("syntax" include nil nil [897 914])
            ("comint-prompt-regexp" variable nil nil [916 945])
            ("tooltip" customgroup (:user-visible-flag t) nil [947 1118])
            ("define-minor-mode" code nil nil [1152 2364])
            ("tooltip-delay" variable (:default-value 0.7) nil [2395 2522])
            ("tooltip-short-delay" variable (:default-value 0.1) nil [2524 2661])
            ("tooltip-recent-seconds" variable (:default-value 1) nil [2663 2837])
            ("tooltip-hide-delay" variable (:default-value 10) nil [2839 2963])
            ("tooltip-x-offset" variable (:default-value 5) nil [2965 3435])
            ("tooltip-y-offset" variable (:default-value 20) nil [3437 3907])
            ("tooltip-frame-parameters" variable (:default-value (quote ((name . "tooltip") (internal-border-width . 2) (border-width . 1)))) nil [3909 4308])
            ("tooltip" variable
               (:default-value (quote ((((class color)) :background "lightyellow" :foreground "black" :inherit variable-pitch) (t :inherit variable-pitch)))
                :type "face")
                nil [4310 4535])
            ("tooltip-use-echo-area" variable nil nil [4537 4792])
            ("make-obsolete-variable" code nil nil [4794 4882])
            ("define-obsolete-variable-alias" code nil nil [4928 5000])
            ("tooltip-functions" variable nil nil [5002 5290])
            ("tooltip-timeout-id" variable nil nil [5292 5382])
            ("tooltip-last-mouse-motion-event" variable nil nil [5384 5476])
            ("tooltip-hide-time" variable nil nil [5478 5551])
            ("gud-tooltip-mode" variable nil nil [5553 5578])
            ("tooltip-event-buffer" function (:arguments ("event")) nil [5621 5867])
            ("tooltip-delay" function nil nil [5904 6130])
            ("tooltip-cancel-delayed-tip" function nil nil [6132 6305])
            ("tooltip-start-delayed-tip" function nil nil [6307 6486])
            ("tooltip-timeout" function (:arguments ("_object")) nil [6488 6684])
            ("tooltip-set-param" function (:arguments ("alist" "key" "value")) nil [6709 7058])
            ("declare-function" code nil nil [7060 7147])
            ("tooltip-show" function (:arguments ("text" "use-echo-area")) nil [7149 8427])
            ("declare-function" code nil nil [8429 8470])
            ("tooltip-hide" function (:arguments ("_ignored-arg")) nil [8472 8691])
            ("tooltip-identifier-from-point" function (:arguments ("point")) nil [8727 9227])
            ("tooltip-region-active-p" function nil nil [9229 9352])
            ("tooltip-expr-to-print" function (:arguments ("event")) nil [9354 9907])
            ("tooltip-process-prompt-regexp" function (:arguments ("process")) nil [9909 10498])
            ("tooltip-strip-prompt" function (:arguments ("process" "output")) nil [10500 10766])
            ("tooltip-help-message" variable nil nil [10789 10953])
            ("tooltip-previous-message" variable nil nil [10955 11035])
            ("tooltip-show-help-non-mode" function (:arguments ("help")) nil [11037 12056])
            ("tooltip-show-help" function (:arguments ("msg")) nil [12058 12871])
            ("tooltip-help-tips" function (:arguments ("_event")) nil [12873 13226])
            ("tooltip" package nil nil [13228 13246]))          
    :file "tooltip.el"
    :pointmax 13273
    :fsize 13272
    :lastmodtime '(20806 7945 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "mwheel.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("custom" include nil nil [1418 1435])
            ("timer" include nil nil [1436 1452])
            ("mouse-wheel-mode" variable nil nil [1454 1479])
            ("mouse-wheel-change-button" function (:arguments ("var" "button")) nil [1656 1819])
            ("mouse-wheel-down-button" variable (:default-value 4) nil [1821 1855])
            ("make-obsolete-variable" code nil nil [1856 1963])
            ("mouse-wheel-down-event" variable (:default-value (if (or (featurep (quote w32-win)) (featurep (quote ns-win))) (quote wheel-up) (intern (format "mouse-%s" mouse-wheel-down-button)))) nil [1964 2223])
            ("mouse-wheel-up-button" variable (:default-value 5) nil [2225 2257])
            ("make-obsolete-variable" code nil nil [2258 2361])
            ("mouse-wheel-up-event" variable (:default-value (if (or (featurep (quote w32-win)) (featurep (quote ns-win))) (quote wheel-down) (intern (format "mouse-%s" mouse-wheel-up-button)))) nil [2362 2617])
            ("mouse-wheel-click-button" variable (:default-value 2) nil [2619 2654])
            ("make-obsolete-variable" code nil nil [2655 2764])
            ("mouse-wheel-click-event" variable (:default-value (intern (format "mouse-%s" mouse-wheel-click-button))) nil [2765 3256])
            ("mouse-wheel-inhibit-click-time" variable (:default-value 0.35) nil [3258 3413])
            ("mouse-wheel-scroll-amount" variable (:default-value (quote (5 ((shift) . 1) ((control))))) nil [3415 4948])
            ("mouse-wheel-progressive-speed" variable (:default-value t) nil [4950 5267])
            ("mouse-wheel-follow-mouse" variable (:default-value t) nil [5269 5480])
            ("if" code nil nil [5502 5869])
            ("if" code nil nil [5873 6029])
            ("mwheel-inhibit-click-event-timer" variable nil nil [6032 6139])
            ("mwheel-inhibit-click-timeout" function nil nil [6141 6340])
            ("mwheel-filter-click-events" function nil nil [6342 6550])
            ("mwheel-scroll-up-function" variable (:default-value (quote scroll-up)) nil [6552 6649])
            ("mwheel-scroll-down-function" variable (:default-value (quote scroll-down)) nil [6651 6754])
            ("mwheel-scroll" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [6756 10076])
            ("put" code nil nil [10078 10116])
            ("mwheel-installed-bindings" variable nil nil [10118 10156])
            ("define-minor-mode" code nil nil [10158 11315])
            ("mwheel-install" function (:arguments ("uninstall")) nil [11375 11492])
            ("mwheel" package nil nil [11494 11511]))          
    :file "mwheel.el"
    :pointmax 11537
    :fsize 11536
    :lastmodtime '(20806 7943 0 0)
    :unmatched-syntax '((close-paren 6029 . 6030) (symbol 5483 . 5499) (open-paren 5482 . 5483))
    )
   (semanticdb-table "dos-w32.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("setq" code nil nil [1087 1112])
            ("setq" code nil nil [1114 1244])
            ("setq" code nil nil [1287 1311])
            ("file-name-buffer-file-type-alist" variable (:default-value (quote (("[:/].*config.sys$") ("\\.\\(obj\\|exe\\|com\\|lib\\|sys\\|bin\\|ico\\|pif\\|class\\)$" . t) ("\\.\\(dll\\|drv\\|386\\|vxd\\|fon\\|fnt\\|fot\\|ttf\\|grp\\)$" . t) ("\\.\\(bmp\\|wav\\|avi\\|mpg\\|jpg\\|tif\\|mov\\|au\\)$" . t) ("\\.\\(arc\\|zip\\|pak\\|lzh\\|zoo\\)$" . t) ("\\.\\(a\\|o\\|tar\\|z\\|gz\\|taz\\|jar\\)$" . t) ("\\.sx[dmicw]$" . t) ("\\.tp[ulpw]$" . t) ("[:/]tags$")))) nil [1367 2293])
            ("find-buffer-file-type-match" function (:arguments ("filename")) nil [2390 2744])
            ("find-buffer-file-type" function (:arguments ("filename")) nil [2797 3102])
            ("setq-default" code nil nil [3104 3159])
            ("find-buffer-file-type-coding-system" function (:arguments ("command")) nil [3161 7611])
            ("modify-coding-system-alist" code nil nil [7613 7687])
            ("find-file-binary" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [7689 7892])
            ("find-file-text" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [7894 8100])
            ("find-file-not-found-set-buffer-file-coding-system" function nil nil [8102 8720])
            ("add-hook" code nil nil [8773 8868])
            ("untranslated-filesystem-list" variable nil nil [8940 9173])
            ("untranslated-canonical-name" function (:arguments ("filename")) nil [9175 10122])
            ("untranslated-file-p" function (:arguments ("filename")) nil [10124 10530])
            ("add-untranslated-filesystem" function
               (:user-visible-flag t
                :arguments ("filesystem"))
                nil [10532 11264])
            ("remove-untranslated-filesystem" function
               (:user-visible-flag t
                :arguments ("filesystem"))
                nil [11266 11747])
            ("direct-print-region-use-command-dot-com" variable (:default-value t) nil [11822 11980])
            ("direct-print-region-helper" function (:arguments ("printer" "start" "end" "lpr-prog" "_delete-text" "_buf" "_display" "rest")) nil [12095 16059])
            ("printer-name" variable nil nil [16061 16082])
            ("declare-function" code nil nil [16084 16134])
            ("direct-print-region-function" function (:arguments ("start" "end" "lpr-prog" "delete-text" "buf" "display" "rest")) nil [16136 17602])
            ("print-region-function" variable nil nil [17604 17634])
            ("lpr-headers-switches" variable nil nil [17635 17664])
            ("setq" code nil nil [17665 17723])
            ("setq" code nil nil [18194 18256])
            ("ps-printer-name" variable nil nil [18258 18282])
            ("direct-ps-print-region-function" function (:arguments ("start" "end" "lpr-prog" "delete-text" "buf" "display" "rest")) nil [18284 18964])
            ("ps-print-region-function" variable nil nil [18966 18999])
            ("setq" code nil nil [19000 19064])
            ("dos-w32" package nil nil [19194 19212]))          
    :file "dos-w32.el"
    :pointmax 19239
    :fsize 19238
    :lastmodtime '(20806 7940 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "ls-lisp.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("ls-lisp" customgroup (:user-visible-flag t) nil [2384 2493])
            ("ls-lisp-set-options" function nil nil [2495 2688])
            ("ls-lisp-emulation" variable (:default-value (cond ((memq system-type (quote (hpux usg-unix-v irix berkeley-unix))) (quote UNIX)))) nil [2690 3784])
            ("define-obsolete-variable-alias" code nil nil [4051 4140])
            ("ls-lisp-ignore-case" variable (:default-value (memq ls-lisp-emulation (quote (MS-Windows MacOS)))) nil [4142 4351])
            ("ls-lisp-dirs-first" variable (:default-value (eq ls-lisp-emulation (quote MS-Windows))) nil [4353 4689])
            ("ls-lisp-verbosity" variable (:default-value (cond ((eq ls-lisp-emulation (quote MacOS)) nil) ((eq ls-lisp-emulation (quote MS-Windows)) (if (and (fboundp (quote w32-using-nt)) (w32-using-nt)) (quote (links)))) ((eq ls-lisp-emulation (quote UNIX)) (quote (links uid))) (t (quote (links uid gid))))) nil [4691 5827])
            ("ls-lisp-use-insert-directory-program" variable (:default-value (not (memq system-type (quote (ms-dos windows-nt))))) nil [5829 6209])
            ("ls-lisp-support-shell-wildcards" variable (:default-value t) nil [6305 6526])
            ("ls-lisp-format-time-list" variable (:default-value (quote ("%b %e %H:%M" "%b %e  %Y"))) nil [6528 7271])
            ("ls-lisp-use-localized-time-format" variable nil nil [7273 7624])
            ("original-insert-directory" variable nil nil [7626 7735])
            ("ls-lisp-uid-d-fmt" variable (:default-value "-%d") nil [7737 7805])
            ("ls-lisp-uid-s-fmt" variable (:default-value "-%s") nil [7806 7872])
            ("ls-lisp-gid-d-fmt" variable (:default-value "-%d") nil [7873 7941])
            ("ls-lisp-gid-s-fmt" variable (:default-value "-%s") nil [7942 8014])
            ("ls-lisp-filesize-d-fmt" variable (:default-value "%d") nil [8015 8093])
            ("ls-lisp-filesize-f-fmt" variable (:default-value "%.0f") nil [8094 8172])
            ("or" code nil nil [8225 8366])
            ("insert-directory" function (:arguments ("file" "switches" "wildcard" "full-directory-p")) nil [8442 12175])
            ("ls-lisp-insert-directory" function (:arguments ("file" "switches" "time-index" "wildcard-regexp" "full-directory-p")) nil [12177 17325])
            ("ls-lisp-sanitize" function (:arguments ("file-alist")) nil [17356 18100])
            ("ls-lisp-column-format" function (:arguments ("file-alist")) nil [18102 19436])
            ("ls-lisp-delete-matching" function (:arguments ("regexp" "list")) nil [19438 19759])
            ("ls-lisp-string-lessp" function (:arguments ("s1" "s2")) nil [19761 20085])
            ("ls-lisp-handle-switches" function (:arguments ("file-alist" "switches")) nil [20087 22565])
            ("ls-lisp-classify-file" function (:arguments ("filename" "fattr")) nil [22567 23293])
            ("ls-lisp-classify" function (:arguments ("filedata")) nil [23295 23906])
            ("ls-lisp-extension" function (:arguments ("filename")) nil [23908 24709])
            ("ls-lisp-format" function (:arguments ("file-name" "file-attr" "file-size" "switches" "time-index")) nil [24711 27445])
            ("ls-lisp-time-index" function (:arguments ("switches")) nil [27447 27787])
            ("ls-lisp-format-time" function (:arguments ("file-attr" "time-index")) nil [27803 29295])
            ("ls-lisp-format-file-size" function (:arguments ("file-size" "human-readable")) nil [29297 29549])
            ("ls-lisp" package nil nil [29551 29569]))          
    :file "ls-lisp.el"
    :pointmax 29596
    :fsize 29595
    :lastmodtime '(20806 7942 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "w32-fns.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("w32-vars" include nil nil [911 930])
            ("w32-common-fns" include nil nil [931 956])
            ("explicit-shell-file-name" variable nil nil [958 991])
            ("declare-function" code nil nil [1013 1059])
            ("declare-function" code nil nil [1060 1110])
            ("declare-function" code nil nil [1111 1166])
            ("setq" code nil nil [1253 1286])
            ("w32-shell-name" function nil nil [1288 1504])
            ("w32-system-shell-p" function (:arguments ("shell-name")) nil [1506 1653])
            ("w32-shell-dos-semantics" function nil nil [1655 1973])
            ("w32-quote-process-args" variable nil nil [1975 2006])
            ("w32-check-shell-configuration" function (:user-visible-flag t) nil [2033 4491])
            ("add-hook" code nil nil [4493 4551])
            ("set-default-process-coding-system" function nil nil [4592 5599])
            ("add-hook" code nil nil [5601 5664])
            ("w32-valid-locales" variable nil nil [5732 5808])
            ("if" code nil nil [5894 6186])
            ("w32-list-locales" function (:user-visible-flag t) nil [6188 6655])
            ("w32-convert-standard-filename" function (:arguments ("filename")) nil [7427 8666])
            ("set-w32-system-coding-system" function
               (:user-visible-flag t
                :arguments ("coding-system"))
                nil [8668 9394])
            ("defvaralias" code nil nil [9506 9567])
            ("set-message-beep" code nil nil [9620 9642])
            ("w32-add-charset-info" function (:arguments ("xlfd-charset" "windows-charset" "codepage")) nil [9644 10372])
            ("w32-add-charset-info" code nil nil [10525 10585])
            ("w32-add-charset-info" code nil nil [10586 10646])
            ("w32-add-charset-info" code nil nil [10703 10762])
            ("w32-add-charset-info" code nil nil [10763 10822])
            ("w32-add-charset-info" code nil nil [10823 10888])
            ("w32-add-charset-info" code nil nil [10889 10957])
            ("w32-add-charset-info" code nil nil [10958 11020])
            ("w32-add-charset-info" code nil nil [11021 11079])
            ("w32-add-charset-info" code nil nil [11080 11140])
            ("w32-add-charset-info" code nil nil [11141 11199])
            ("w32-add-charset-info" code nil nil [11200 11252])
            ("w32-add-charset-info" code nil nil [11253 11310])
            ("w32-add-charset-info" code nil nil [11311 11375])
            ("w32-add-charset-info" code nil nil [11376 11437])
            ("w32-add-charset-info" code nil nil [11438 11498])
            ("w32-add-charset-info" code nil nil [11499 11559])
            ("w32-add-charset-info" code nil nil [11560 11619])
            ("w32-add-charset-info" code nil nil [11620 11679])
            ("w32-add-charset-info" code nil nil [11680 11740])
            ("w32-add-charset-info" code nil nil [11741 11801])
            ("w32-add-charset-info" code nil nil [11802 11860])
            ("w32-add-charset-info" code nil nil [11861 11922])
            ("w32-add-charset-info" code nil nil [11923 11981])
            ("w32-add-charset-info" code nil nil [11982 12048])
            ("w32-add-charset-info" code nil nil [12049 12110])
            ("w32-add-charset-info" code nil nil [12111 12168])
            ("w32-add-charset-info" code nil nil [12169 12227])
            ("w32-add-charset-info" code nil nil [12378 12438])
            ("w32-add-charset-info" code nil nil [12439 12501])
            ("w32-add-charset-info" code nil nil [12502 12566])
            ("w32-add-charset-info" code nil nil [12567 12631])
            ("w32-add-charset-info" code nil nil [12632 12687])
            ("w32-add-charset-info" code nil nil [12688 12745])
            ("make-obsolete-variable" code nil nil [12747 12852])
            ("make-obsolete-variable" code nil nil [12853 12963])
            ("autoload-make-program" variable nil nil [13019 13049])
            ("generated-autoload-file" variable nil nil [13050 13082])
            ("w32-batch-update-autoloads" function nil nil [13084 13633])
            ("w32-append-code-lines" function (:arguments ("orig" "extra")) nil [13635 14129]))          
    :file "w32-fns.el"
    :pointmax 14156
    :fsize 14155
    :lastmodtime '(20806 7946 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "w32-vars.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("w32" customgroup (:user-visible-flag t) nil [936 1044])
            ("w32-use-w32-font-dialog" variable (:default-value t) nil [1108 1347])
            ("w32-list-proportional-fonts" variable nil nil [1349 1448])
            ("make-obsolete-variable" code nil nil [1449 1527])
            ("unless" code nil nil [1529 1698])
            ("unless" code nil nil [1700 2038])
            ("w32-fixed-font-alist" variable (:default-value (quote ("Font menu" ("Misc" ("fixed" "Fixedsys") ("") ("Terminal 5x4" "-*-Terminal-normal-r-*-*-*-45-*-*-c-40-*-oem") ("Terminal 6x8" "-*-Terminal-normal-r-*-*-*-60-*-*-c-80-*-oem") ("Terminal 9x5" "-*-Terminal-normal-r-*-*-*-90-*-*-c-50-*-oem") ("Terminal 9x7" "-*-Terminal-normal-r-*-*-*-90-*-*-c-70-*-oem") ("Terminal 9x8" "-*-Terminal-normal-r-*-*-*-90-*-*-c-80-*-oem") ("Terminal 12x12" "-*-Terminal-normal-r-*-*-*-120-*-*-c-120-*-oem") ("Terminal 14x10" "-*-Terminal-normal-r-*-*-*-135-*-*-c-100-*-oem") ("Terminal 6x6 Bold" "-*-Terminal-bold-r-*-*-*-60-*-*-c-60-*-oem") ("") ("Lucida Sans Typewriter.8" "-*-Lucida Sans Typewriter-normal-r-*-*-11-*-*-*-c-*-iso8859-1") ("Lucida Sans Typewriter.9" "-*-Lucida Sans Typewriter-normal-r-*-*-12-*-*-*-c-*-iso8859-1") ("Lucida Sans Typewriter.10" "-*-Lucida Sans Typewriter-normal-r-*-*-13-*-*-*-c-*-iso8859-1") ("Lucida Sans Typewriter.11" "-*-Lucida Sans Typewriter-normal-r-*-*-15-*-*-*-c-*-iso8859-1") ("Lucida Sans Typewriter.12" "-*-Lucida Sans Typewriter-normal-r-*-*-16-*-*-*-c-*-iso8859-1") ("Lucida Sans Typewriter.8 Bold" "-*-Lucida Sans Typewriter-semibold-r-*-*-11-*-*-*-c-*-iso8859-1") ("Lucida Sans Typewriter.9 Bold" "-*-Lucida Sans Typewriter-semibold-r-*-*-12-*-*-*-c-*-iso8859-1") ("Lucida Sans Typewriter.10 Bold" "-*-Lucida Sans Typewriter-semibold-r-*-*-13-*-*-*-c-*-iso8859-1") ("Lucida Sans Typewriter.11 Bold" "-*-Lucida Sans Typewriter-semibold-r-*-*-15-*-*-*-c-*-iso8859-1") ("Lucida Sans Typewriter.12 Bold" "-*-Lucida Sans Typewriter-semibold-r-*-*-16-*-*-*-c-*-iso8859-1")) ("Courier" ("Courier 10x8" "-*-Courier-*normal-r-*-*-*-97-*-*-c-80-iso8859-1") ("Courier 12x9" "-*-Courier-*normal-r-*-*-*-120-*-*-c-90-iso8859-1") ("Courier 15x12" "-*-Courier-*normal-r-*-*-*-150-*-*-c-120-iso8859-1") ("") ("8" "-*-Courier New-normal-r-*-*-11-*-*-*-c-*-iso8859-1") ("9" "-*-Courier New-normal-r-*-*-12-*-*-*-c-*-iso8859-1") ("10" "-*-Courier New-normal-r-*-*-13-*-*-*-c-*-iso8859-1") ("11" "-*-Courier New-normal-r-*-*-15-*-*-*-c-*-iso8859-1") ("12" "-*-Courier New-normal-r-*-*-16-*-*-*-c-*-iso8859-1") ("8 bold" "-*-Courier New-bold-r-*-*-11-*-*-*-c-*-iso8859-1") ("9 bold" "-*-Courier New-bold-r-*-*-12-*-*-*-c-*-iso8859-1") ("10 bold" "-*-Courier New-bold-r-*-*-13-*-*-*-c-*-iso8859-1") ("11 bold" "-*-Courier New-bold-r-*-*-15-*-*-*-c-*-iso8859-1") ("12 bold" "-*-Courier New-bold-r-*-*-16-*-*-*-c-*-iso8859-1") ("8 italic" "-*-Courier New-normal-i-*-*-11-*-*-*-c-*-iso8859-1") ("9 italic" "-*-Courier New-normal-i-*-*-12-*-*-*-c-*-iso8859-1") ("10 italic" "-*-Courier New-normal-i-*-*-13-*-*-*-c-*-iso8859-1") ("11 italic" "-*-Courier New-normal-i-*-*-15-*-*-*-c-*-iso8859-1") ("12 italic" "-*-Courier New-normal-i-*-*-16-*-*-*-c-*-iso8859-1") ("8 bold italic" "-*-Courier New-bold-i-*-*-11-*-*-*-c-*-iso8859-1") ("9 bold italic" "-*-Courier New-bold-i-*-*-12-*-*-*-c-*-iso8859-1") ("10 bold italic" "-*-Courier New-bold-i-*-*-13-*-*-*-c-*-iso8859-1") ("11 bold italic" "-*-Courier New-bold-i-*-*-15-*-*-*-c-*-iso8859-1") ("12 bold italic" "-*-Courier New-bold-i-*-*-16-*-*-*-c-*-iso8859-1"))))) nil [2077 6201])
            ("w32-vars" package nil nil [6203 6222]))          
    :file "w32-vars.el"
    :pointmax 6250
    :fsize 6249
    :lastmodtime '(20806 7946 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "w32-common-fns.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("w32-version" function nil nil [972 1156])
            ("w32-using-nt" function nil nil [1158 1315])
            ("declare-function" code nil nil [1317 1372])
            ("declare-function" code nil nil [1373 1428])
            ("declare-function" code nil nil [1429 1495])
            ("x-set-selection" function (:arguments ("type" "data")) nil [1540 2736])
            ("x-get-selection" function (:arguments ("type" "_data-type")) nil [2738 3363])
            ("x-selection-owner-p" function (:arguments ("type")) nil [3409 3544])
            ("global-set-key" code nil nil [3699 3733])
            ("global-set-key" code nil nil [3734 3768])
            ("w32-charset-info-alist" variable nil nil [3770 3801])
            ("x-last-selected-text" variable nil nil [4000 4033])
            ("x-get-selection-value" function nil nil [4035 4702])
            ("defalias" code nil nil [4705 4757])
            ("setq" code nil nil [4834 4881])
            ("setq" code nil nil [4882 4939])
            ("w32-common-fns" package nil nil [4941 4966]))          
    :file "w32-common-fns.el"
    :pointmax 4967
    :fsize 4966
    :lastmodtime '(20806 7946 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "disp-table.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("put" code nil nil [989 1035])
            ("make-display-table" function nil nil [1052 1159])
            ("or" code nil nil [1161 1243])
            ("put" code nil nil [1313 1352])
            ("put" code nil nil [1353 1386])
            ("put" code nil nil [1387 1422])
            ("put" code nil nil [1423 1459])
            ("put" code nil nil [1460 1506])
            ("put" code nil nil [1507 1551])
            ("display-table-slot" function (:arguments ("display-table" "slot")) nil [1568 2061])
            ("set-display-table-slot" function (:arguments ("display-table" "slot" "value")) nil [2078 2592])
            ("describe-display-table" function (:arguments ("dt")) nil [2609 3528])
            ("display-table-print-array" function (:arguments ("desc")) nil [3530 3929])
            ("describe-current-display-table" function (:user-visible-flag t) nil [3946 4286])
            ("standard-display-8bit" function (:arguments ("l" "h")) nil [4303 5133])
            ("standard-display-default" function (:arguments ("l" "h")) nil [5150 5463])
            ("standard-display-ascii" function (:arguments ("c" "s")) nil [5658 5877])
            ("standard-display-g1" function (:arguments ("c" "sc")) nil [5894 6387])
            ("standard-display-graphic" function (:arguments ("c" "gc")) nil [6404 6884])
            ("standard-display-underline" function (:arguments ("c" "uc")) nil [6901 7253])
            ("create-glyph" function (:arguments ("string")) nil [7270 7699])
            ("make-glyph-code" function (:arguments ("char" "face")) nil [7716 8131])
            ("glyph-char" function (:arguments ("glyph")) nil [8148 8287])
            ("glyph-face" function (:arguments ("glyph")) nil [8304 8612])
            ("standard-display-european" function (:arguments ("arg")) nil [8629 10768])
            ("disp-table" package nil nil [10770 10791]))          
    :file "disp-table.el"
    :pointmax 10821
    :fsize 10820
    :lastmodtime '(20806 7940 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "frame.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("cl-lib" include nil nil [932 949])
            ("frame-creation-function-alist" variable (:default-value (list (cons nil (if (fboundp (quote tty-create-frame-with-faces)) (quote tty-create-frame-with-faces) (lambda (_parameters) (error "Can't create multiple frames without a window system")))))) nil [952 1434])
            ("window-system-default-frame-alist" variable nil nil [1436 1879])
            ("display-format-alist" variable nil nil [1881 2133])
            ("initial-frame-alist" variable nil nil [2325 3555])
            ("minibuffer-frame-alist" variable (:default-value (quote ((width . 80) (height . 2)))) nil [3557 4259])
            ("handle-delete-frame" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [4261 4730])
            ("frame-initial-frame" variable nil nil [5508 5540])
            ("frame-initial-frame-alist" variable nil nil [5619 5653])
            ("frame-initial-geometry-arguments" variable nil nil [5655 5700])
            ("frame-initialize" function nil nil [5889 7602])
            ("frame-notice-user-settings" variable (:default-value t) nil [7604 7713])
            ("declare-function" code nil nil [7715 7774])
            ("frame-notice-user-settings" function nil nil [7971 18967])
            ("make-initial-minibuffer-frame" function (:arguments ("display")) nil [18969 19170])
            ("modify-all-frames-parameters" function (:arguments ("alist")) nil [19237 20412])
            ("get-other-frame" function nil nil [20414 20738])
            ("next-multiframe-window" function (:user-visible-flag t) nil [20740 20998])
            ("previous-multiframe-window" function (:user-visible-flag t) nil [21000 21264])
            ("window-system-for-display" function (:arguments ("display")) nil [21266 21602])
            ("make-frame-on-display" function
               (:user-visible-flag t
                :arguments ("display" "parameters"))
                nil [21604 21873])
            ("declare-function" code nil nil [21875 21932])
            ("close-display-connection" function
               (:user-visible-flag t
                :arguments ("display"))
                nil [21934 23286])
            ("make-frame-command" function (:user-visible-flag t) nil [23288 23551])
            ("before-make-frame-hook" variable nil nil [23553 23636])
            ("after-make-frame-functions" variable nil nil [23638 23785])
            ("after-setting-font-hook" variable nil nil [23787 23883])
            ("define-obsolete-function-alias" code nil nil [23913 23975])
            ("frame-inherited-parameters" variable (:default-value (quote nil)) nil [23977 24145])
            ("make-frame" function
               (:user-visible-flag t
                :arguments ("parameters"))
                nil [24147 27818])
            ("filtered-frame-list" function (:arguments ("predicate")) nil [27820 28119])
            ("minibuffer-frame-list" function nil nil [28121 28314])
            ("get-device-terminal" function (:arguments ("device")) nil [28366 29119])
            ("frames-on-display-list" function (:arguments ("device")) nil [29121 29563])
            ("framep-on-display" function (:arguments ("terminal")) nil [29565 30004])
            ("frame-remove-geometry-params" function (:arguments ("param-list")) nil [30006 30867])
            ("declare-function" code nil nil [30869 30918])
            ("select-frame-set-input-focus" function (:arguments ("frame" "norecord")) nil [30920 32030])
            ("other-frame" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [32032 33011])
            ("iconify-or-deiconify-frame" function (:user-visible-flag t) nil [33013 33243])
            ("suspend-frame" function (:user-visible-flag t) nil [33245 33722])
            ("make-frame-names-alist" function nil nil [33724 34130])
            ("frame-name-history" variable nil nil [34132 34163])
            ("select-frame-by-name" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [34164 34855])
            ("frame-background-mode" variable nil nil [34882 35462])
            ("declare-function" code nil nil [35464 35558])
            ("inhibit-frame-set-background-mode" variable nil nil [35560 35606])
            ("frame-set-background-mode" function (:arguments ("frame" "keep-face-specs")) nil [35608 38506])
            ("frame-terminal-default-bg-mode" function (:arguments ("frame")) nil [38508 39024])
            ("current-frame-configuration" function nil nil [39055 39651])
            ("set-frame-configuration" function (:arguments ("configuration" "nodelete")) nil [39653 41658])
            ("frame-height" function (:arguments ("frame")) nil [41753 42419])
            ("frame-width" function (:arguments ("frame")) nil [42421 42626])
            ("declare-function" code nil nil [42628 42733])
            ("define-obsolete-function-alias" code nil nil [42735 42808])
            ("set-frame-font" function
               (:user-visible-flag t
                :arguments ("font" "keep-size" "frames"))
                nil [42810 46117])
            ("set-frame-parameter" function (:arguments ("frame" "parameter" "value")) nil [46119 46370])
            ("set-background-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [46372 46842])
            ("set-foreground-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [46844 47314])
            ("set-cursor-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [47316 47802])
            ("set-mouse-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [47804 48270])
            ("set-border-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [48272 48654])
            ("define-minor-mode" code nil nil [48656 49536])
            ("define-minor-mode" code nil nil [49538 50379])
            ("set-frame-name" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [50381 50757])
            ("frame-current-scroll-bars" function (:arguments ("frame")) nil [50759 51286])
            ("selected-terminal" function nil nil [51322 51432])
            ("declare-function" code nil nil [51434 51477])
            ("display-mouse-p" function (:arguments ("display")) nil [51479 52144])
            ("display-popup-menus-p" function (:arguments ("display")) nil [52146 52531])
            ("display-graphic-p" function (:arguments ("display")) nil [52533 52990])
            ("display-images-p" function (:arguments ("display")) nil [52992 53270])
            ("defalias" code nil nil [53272 53324])
            ("defalias" code nil nil [53325 53376])
            ("display-selections-p" function (:arguments ("display")) nil [53378 54022])
            ("declare-function" code nil nil [54024 54090])
            ("display-screens" function (:arguments ("display")) nil [54092 54343])
            ("declare-function" code nil nil [54345 54416])
            ("display-pixel-height" function (:arguments ("display")) nil [54418 54800])
            ("declare-function" code nil nil [54802 54872])
            ("display-pixel-width" function (:arguments ("display")) nil [54874 55252])
            ("display-mm-dimensions-alist" variable nil nil [55254 55901])
            ("declare-function" code nil nil [55903 55971])
            ("display-mm-height" function (:arguments ("display")) nil [55973 56431])
            ("declare-function" code nil nil [56433 56500])
            ("display-mm-width" function (:arguments ("display")) nil [56502 56957])
            ("declare-function" code nil nil [56959 57031])
            ("display-backing-store" function (:arguments ("display")) nil [57033 57434])
            ("declare-function" code nil nil [57436 57505])
            ("display-save-under" function (:arguments ("display")) nil [57507 57787])
            ("declare-function" code nil nil [57789 57854])
            ("display-planes" function (:arguments ("display")) nil [57856 58180])
            ("declare-function" code nil nil [58182 58252])
            ("display-color-cells" function (:arguments ("display")) nil [58254 58582])
            ("declare-function" code nil nil [58584 58655])
            ("display-visual-class" function (:arguments ("display")) nil [58657 59130])
            ("frame-geom-value-cons" function (:arguments ("type" "value" "frame")) nil [59162 61032])
            ("frame-geom-spec-cons" function (:arguments ("spec" "frame")) nil [61034 62293])
            ("delete-other-frames" function
               (:user-visible-flag t
                :arguments ("frame"))
                nil [62297 63349])
            ("define-obsolete-variable-alias" code nil nil [63394 63480])
            ("cursor" customgroup (:user-visible-flag t) nil [63504 63589])
            ("blink-cursor-delay" variable (:default-value 0.5) nil [63591 63719])
            ("blink-cursor-interval" variable (:default-value 0.5) nil [63721 63839])
            ("blink-cursor-idle-timer" variable nil nil [63841 64016])
            ("blink-cursor-timer" variable nil nil [64018 64180])
            ("blink-cursor-start" function nil nil [64182 64843])
            ("blink-cursor-timer-function" function nil nil [64845 64993])
            ("blink-cursor-end" function nil nil [64995 65390])
            ("define-obsolete-variable-alias" code nil nil [65392 65464])
            ("define-minor-mode" code nil nil [65466 66460])
            ("define-key" code nil nil [66483 66531])
            ("define-key" code nil nil [66532 66581])
            ("define-key" code nil nil [66582 66624])
            ("define-key" code nil nil [66625 66666])
            ("define-obsolete-variable-alias" code nil nil [66716 66798])
            ("make-variable-buffer-local" code nil nil [66800 66854])
            ("make-obsolete-variable" code nil nil [66881 66975])
            ("frame" package nil nil [66977 66993]))          
    :file "frame.el"
    :pointmax 67018
    :fsize 67017
    :lastmodtime '(20806 7941 0 0)
    :unmatched-syntax '((close-paren 949 . 950) (symbol 914 . 931) (open-paren 913 . 914))
    )
   (semanticdb-table "mouse.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("put" code nil nil [1218 1260])
            ("mouse-yank-at-point" variable nil nil [1262 1401])
            ("mouse-drag-copy-region" variable nil nil [1403 1656])
            ("mouse-1-click-follows-link" variable (:default-value 450) nil [1658 3089])
            ("mouse-1-click-in-non-selected-windows" variable (:default-value t) nil [3091 3433])
            ("popup-menu" function (:arguments ("menu" "position" "prefix")) nil [3490 5828])
            ("popup-menu-normalize-position" function (:arguments ("position")) nil [5830 6542])
            ("minor-mode-menu-from-indicator" function
               (:user-visible-flag t
                :arguments ("indicator"))
                nil [6544 7655])
            ("mouse-minor-mode-menu" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [7657 7889])
            ("mouse-menu-major-mode-map" function nil nil [7891 8483])
            ("mouse-menu-non-singleton" function (:arguments ("menubar")) nil [8485 8940])
            ("mouse-menu-bar-map" function nil nil [8942 11154])
            ("mouse-major-mode-menu" function (:arguments ("event" "prefix")) nil [11156 11522])
            ("mouse-popup-menubar" function (:arguments ("event" "prefix")) nil [11524 11949])
            ("mouse-popup-menubar-stuff" function (:arguments ("event" "prefix")) nil [11951 12413])
            ("mouse-minibuffer-check" function (:arguments ("event")) nil [12454 12765])
            ("mouse-delete-window" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [12767 13065])
            ("mouse-select-window" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [13067 13491])
            ("mouse-tear-off-window" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [13493 13850])
            ("mouse-delete-other-windows" function (:user-visible-flag t) nil [13852 13986])
            ("mouse-split-window-vertically" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [13988 14629])
            ("mouse-split-window-horizontally" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [14631 15270])
            ("mouse-drag-line" function (:arguments ("start-event" "line")) nil [16103 20496])
            ("mouse-drag-mode-line" function
               (:user-visible-flag t
                :arguments ("start-event"))
                nil [20498 20662])
            ("mouse-drag-header-line" function
               (:user-visible-flag t
                :arguments ("start-event"))
                nil [20664 20834])
            ("mouse-drag-vertical-line" function
               (:user-visible-flag t
                :arguments ("start-event"))
                nil [20836 21011])
            ("mouse-set-point" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [21014 21370])
            ("mouse-last-region-beg" variable nil nil [21372 21406])
            ("mouse-last-region-end" variable nil nil [21407 21441])
            ("mouse-last-region-tick" variable nil nil [21442 21477])
            ("mouse-region-match" function nil nil [21479 21771])
            ("mouse-set-region" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [21773 22786])
            ("mouse-set-region-1" function nil nil [22788 23183])
            ("mouse-scroll-delay" variable (:default-value 0.25) nil [23185 23692])
            ("mouse-scroll-min-lines" variable (:default-value 1) nil [23694 24144])
            ("mouse-scroll-subr" function (:arguments ("window" "jump" "overlay" "start")) nil [24146 25578])
            ("mouse-selection-click-count" variable nil nil [25580 25618])
            ("mouse-selection-click-count-buffer" variable nil nil [25620 25667])
            ("mouse-drag-region" function
               (:user-visible-flag t
                :arguments ("start-event"))
                nil [25669 26229])
            ("mouse-posn-property" function (:arguments ("pos" "property")) nil [26232 26941])
            ("mouse-on-link-p" function (:arguments ("pos")) nil [26943 29168])
            ("mouse-fixup-help-message" function (:arguments ("msg")) nil [29170 29959])
            ("mouse-drag-track" function (:arguments ("start-event" "do-mouse-drag-region-post-process")) nil [29961 36136])
            ("mouse--drag-set-mark-and-point" function (:arguments ("start" "click" "click-count")) nil [36138 36504])
            ("mouse--remap-link-click-p" function (:arguments ("start-event" "end-event")) nil [36506 37155])
            ("mouse-skip-word" function (:arguments ("dir")) nil [37210 38312])
            ("mouse-start-end" function (:arguments ("start" "end" "mode")) nil [38314 40261])
            ("mouse-set-mark-fast" function (:arguments ("click")) nil [40345 40561])
            ("mouse-undouble-last-event" function (:arguments ("events")) nil [40563 41236])
            ("mouse-set-mark" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [41311 41847])
            ("mouse-kill" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [41849 42256])
            ("mouse-yank-at-click" function
               (:user-visible-flag t
                :arguments ("click" "arg"))
                nil [42258 43026])
            ("mouse-yank-primary" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [43028 44474])
            ("mouse-kill-ring-save" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [44476 44774])
            ("mouse-save-then-kill-posn" variable nil nil [45009 45047])
            ("mouse-save-then-kill-delete-region" function (:arguments ("beg" "end")) nil [45049 46562])
            ("mouse-save-then-kill" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [46564 50009])
            ("global-set-key" code nil nil [50013 50064])
            ("global-set-key" code nil nil [50065 50119])
            ("global-set-key" code nil nil [50120 50175])
            ("global-set-key" code nil nil [50176 50236])
            ("global-set-key" code nil nil [50237 50287])
            ("mouse-secondary-overlay" variable
               (:constant-flag t
                :default-value (let ((ol (make-overlay (point-min) (point-min)))) (delete-overlay ol) (overlay-put ol (quote face) (quote secondary-selection)) ol))
                nil [50289 50570])
            ("mouse-secondary-click-count" variable nil nil [50572 50610])
            ("mouse-secondary-start" variable nil nil [50704 50738])
            ("mouse-start-secondary" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [50740 51383])
            ("mouse-set-secondary" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [51385 52006])
            ("mouse-drag-secondary" function
               (:user-visible-flag t
                :arguments ("start-event"))
                nil [52008 55195])
            ("mouse-yank-secondary" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [55197 55734])
            ("mouse-kill-secondary" function (:user-visible-flag t) nil [55736 56639])
            ("mouse-secondary-save-then-kill" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [56641 60547])
            ("mouse-buffer-menu-maxlen" variable (:default-value 20) nil [60551 60812])
            ("mouse-buffer-menu-mode-mult" variable (:default-value 4) nil [60814 61302])
            ("mouse-buffer-menu-mode-groups" variable (:default-value (mapcar (lambda (arg) (cons (purecopy (car arg)) (purecopy (cdr arg)))) (quote (("Info\\|Help\\|Apropos\\|Man" . "Help") ("\\bVM\\b\\|\\bMH\\b\\|Message\\|Mail\\|Group\\|Score\\|Summary\\|Article" . "Mail/News") ("\\<C\\>" . "C") ("ObjC" . "C") ("Text" . "Text") ("Outline" . "Text") ("\\(HT\\|SG\\|X\\|XHT\\)ML" . "SGML") ("log\\|diff\\|vc\\|cvs\\|Annotate" . "Version Control") ("Threads\\|Memory\\|Disassembly\\|Breakpoints\\|Frames\\|Locals\\|Registers\\|Inferior I/O\\|Debugger" . "GDB") ("Lisp" . "Lisp"))))) nil [61304 62114])
            ("mouse-buffer-menu" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [62116 65692])
            ("mouse-buffer-menu-alist" function (:arguments ("buffers")) nil [65694 66738])
            ("mouse-buffer-menu-split" function (:arguments ("title" "alist")) nil [66740 67493])
            ("define-obsolete-function-alias" code nil nil [67496 67581])
            ("font-menu-add-default" function nil nil [67603 67938])
            ("x-fixed-font-alist" variable (:default-value (list (purecopy "Font Menu") (cons (purecopy "Misc") (mapcar (lambda (arg) (cons (purecopy (car arg)) (purecopy (cdr arg)))) (quote (("fixed" "fixed") ("6x10" "-misc-fixed-medium-r-normal--10-*-*-*-c-60-iso8859-1" "6x10") ("6x12" "-misc-fixed-medium-r-semicondensed--12-*-*-*-c-60-iso8859-1" "6x12") ("6x13" "-misc-fixed-medium-r-semicondensed--13-*-*-*-c-60-iso8859-1" "6x13") ("7x13" "-misc-fixed-medium-r-normal--13-*-*-*-c-70-iso8859-1" "7x13") ("7x14" "-misc-fixed-medium-r-normal--14-*-*-*-c-70-iso8859-1" "7x14") ("8x13" "-misc-fixed-medium-r-normal--13-*-*-*-c-80-iso8859-1" "8x13") ("9x15" "-misc-fixed-medium-r-normal--15-*-*-*-c-90-iso8859-1" "9x15") ("10x20" "-misc-fixed-medium-r-normal--20-*-*-*-c-100-iso8859-1" "10x20") ("11x18" "-misc-fixed-medium-r-normal--18-*-*-*-c-110-iso8859-1" "11x18") ("12x24" "-misc-fixed-medium-r-normal--24-*-*-*-c-120-iso8859-1" "12x24") ("") ("clean 5x8" "-schumacher-clean-medium-r-normal--8-*-*-*-c-50-iso8859-1") ("clean 6x8" "-schumacher-clean-medium-r-normal--8-*-*-*-c-60-iso8859-1") ("clean 8x8" "-schumacher-clean-medium-r-normal--8-*-*-*-c-80-iso8859-1") ("clean 8x10" "-schumacher-clean-medium-r-normal--10-*-*-*-c-80-iso8859-1") ("clean 8x14" "-schumacher-clean-medium-r-normal--14-*-*-*-c-80-iso8859-1") ("clean 8x16" "-schumacher-clean-medium-r-normal--16-*-*-*-c-80-iso8859-1") ("") ("sony 8x16" "-sony-fixed-medium-r-normal--16-*-*-*-c-80-iso8859-1") ("lucidasanstypewriter-12" "-b&h-lucidatypewriter-medium-r-normal-sans-*-120-*-*-*-*-iso8859-1") ("lucidasanstypewriter-bold-14" "-b&h-lucidatypewriter-bold-r-normal-sans-*-140-*-*-*-*-iso8859-1") ("lucidasanstypewriter-bold-24" "-b&h-lucidatypewriter-bold-r-normal-sans-*-240-*-*-*-*-iso8859-1"))))) (cons (purecopy "Courier") (mapcar (lambda (arg) (cons (purecopy (car arg)) (purecopy (cdr arg)))) (quote (("8" "-adobe-courier-medium-r-normal--*-80-*-*-m-*-iso8859-1") ("10" "-adobe-courier-medium-r-normal--*-100-*-*-m-*-iso8859-1") ("12" "-adobe-courier-medium-r-normal--*-120-*-*-m-*-iso8859-1") ("14" "-adobe-courier-medium-r-normal--*-140-*-*-m-*-iso8859-1") ("18" "-adobe-courier-medium-r-normal--*-180-*-*-m-*-iso8859-1") ("24" "-adobe-courier-medium-r-normal--*-240-*-*-m-*-iso8859-1") ("8 bold" "-adobe-courier-bold-r-normal--*-80-*-*-m-*-iso8859-1") ("10 bold" "-adobe-courier-bold-r-normal--*-100-*-*-m-*-iso8859-1") ("12 bold" "-adobe-courier-bold-r-normal--*-120-*-*-m-*-iso8859-1") ("14 bold" "-adobe-courier-bold-r-normal--*-140-*-*-m-*-iso8859-1") ("18 bold" "-adobe-courier-bold-r-normal--*-180-*-*-m-*-iso8859-1") ("24 bold" "-adobe-courier-bold-r-normal--*-240-*-*-m-*-iso8859-1") ("8 slant" "-adobe-courier-medium-o-normal--*-80-*-*-m-*-iso8859-1") ("10 slant" "-adobe-courier-medium-o-normal--*-100-*-*-m-*-iso8859-1") ("12 slant" "-adobe-courier-medium-o-normal--*-120-*-*-m-*-iso8859-1") ("14 slant" "-adobe-courier-medium-o-normal--*-140-*-*-m-*-iso8859-1") ("18 slant" "-adobe-courier-medium-o-normal--*-180-*-*-m-*-iso8859-1") ("24 slant" "-adobe-courier-medium-o-normal--*-240-*-*-m-*-iso8859-1") ("8 bold slant" "-adobe-courier-bold-o-normal--*-80-*-*-m-*-iso8859-1") ("10 bold slant" "-adobe-courier-bold-o-normal--*-100-*-*-m-*-iso8859-1") ("12 bold slant" "-adobe-courier-bold-o-normal--*-120-*-*-m-*-iso8859-1") ("14 bold slant" "-adobe-courier-bold-o-normal--*-140-*-*-m-*-iso8859-1") ("18 bold slant" "-adobe-courier-bold-o-normal--*-180-*-*-m-*-iso8859-1") ("24 bold slant" "-adobe-courier-bold-o-normal--*-240-*-*-m-*-iso8859-1"))))))) nil [67940 72220])
            ("declare-function" code nil nil [72222 72275])
            ("mouse-select-font" function (:user-visible-flag t) nil [72277 72658])
            ("declare-function" code nil nil [72660 72707])
            ("mouse-set-font" function
               (:user-visible-flag t
                :arguments ("fonts"))
                nil [72709 73556])
            ("mouse-appearance-menu-map" variable nil nil [73558 73596])
            ("declare-function" code nil nil [73597 73664])
            ("declare-function" code nil nil [73675 73781])
            ("declare-function" code nil nil [73782 73853])
            ("mouse-appearance-menu" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [73855 76469])
            ("define-key" code nil nil [76507 76564])
            ("global-set-key" code nil nil [76565 76608])
            ("global-set-key" code nil nil [76609 76658])
            ("global-set-key" code nil nil [76706 76756])
            ("global-set-key" code nil nil [76757 76807])
            ("mouse--strip-first-event" function (:arguments ("_prompt")) nil [76809 76898])
            ("define-key" code nil nil [76900 76977])
            ("define-key" code nil nil [76978 77056])
            ("global-set-key" code nil nil [77058 77104])
            ("define-key" code nil nil [77177 77255])
            ("define-key" code nil nil [77256 77333])
            ("global-set-key" code nil nil [77334 77382])
            ("define-key" code nil nil [77383 77461])
            ("define-key" code nil nil [77462 77539])
            ("global-set-key" code nil nil [77664 77716])
            ("if" code nil nil [77717 77813])
            ("global-set-key" code nil nil [77857 78115])
            ("global-set-key" code nil nil [78335 78392])
            ("global-set-key" code nil nil [78393 78455])
            ("global-set-key" code nil nil [78456 78519])
            ("global-set-key" code nil nil [78520 78587])
            ("global-set-key" code nil nil [78588 78647])
            ("global-set-key" code nil nil [78648 78712])
            ("global-set-key" code nil nil [78713 78770])
            ("global-set-key" code nil nil [78771 78842])
            ("global-set-key" code nil nil [78843 78922])
            ("global-set-key" code nil nil [78923 78996])
            ("global-set-key" code nil nil [78997 79068])
            ("global-set-key" code nil nil [79069 79130])
            ("mouse" package nil nil [79132 79148]))          
    :file "mouse.el"
    :pointmax 79173
    :fsize 79172
    :lastmodtime '(20806 7943 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "scroll-bar.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("mouse" include nil nil [1027 1043])
            ("cl-lib" include nil nil [1063 1080])
            ("scroll-bar-event-ratio" function (:arguments ("event")) nil [1102 1418])
            ("scroll-bar-scale" function (:arguments ("num-denom" "whole")) nil [1420 2101])
            ("scroll-bar-columns" function (:arguments ("side")) nil [2103 2778])
            ("scroll-bar-mode" variable nil nil [2846 2870])
            ("previous-scroll-bar-mode" variable nil nil [2871 2908])
            ("scroll-bar-mode-explicit" variable nil nil [2910 3075])
            ("set-scroll-bar-mode" function (:arguments ("value")) nil [3077 3489])
            ("scroll-bar-mode" variable (:default-value default-frame-scroll-bars) nil [3491 4181])
            ("setq" code nil nil [4282 4315])
            ("get-scroll-bar-mode" function nil nil [4317 4409])
            ("define-minor-mode" code nil nil [4411 4964])
            ("toggle-scroll-bar" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [4966 5626])
            ("toggle-horizontal-scroll-bar" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [5628 5942])
            ("scroll-bar-set-window-start" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [6050 6580])
            ("scroll-bar-drag-position" function (:arguments ("portion-whole")) nil [6582 6837])
            ("scroll-bar-maybe-set-window-start" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [6839 7849])
            ("scroll-bar-drag-1" function (:arguments ("event")) nil [7906 8370])
            ("scroll-bar-drag" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [8372 9363])
            ("scroll-bar-scroll-down" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [9365 10093])
            ("scroll-bar-scroll-up" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [10095 10815])
            ("scroll-bar-toolkit-scroll" function (:arguments ("event")) nil [10844 12048])
            ("cond" code nil nil [12121 12728])
            ("scroll-bar" package nil nil [12732 12753]))          
    :file "scroll-bar.el"
    :pointmax 12783
    :fsize 12782
    :lastmodtime '(20806 7945 0 0)
    :unmatched-syntax '((close-paren 1080 . 1081) (symbol 1045 . 1062) (open-paren 1044 . 1045))
    )
   (semanticdb-table "faces.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("term-file-prefix" variable (:default-value (purecopy "term/")) nil [858 1310])
            ("declare-function" code nil nil [1312 1384])
            ("help-xref-stack-item" variable nil nil [1386 1415])
            ("face-name-history" variable nil nil [1417 1598])
            ("font-selection" customgroup (:user-visible-flag t) nil [1769 1851])
            ("face-font-selection-order" variable (:default-value (quote (:width :height :weight :slant))) nil [1854 2636])
            ("face-font-family-alternatives" variable (:default-value (mapcar (lambda (arg) (mapcar (quote purecopy) arg)) (quote (("Monospace" "courier" "fixed") ("courier" "CMU Typewriter Text" "fixed") ("Sans Serif" "helv" "helvetica" "arial" "fixed") ("helv" "helvetica" "arial" "fixed"))))) nil [2810 3492])
            ("face-font-registry-alternatives" variable (:default-value (mapcar (lambda (arg) (mapcar (quote purecopy) arg)) (if (featurep (quote w32)) (quote (("iso8859-1" "ms-oemlatin") ("gb2312.1980" "gb2312" "gbk" "gb18030") ("jisx0208.1990" "jisx0208.1983" "jisx0208.1978") ("ksc5601.1989" "ksx1001.1992" "ksc5601.1987") ("muletibetan-2" "muletibetan-0"))) (quote (("gb2312.1980" "gb2312.80&gb8565.88" "gbk" "gb18030") ("jisx0208.1990" "jisx0208.1983" "jisx0208.1978") ("ksc5601.1989" "ksx1001.1992" "ksc5601.1987") ("muletibetan-2" "muletibetan-0")))))) nil [3538 4602])
            ("face-list" function nil nil [4777 4878])
            ("make-face" function
               (:user-visible-flag t
                :arguments ("face" "no-init-from-resources"))
                nil [4880 5742])
            ("make-empty-face" function
               (:user-visible-flag t
                :arguments ("face"))
                nil [5744 6030])
            ("copy-face" function (:arguments ("old-face" "new-face" "frame" "new-frame")) nil [6032 7283])
            ("facep" function (:arguments ("face")) nil [7463 7612])
            ("check-face" function (:arguments ("face")) nil [7615 7769])
            ("face-id" function (:arguments ("face" "_frame")) nil [7950 8292])
            ("face-equal" function (:arguments ("face1" "face2" "frame")) nil [8294 8711])
            ("face-differs-from-default-p" function (:arguments ("face" "frame")) nil [8714 9427])
            ("face-nontrivial-p" function (:arguments ("face" "frame")) nil [9430 9774])
            ("face-x-resources" variable (:default-value (mapcar (lambda (arg) (cons (car arg) (cons (purecopy (car (cdr arg))) (purecopy (cdr (cdr arg)))))) (quote ((:family (".attributeFamily" . "Face.AttributeFamily")) (:foundry (".attributeFoundry" . "Face.AttributeFoundry")) (:width (".attributeWidth" . "Face.AttributeWidth")) (:height (".attributeHeight" . "Face.AttributeHeight")) (:weight (".attributeWeight" . "Face.AttributeWeight")) (:slant (".attributeSlant" . "Face.AttributeSlant")) (:foreground (".attributeForeground" . "Face.AttributeForeground")) (:background (".attributeBackground" . "Face.AttributeBackground")) (:overline (".attributeOverline" . "Face.AttributeOverline")) (:strike-through (".attributeStrikeThrough" . "Face.AttributeStrikeThrough")) (:box (".attributeBox" . "Face.AttributeBox")) (:underline (".attributeUnderline" . "Face.AttributeUnderline")) (:inverse-video (".attributeInverse" . "Face.AttributeInverse")) (:stipple (".attributeStipple" . "Face.AttributeStipple") (".attributeBackgroundPixmap" . "Face.AttributeBackgroundPixmap")) (:bold (".attributeBold" . "Face.AttributeBold")) (:italic (".attributeItalic" . "Face.AttributeItalic")) (:font (".attributeFont" . "Face.AttributeFont")) (:inherit (".attributeInherit" . "Face.AttributeInherit")))))) nil [9972 11765])
            ("declare-function" code nil nil [11768 11853])
            ("declare-function" code nil nil [11855 11969])
            ("set-face-attribute-from-resource" function (:arguments ("face" "attribute" "resource" "class" "frame")) nil [11971 12680])
            ("set-face-attributes-from-resources" function (:arguments ("face" "frame")) nil [12683 13046])
            ("make-face-x-resource-internal" function (:arguments ("face" "frame")) nil [13049 13374])
            ("face-name" function (:arguments ("face")) nil [13558 13650])
            ("face-all-attributes" function (:arguments ("face" "frame")) nil [13653 14119])
            ("face-attribute" function (:arguments ("face" "attribute" "frame" "inherit")) nil [14121 15935])
            ("face-attribute-merged-with" function (:arguments ("attribute" "value" "faces" "frame")) nil [15937 16526])
            ("face-attribute-specified-or" function (:arguments ("value" "body")) nil [16529 16810])
            ("face-foreground" function (:arguments ("face" "frame" "inherit")) nil [16812 17868])
            ("face-background" function (:arguments ("face" "frame" "inherit")) nil [17870 18926])
            ("face-stipple" function (:arguments ("face" "frame" "inherit")) nil [18928 19948])
            ("defalias" code nil nil [19951 19999])
            ("face-underline-p" function (:arguments ("face" "frame")) nil [20296 20674])
            ("face-inverse-video-p" function (:arguments ("face" "frame")) nil [20677 21038])
            ("face-bold-p" function (:arguments ("face" "frame")) nil [21041 21487])
            ("face-italic-p" function (:arguments ("face" "frame")) nil [21490 21921])
            ("face-documentation" function (:arguments ("face")) nil [22097 22546])
            ("set-face-documentation" function (:arguments ("face" "string")) nil [22549 22737])
            ("defalias" code nil nil [22740 22787])
            ("defalias" code nil nil [22788 22843])
            ("set-face-attribute" function (:arguments ("face" "frame" "args")) nil [23024 30358])
            ("make-face-bold" function
               (:user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [30360 30756])
            ("make-face-unbold" function
               (:user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [30759 31104])
            ("make-face-italic" function
               (:user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [31107 31509])
            ("make-face-unitalic" function
               (:user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [31512 31862])
            ("make-face-bold-italic" function
               (:user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [31865 32307])
            ("set-face-font" function
               (:user-visible-flag t
                :arguments ("face" "font" "frame"))
                nil [32310 32736])
            ("set-face-background" function
               (:user-visible-flag t
                :arguments ("face" "color" "frame"))
                nil [32942 33411])
            ("set-face-foreground" function
               (:user-visible-flag t
                :arguments ("face" "color" "frame"))
                nil [33414 33883])
            ("set-face-stipple" function
               (:user-visible-flag t
                :arguments ("face" "stipple" "frame"))
                nil [33886 34491])
            ("set-face-underline" function
               (:user-visible-flag t
                :arguments ("face" "underline" "frame"))
                nil [34494 35263])
            ("define-obsolete-function-alias" code nil nil [35265 35378])
            ("set-face-inverse-video-p" function
               (:user-visible-flag t
                :arguments ("face" "inverse-video-p" "frame"))
                nil [35381 35961])
            ("set-face-bold-p" function (:arguments ("face" "bold-p" "frame")) nil [36128 36546])
            ("set-face-italic-p" function (:arguments ("face" "italic-p" "frame")) nil [36549 36987])
            ("defalias" code nil nil [36990 37046])
            ("invert-face" function
               (:user-visible-flag t
                :arguments ("face" "frame"))
                nil [37049 37831])
            ("read-face-name" function (:arguments ("prompt" "default" "multiple")) nil [38017 41218])
            ("x-bitmap-file-path" variable nil nil [41277 41304])
            ("face-valid-attribute-values" function (:arguments ("attribute" "frame")) nil [41306 43995])
            ("face-attribute-name-alist" variable
               (:constant-flag t
                :default-value (quote ((:family . "font family") (:foundry . "font foundry") (:width . "character set width") (:height . "height in 1/10 pt") (:weight . "weight") (:slant . "slant") (:underline . "underline") (:overline . "overline") (:strike-through . "strike-through") (:box . "box") (:inverse-video . "inverse-video display") (:foreground . "foreground color") (:background . "background color") (:stipple . "background stipple") (:inherit . "inheritance"))))
                nil [43998 44768])
            ("face-descriptive-attribute-name" function (:arguments ("attribute")) nil [44771 44918])
            ("face-read-string" function (:arguments ("face" "default" "name" "completion-alist")) nil [44921 45848])
            ("face-read-integer" function (:arguments ("face" "default" "name")) nil [45851 46468])
            ("read-face-attribute" function (:arguments ("face" "attribute" "frame")) nil [46629 48968])
            ("declare-function" code nil nil [48970 49016])
            ("declare-function" code nil nil [49017 49108])
            ("read-face-font" function (:arguments ("face" "frame")) nil [49110 49452])
            ("read-all-face-attributes" function (:arguments ("face" "frame")) nil [49455 49883])
            ("modify-face" function
               (:user-visible-flag t
                :arguments ("face" "foreground" "background" "stipple" "bold-p" "italic-p" "underline" "inverse-p" "frame"))
                nil [49885 50812])
            ("read-face-and-attribute" function (:arguments ("attribute" "frame")) nil [50814 51567])
            ("list-faces-sample-text" variable
               (:constant-flag t
                :default-value "abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ")
                nil [51738 51901])
            ("help-xref-stack" variable nil nil [52030 52054])
            ("list-faces-display" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [52055 55126])
            ("describe-face" function
               (:user-visible-flag t
                :arguments ("face" "frame"))
                nil [55129 58694])
            ("face-attr-construct" function (:arguments ("face" "_frame")) nil [58972 59562])
            ("face-spec-set-match-display" function (:arguments ("display" "frame")) nil [59565 61367])
            ("face-spec-choose" function (:arguments ("spec" "frame")) nil [61370 62284])
            ("face-spec-reset-face" function (:arguments ("face" "frame")) nil [62287 63412])
            ("face-spec-set" function (:arguments ("face" "spec" "for-defface")) nil [63414 64606])
            ("face-spec-recalc" function (:arguments ("face" "frame")) nil [64608 65226])
            ("face-spec-set-2" function (:arguments ("face" "frame" "spec")) nil [65228 65595])
            ("face-attr-match-p" function (:arguments ("face" "attrs" "frame")) nil [65597 66671])
            ("face-spec-match-p" function (:arguments ("face" "spec" "frame")) nil [66673 66868])
            ("face-default-spec" function (:arguments ("face")) nil [66870 67058])
            ("face-user-default-spec" function (:arguments ("face")) nil [67060 67343])
            ("defined-colors" function (:arguments ("frame")) nil [67601 68059])
            ("defalias" code nil nil [68060 68104])
            ("declare-function" code nil nil [68106 68176])
            ("color-defined-p" function (:arguments ("color" "frame")) nil [68178 68845])
            ("defalias" code nil nil [68846 68892])
            ("declare-function" code nil nil [68894 68961])
            ("color-values" function (:arguments ("color" "frame")) nil [68963 69882])
            ("defalias" code nil nil [69884 69924])
            ("declare-function" code nil nil [69926 69993])
            ("display-color-p" function (:arguments ("display")) nil [69995 70397])
            ("defalias" code nil nil [70398 70444])
            ("declare-function" code nil nil [70446 70516])
            ("display-grayscale-p" function (:arguments ("display")) nil [70518 70823])
            ("read-color" function
               (:user-visible-flag t
                :arguments ("prompt" "convert-to-RGB" "allow-empty-name" "msg"))
                nil [70825 73523])
            ("face-at-point" function nil nil [73526 74332])
            ("foreground-color-at-point" function nil nil [74334 75063])
            ("background-color-at-point" function nil nil [75089 75818])
            ("declare-function" code nil nil [76013 76067])
            ("x-display-name" variable nil nil [76068 76091])
            ("x-handle-named-frame-geometry" function (:arguments ("parameters")) nil [76093 76988])
            ("x-handle-reverse-video" function (:arguments ("frame" "parameters")) nil [76991 77997])
            ("declare-function" code nil nil [77999 78049])
            ("declare-function" code nil nil [78050 78116])
            ("x-create-frame-with-faces" function (:arguments ("parameters")) nil [78118 79319])
            ("face-set-after-frame-default" function (:arguments ("frame" "parameters")) nil [79321 80974])
            ("tty-handle-reverse-video" function (:arguments ("frame" "parameters")) nil [80976 81652])
            ("tty-create-frame-with-faces" function (:arguments ("parameters")) nil [81655 82408])
            ("tty-find-type" function (:arguments ("pred" "type")) nil [82410 82973])
            ("tty-run-terminal-initialization" function (:arguments ("frame" "type")) nil [82975 84101])
            ("tty-set-up-initial-frame-faces" function nil nil [84207 84364])
            ("basic-faces" customgroup (:user-visible-flag t) nil [84536 84611])
            ("default" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [84613 84745])
            ("bold" variable
               (:default-value (quote ((t :weight bold)))
                :type "face")
                nil [84747 84826])
            ("italic" variable
               (:default-value (quote ((((supports :slant italic)) :slant italic) (((supports :underline t)) :underline t) (t :slant italic)))
                :type "face")
                nil [84828 85193])
            ("bold-italic" variable
               (:default-value (quote ((t :weight bold :slant italic)))
                :type "face")
                nil [85195 85302])
            ("underline" variable
               (:default-value (quote ((((supports :underline t)) :underline t) (((supports :weight bold)) :weight bold) (t :underline t)))
                :type "face")
                nil [85304 85494])
            ("fixed-pitch" variable
               (:default-value (quote ((t :family "Monospace")))
                :type "face")
                nil [85496 85600])
            ("variable-pitch" variable
               (:default-value (quote ((t :family "Sans Serif")))
                :type "face")
                nil [85602 85713])
            ("shadow" variable
               (:default-value (quote ((((class color grayscale) (min-colors 88) (background light)) :foreground "grey50") (((class color grayscale) (min-colors 88) (background dark)) :foreground "grey70") (((class color) (min-colors 8) (background light)) :foreground "green") (((class color) (min-colors 8) (background dark)) :foreground "yellow")))
                :type "face")
                nil [85715 86153])
            ("link" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) :foreground "RoyalBlue3" :underline t) (((class color) (background light)) :foreground "blue" :underline t) (((class color) (min-colors 88) (background dark)) :foreground "cyan1" :underline t) (((class color) (background dark)) :foreground "cyan" :underline t) (t :inherit underline)))
                :type "face")
                nil [86155 86622])
            ("link-visited" variable
               (:default-value (quote ((default :inherit link) (((class color) (background light)) :foreground "magenta4") (((class color) (background dark)) :foreground "violet")))
                :type "face")
                nil [86624 86874])
            ("highlight" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) :background "darkseagreen2") (((class color) (min-colors 88) (background dark)) :background "darkolivegreen") (((class color) (min-colors 16) (background light)) :background "darkseagreen2") (((class color) (min-colors 16) (background dark)) :background "darkolivegreen") (((class color) (min-colors 8)) :background "green" :foreground "black") (t :inverse-video t)))
                :type "face")
                nil [86876 87418])
            ("region" variable
               (:default-value (quote ((((class color) (min-colors 88) (background dark)) :background "blue3") (((class color) (min-colors 88) (background light) (type gtk)) :foreground "gtk_selection_fg_color" :background "gtk_selection_bg_color") (((class color) (min-colors 88) (background light) (type ns)) :background "ns_selection_color") (((class color) (min-colors 88) (background light)) :background "lightgoldenrod2") (((class color) (min-colors 16) (background dark)) :background "blue3") (((class color) (min-colors 16) (background light)) :background "lightgoldenrod2") (((class color) (min-colors 8)) :background "blue" :foreground "white") (((type tty) (class mono)) :inverse-video t) (t :background "gray")))
                :type "face")
                nil [87580 88446])
            ("secondary-selection" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) :background "yellow1") (((class color) (min-colors 88) (background dark)) :background "SkyBlue4") (((class color) (min-colors 16) (background light)) :background "yellow") (((class color) (min-colors 16) (background dark)) :background "SkyBlue4") (((class color) (min-colors 8)) :background "cyan" :foreground "black") (t :inverse-video t)))
                :type "face")
                nil [88448 88996])
            ("trailing-whitespace" variable
               (:default-value (quote ((((class color) (background light)) :background "red1") (((class color) (background dark)) :background "red1") (t :inverse-video t)))
                :type "face")
                nil [88998 89336])
            ("escape-glyph" variable
               (:default-value (quote ((((background dark)) :foreground "cyan") (((type pc)) :foreground "magenta") (t :foreground "brown")))
                :type "face")
                nil [89338 89768])
            ("nobreak-space" variable
               (:default-value (quote ((((class color) (min-colors 88)) :inherit escape-glyph :underline t) (((class color) (min-colors 8)) :background "magenta") (t :inverse-video t)))
                :type "face")
                nil [89770 90030])
            ("mode-line-faces" customgroup (:user-visible-flag t) nil [90032 90149])
            ("mode-line" variable
               (:default-value (quote ((((class color) (min-colors 88)) :box (:line-width -1 :style released-button) :background "grey75" :foreground "black") (t :inverse-video t)))
                :type "face")
                nil [90151 90447])
            ("mode-line-inactive" variable
               (:default-value (quote ((default :inherit mode-line) (((class color) (min-colors 88) (background light)) :weight light :box (:line-width -1 :color "grey75" :style nil) :foreground "grey20" :background "grey90") (((class color) (min-colors 88) (background dark)) :weight light :box (:line-width -1 :color "grey40" :style nil) :foreground "grey80" :background "grey30")))
                :type "face")
                nil [90449 90987])
            ("define-obsolete-face-alias" code nil nil [90988 91062])
            ("mode-line-highlight" variable
               (:default-value (quote ((((class color) (min-colors 88)) :box (:line-width 2 :color "grey40" :style released-button)) (t :inherit highlight)))
                :type "face")
                nil [91064 91338])
            ("define-obsolete-face-alias" code nil nil [91339 91415])
            ("mode-line-emphasis" variable
               (:default-value (quote ((t (:weight bold))))
                :type "face")
                nil [91417 91660])
            ("mode-line-buffer-id" variable
               (:default-value (quote ((t (:weight bold))))
                :type "face")
                nil [91662 91845])
            ("define-obsolete-face-alias" code nil nil [91846 91922])
            ("header-line" variable
               (:default-value (quote ((default :inherit mode-line) (((type tty)) :inverse-video nil :underline t) (((class color grayscale) (background light)) :background "grey90" :foreground "grey20" :box nil) (((class color grayscale) (background dark)) :background "grey20" :foreground "grey90" :box nil) (((class mono) (background light)) :background "white" :foreground "black" :inverse-video nil :box nil :underline t) (((class mono) (background dark)) :background "black" :foreground "white" :inverse-video nil :box nil :underline t)))
                :type "face")
                nil [91924 93260])
            ("vertical-border" variable
               (:default-value (quote ((((type tty)) :inherit mode-line-inactive)))
                :type "face")
                nil [93262 93427])
            ("minibuffer-prompt" variable
               (:default-value (quote ((((background dark)) :foreground "cyan") (((type pc)) :foreground "magenta") (t :foreground "medium blue")))
                :type "face")
                nil [93429 93924])
            ("setq" code nil nil [93926 94037])
            ("fringe" variable
               (:default-value (quote ((((class color) (background light)) :background "grey95") (((class color) (background dark)) :background "grey10") (t :background "gray")))
                :type "face")
                nil [94039 94351])
            ("scroll-bar" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [94353 94491])
            ("border" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [94493 94622])
            ("cursor" variable
               (:default-value (quote ((((background light)) :background "black") (((background dark)) :background "white")))
                :type "face")
                nil [94624 95074])
            ("put" code nil nil [95076 95108])
            ("mouse" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [95110 95236])
            ("tool-bar" variable
               (:default-value (quote ((default :box (:line-width 1 :style released-button) :foreground "black") (((type x w32 ns) (class color)) :background "grey75") (((type x) (class mono)) :background "grey")))
                :type "face")
                nil [95238 95528])
            ("menu" variable
               (:default-value (quote ((((type tty)) :inverse-video t) (((type x-toolkit))) (t :inverse-video t)))
                :type "face")
                nil [95530 95774])
            ("help-argument-name" variable
               (:default-value (quote ((t :inherit italic)))
                :type "face")
                nil [95776 95898])
            ("glyphless-char" variable
               (:default-value (quote ((((type tty)) :inherit underline) (((type pc)) :inherit escape-glyph) (t :height 0.6)))
                :type "face")
                nil [95900 96174])
            ("error" variable
               (:default-value (quote ((default :weight bold) (((class color) (min-colors 88) (background light)) :foreground "Red1") (((class color) (min-colors 88) (background dark)) :foreground "Pink") (((class color) (min-colors 16) (background light)) :foreground "Red1") (((class color) (min-colors 16) (background dark)) :foreground "Pink") (((class color) (min-colors 8)) :foreground "red") (t :inverse-video t)))
                :type "face")
                nil [96176 96706])
            ("warning" variable
               (:default-value (quote ((default :weight bold) (((class color) (min-colors 16)) :foreground "DarkOrange") (((class color)) :foreground "yellow")))
                :type "face")
                nil [96708 96942])
            ("success" variable
               (:default-value (quote ((default :weight bold) (((class color) (min-colors 16) (background light)) :foreground "ForestGreen") (((class color) (min-colors 88) (background dark)) :foreground "Green1") (((class color) (min-colors 16) (background dark)) :foreground "Green") (((class color)) :foreground "green")))
                :type "face")
                nil [96944 97363])
            ("x-font-regexp" variable nil nil [97739 97765])
            ("x-font-regexp-head" variable nil nil [97766 97797])
            ("x-font-regexp-weight" variable nil nil [97798 97831])
            ("x-font-regexp-slant" variable nil nil [97832 97864])
            ("x-font-regexp-weight-subnum" variable
               (:constant-flag t
                :default-value 1)
                nil [97866 97906])
            ("x-font-regexp-slant-subnum" variable
               (:constant-flag t
                :default-value 2)
                nil [97907 97946])
            ("x-font-regexp-swidth-subnum" variable
               (:constant-flag t
                :default-value 3)
                nil [97947 97987])
            ("x-font-regexp-adstyle-subnum" variable
               (:constant-flag t
                :default-value 4)
                nil [97988 98029])
            ("let" code nil nil [98112 99330])
            ("x-resolve-font-name" function (:arguments ("pattern" "face" "frame")) nil [99333 100502])
            ("font-list-limit" variable (:default-value 100) nil [100504 100619])
            ("make-obsolete-variable" code nil nil [100620 100672])
            ("faces" package nil nil [100674 100690]))          
    :file "faces.el"
    :pointmax 100715
    :fsize 100714
    :lastmodtime '(20806 7941 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "select.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("selection-coding-system" variable nil nil [922 2302])
            ("next-selection-coding-system" variable nil nil [2304 2665])
            ("declare-function" code nil nil [2667 2787])
            ("define-obsolete-function-alias" code nil nil [2824 2903])
            ("x-get-selection" function (:arguments ("type" "data-type")) nil [2905 4309])
            ("x-get-clipboard" function nil nil [4311 4426])
            ("declare-function" code nil nil [4428 4536])
            ("declare-function" code nil nil [4537 4635])
            ("x-set-selection" function
               (:user-visible-flag t
                :arguments ("type" "data"))
                nil [4637 6452])
            ("x-valid-simple-selection-p" function (:arguments ("data")) nil [6454 6897])
            ("xselect--selection-bounds" function (:arguments ("value")) nil [7093 7887])
            ("xselect--int-to-cons" function (:arguments ("n")) nil [7889 7959])
            ("xselect--encode-string" function (:arguments ("type" "str" "can-modify")) nil [7961 10414])
            ("xselect-convert-to-string" function (:arguments ("_selection" "type" "value")) nil [10416 10716])
            ("xselect-convert-to-length" function (:arguments ("_selection" "_type" "value")) nil [10718 10977])
            ("xselect-convert-to-targets" function (:arguments ("_selection" "_type" "_value")) nil [10979 11492])
            ("xselect-convert-to-delete" function (:arguments ("selection" "_type" "_value")) nil [11494 11836])
            ("xselect-convert-to-filename" function (:arguments ("_selection" "_type" "value")) nil [11838 12022])
            ("xselect-convert-to-charpos" function (:arguments ("_selection" "_type" "value")) nil [12024 12324])
            ("xselect-convert-to-lineno" function (:arguments ("_selection" "_type" "value")) nil [12326 12685])
            ("xselect-convert-to-colno" function (:arguments ("_selection" "_type" "value")) nil [12687 13077])
            ("xselect-convert-to-os" function (:arguments ("_selection" "_type" "_size")) nil [13079 13192])
            ("xselect-convert-to-host" function (:arguments ("_selection" "_type" "_size")) nil [13194 13297])
            ("xselect-convert-to-user" function (:arguments ("_selection" "_type" "_size")) nil [13299 13405])
            ("xselect-convert-to-class" function (:arguments ("_selection" "_type" "_size")) nil [13407 13550])
            ("xselect-convert-to-name" function (:arguments ("_selection" "_type" "_size")) nil [13686 13827])
            ("xselect-convert-to-integer" function (:arguments ("_selection" "_type" "value")) nil [13829 13949])
            ("xselect-convert-to-atom" function (:arguments ("_selection" "_type" "value")) nil [13951 14037])
            ("xselect-convert-to-identity" function (:arguments ("_selection" "_type" "value")) nil [14039 14134])
            ("xselect-convert-to-save-targets" function (:arguments ("selection" "_type" "_value")) nil [14254 14363])
            ("setq" code nil nil [14365 15216])
            ("select" package nil nil [15218 15235]))          
    :file "select.el"
    :pointmax 15261
    :fsize 15260
    :lastmodtime '(20806 7945 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "menu-bar.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("uniquify-buffer-name-style" variable nil nil [1024 1059])
            ("cua-enable-cua-keys" variable nil nil [1103 1131])
            ("or" code nil nil [1245 1355])
            ("if" code nil nil [1357 2235])
            ("global-buffers-menu-map" variable (:default-value (make-sparse-keymap "Buffers")) nil [2363 2426])
            ("define-obsolete-variable-alias" code nil nil [2494 2576])
            ("menu-bar-file-menu" variable (:default-value (let ((menu (make-sparse-keymap "File"))) (bindings--define-key menu [exit-emacs] (quote (menu-item "Quit" save-buffers-kill-terminal :help "Save unsaved buffers, then exit"))) (bindings--define-key menu [separator-exit] menu-bar-separator) (bindings--define-key menu [delete-this-frame] (quote (menu-item "Delete Frame" delete-frame :visible (fboundp (quote delete-frame)) :enable (delete-frame-enabled-p) :help "Delete currently selected frame"))) (bindings--define-key menu [make-frame-on-display] (quote (menu-item "New Frame on Display..." make-frame-on-display :visible (fboundp (quote make-frame-on-display)) :help "Open a new frame on another display"))) (bindings--define-key menu [make-frame] (quote (menu-item "New Frame" make-frame-command :visible (fboundp (quote make-frame-command)) :help "Open a new frame"))) (bindings--define-key menu [separator-frame] menu-bar-separator) (bindings--define-key menu [one-window] (quote (menu-item "Remove Other Windows" delete-other-windows :enable (not (one-window-p t nil)) :help "Make selected window fill whole frame"))) (bindings--define-key menu [new-window-on-right] (quote (menu-item "New Window on Right" split-window-right :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Make new window on right of selected one"))) (bindings--define-key menu [new-window-below] (quote (menu-item "New Window Below" split-window-below :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Make new window below selected one"))) (bindings--define-key menu [separator-window] menu-bar-separator) (bindings--define-key menu [ps-print-region] (quote (menu-item "PostScript Print Region (B+W)" ps-print-region :enable mark-active :help "Pretty-print marked region in black and white to PostScript printer"))) (bindings--define-key menu [ps-print-buffer] (quote (menu-item "PostScript Print Buffer (B+W)" ps-print-buffer :enable (menu-bar-menu-frame-live-and-visible-p) :help "Pretty-print current buffer in black and white to PostScript printer"))) (bindings--define-key menu [ps-print-region-faces] (quote (menu-item "PostScript Print Region" ps-print-region-with-faces :enable mark-active :help "Pretty-print marked region to PostScript printer"))) (bindings--define-key menu [ps-print-buffer-faces] (quote (menu-item "PostScript Print Buffer" ps-print-buffer-with-faces :enable (menu-bar-menu-frame-live-and-visible-p) :help "Pretty-print current buffer to PostScript printer"))) (bindings--define-key menu [print-region] (quote (menu-item "Print Region" print-region :enable mark-active :help "Print region between mark and current position"))) (bindings--define-key menu [print-buffer] (quote (menu-item "Print Buffer" print-buffer :enable (menu-bar-menu-frame-live-and-visible-p) :help "Print current buffer with page headings"))) (bindings--define-key menu [separator-print] menu-bar-separator) (bindings--define-key menu [recover-session] (quote (menu-item "Recover Crashed Session" recover-session :enable (and auto-save-list-file-prefix (file-directory-p (file-name-directory auto-save-list-file-prefix)) (directory-files (file-name-directory auto-save-list-file-prefix) nil (concat "\\`" (regexp-quote (file-name-nondirectory auto-save-list-file-prefix))) t)) :help "Recover edits from a crashed session"))) (bindings--define-key menu [revert-buffer] (quote (menu-item "Revert Buffer" revert-buffer :enable (or revert-buffer-function revert-buffer-insert-file-contents-function (and buffer-file-number (or (buffer-modified-p) (not (verify-visited-file-modtime (current-buffer)))))) :help "Re-read current buffer from its file"))) (bindings--define-key menu [write-file] (quote (menu-item "Save As..." write-file :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Write current buffer to another file"))) (bindings--define-key menu [save-buffer] (quote (menu-item "Save" save-buffer :enable (and (buffer-modified-p) (buffer-file-name) (menu-bar-non-minibuffer-window-p)) :help "Save current buffer to its file"))) (bindings--define-key menu [separator-save] menu-bar-separator) (bindings--define-key menu [kill-buffer] (quote (menu-item "Close" kill-this-buffer :enable (kill-this-buffer-enabled-p) :help "Discard (kill) current buffer"))) (bindings--define-key menu [insert-file] (quote (menu-item "Insert File..." insert-file :enable (menu-bar-non-minibuffer-window-p) :help "Insert another file into current buffer"))) (bindings--define-key menu [dired] (quote (menu-item "Open Directory..." dired :enable (menu-bar-non-minibuffer-window-p) :help "Read a directory, to operate on its files"))) (bindings--define-key menu [open-file] (quote (menu-item "Open File..." menu-find-file-existing :enable (menu-bar-non-minibuffer-window-p) :help "Read an existing file into an Emacs buffer"))) (bindings--define-key menu [new-file] (quote (menu-item "Visit New File..." find-file :enable (menu-bar-non-minibuffer-window-p) :help "Specify a new file's name, to edit the file"))) menu)) nil [2577 9346])
            ("menu-find-file-existing" function (:user-visible-flag t) nil [9348 9678])
            ("menu-bar-last-search-type" variable nil nil [9710 9818])
            ("nonincremental-repeat-search-forward" function (:user-visible-flag t) nil [9820 10216])
            ("nonincremental-repeat-search-backward" function (:user-visible-flag t) nil [10218 10618])
            ("nonincremental-search-forward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [10620 10933])
            ("nonincremental-search-backward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [10935 11260])
            ("nonincremental-re-search-forward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [11262 11601])
            ("nonincremental-re-search-backward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [11603 11954])
            ("menu-bar-i-search-menu" variable (:default-value (let ((menu (make-sparse-keymap "Incremental Search"))) (bindings--define-key menu [isearch-backward-regexp] (quote (menu-item "Backward Regexp..." isearch-backward-regexp :help "Search backwards for a regular expression as you type it"))) (bindings--define-key menu [isearch-forward-regexp] (quote (menu-item "Forward Regexp..." isearch-forward-regexp :help "Search forward for a regular expression as you type it"))) (bindings--define-key menu [isearch-backward] (quote (menu-item "Backward String..." isearch-backward :help "Search backwards for a string as you type it"))) (bindings--define-key menu [isearch-forward] (quote (menu-item "Forward String..." isearch-forward :help "Search forward for a string as you type it"))) menu)) nil [12001 12818])
            ("menu-bar-search-menu" variable (:default-value (let ((menu (make-sparse-keymap "Search"))) (bindings--define-key menu [i-search] (\` (menu-item "Incremental Search" (\, menu-bar-i-search-menu)))) (bindings--define-key menu [separator-tag-isearch] menu-bar-separator) (bindings--define-key menu [tags-continue] (quote (menu-item "Continue Tags Search" tags-loop-continue :help "Continue last tags search operation"))) (bindings--define-key menu [tags-srch] (quote (menu-item "Search Tagged Files..." tags-search :help "Search for a regexp in all tagged files"))) (bindings--define-key menu [separator-tag-search] menu-bar-separator) (bindings--define-key menu [repeat-search-back] (quote (menu-item "Repeat Backwards" nonincremental-repeat-search-backward :enable (or (and (eq menu-bar-last-search-type (quote string)) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search backwards"))) (bindings--define-key menu [repeat-search-fwd] (quote (menu-item "Repeat Forward" nonincremental-repeat-search-forward :enable (or (and (eq menu-bar-last-search-type (quote string)) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search forward"))) (bindings--define-key menu [separator-repeat-search] menu-bar-separator) (bindings--define-key menu [re-search-backward] (quote (menu-item "Regexp Backwards..." nonincremental-re-search-backward :help "Search backwards for a regular expression"))) (bindings--define-key menu [re-search-forward] (quote (menu-item "Regexp Forward..." nonincremental-re-search-forward :help "Search forward for a regular expression"))) (bindings--define-key menu [search-backward] (quote (menu-item "String Backwards..." nonincremental-search-backward :help "Search backwards for a string"))) (bindings--define-key menu [search-forward] (quote (menu-item "String Forward..." nonincremental-search-forward :help "Search forward for a string"))) menu)) nil [12820 15284])
            ("menu-bar-replace-menu" variable (:default-value (let ((menu (make-sparse-keymap "Replace"))) (bindings--define-key menu [tags-repl-continue] (quote (menu-item "Continue Replace" tags-loop-continue :help "Continue last tags replace operation"))) (bindings--define-key menu [tags-repl] (quote (menu-item "Replace in Tagged Files..." tags-query-replace :help "Interactively replace a regexp in all tagged files"))) (bindings--define-key menu [separator-replace-tags] menu-bar-separator) (bindings--define-key menu [query-replace-regexp] (quote (menu-item "Replace Regexp..." query-replace-regexp :enable (not buffer-read-only) :help "Replace regular expression interactively, ask about each occurrence"))) (bindings--define-key menu [query-replace] (quote (menu-item "Replace String..." query-replace :enable (not buffer-read-only) :help "Replace string interactively, ask about each occurrence"))) menu)) nil [15316 16307])
            ("menu-bar-goto-menu" variable (:default-value (let ((menu (make-sparse-keymap "Go To"))) (bindings--define-key menu [set-tags-name] (quote (menu-item "Set Tags File Name..." visit-tags-table :help "Tell Tags commands which tag table file to use"))) (bindings--define-key menu [separator-tag-file] menu-bar-separator) (bindings--define-key menu [apropos-tags] (quote (menu-item "Tags Apropos..." tags-apropos :help "Find function/variables whose names match regexp"))) (bindings--define-key menu [next-tag-otherw] (quote (menu-item "Next Tag in Other Window" menu-bar-next-tag-other-window :enable (and (boundp (quote tags-location-ring)) (not (ring-empty-p tags-location-ring))) :help "Find next function/variable matching last tag name in another window"))) (bindings--define-key menu [next-tag] (quote (menu-item "Find Next Tag" menu-bar-next-tag :enable (and (boundp (quote tags-location-ring)) (not (ring-empty-p tags-location-ring))) :help "Find next function/variable matching last tag name"))) (bindings--define-key menu [find-tag-otherw] (quote (menu-item "Find Tag in Other Window..." find-tag-other-window :help "Find function/variable definition in another window"))) (bindings--define-key menu [find-tag] (quote (menu-item "Find Tag..." find-tag :help "Find definition of function or variable"))) (bindings--define-key menu [separator-tags] menu-bar-separator) (bindings--define-key menu [end-of-buf] (quote (menu-item "Goto End of Buffer" end-of-buffer))) (bindings--define-key menu [beg-of-buf] (quote (menu-item "Goto Beginning of Buffer" beginning-of-buffer))) (bindings--define-key menu [go-to-pos] (quote (menu-item "Goto Buffer Position..." goto-char :help "Read a number N and go to buffer position N"))) (bindings--define-key menu [go-to-line] (quote (menu-item "Goto Line..." goto-line :help "Read a line number and go to that line"))) menu)) nil [16353 18524])
            ("yank-menu" variable (:default-value (cons (purecopy "Select Yank") nil)) nil [18527 18581])
            ("fset" code nil nil [18582 18624])
            ("menu-bar-edit-menu" variable (:default-value (let ((menu (make-sparse-keymap "Edit"))) (bindings--define-key menu [props] (\` (menu-item "Text Properties" facemenu-menu))) (if (featurep (quote ns)) (bindings--define-key menu [spell] (\` (menu-item "Spell" ispell-menu-map)))) (bindings--define-key menu [fill] (\` (menu-item "Fill" fill-region :enable (and mark-active (not buffer-read-only)) :help "Fill text in region to fit between left and right margin"))) (bindings--define-key menu [separator-bookmark] menu-bar-separator) (bindings--define-key menu [bookmark] (\` (menu-item "Bookmarks" menu-bar-bookmark-map))) (bindings--define-key menu [goto] (\` (menu-item "Go To" (\, menu-bar-goto-menu)))) (bindings--define-key menu [replace] (\` (menu-item "Replace" (\, menu-bar-replace-menu)))) (bindings--define-key menu [search] (\` (menu-item "Search" (\, menu-bar-search-menu)))) (bindings--define-key menu [separator-search] menu-bar-separator) (bindings--define-key menu [mark-whole-buffer] (quote (menu-item "Select All" mark-whole-buffer :help "Mark the whole buffer for a subsequent cut/copy"))) (bindings--define-key menu [clear] (quote (menu-item "Clear" delete-region :enable (and mark-active (not buffer-read-only)) :help "Delete the text in region between mark and current position"))) (bindings--define-key menu (if (featurep (quote ns)) [select-paste] [paste-from-menu]) (\` (menu-item (\, (if (featurep (quote ns)) "Select and Paste" "Paste from Kill Menu")) yank-menu :enable (and (cdr yank-menu) (not buffer-read-only)) :help "Choose a string from the kill ring and paste it"))) (bindings--define-key menu [paste] (quote (menu-item "Paste" yank :enable (and (or (and (fboundp (quote x-selection-exists-p)) (x-selection-exists-p (quote CLIPBOARD))) (if (featurep (quote ns)) (cdr yank-menu) kill-ring)) (not buffer-read-only)) :help "Paste (yank) text most recently cut/copied"))) (bindings--define-key menu [copy] (\` (menu-item "Copy" (\, (if (featurep (quote ns)) (quote ns-copy-including-secondary) (quote kill-ring-save))) :enable mark-active :help "Copy text in region between mark and current position" :keys (\, (if (featurep (quote ns)) "\\[ns-copy-including-secondary]" "\\[kill-ring-save]"))))) (bindings--define-key menu [cut] (quote (menu-item "Cut" kill-region :enable (and mark-active (not buffer-read-only)) :help "Cut (kill) text in region between mark and current position"))) (if (featurep (quote ns)) (bindings--define-key menu [separator-undo] menu-bar-separator)) (bindings--define-key menu [undo] (quote (menu-item "Undo" undo :enable (and (not buffer-read-only) (not (eq t buffer-undo-list)) (if (eq last-command (quote undo)) (listp pending-undo-list) (consp buffer-undo-list))) :help "Undo last operation"))) menu)) nil [18626 22758])
            ("menu-bar-next-tag-other-window" function (:user-visible-flag t) nil [22760 22908])
            ("menu-bar-next-tag" function (:user-visible-flag t) nil [22910 23032])
            ("define-obsolete-function-alias" code nil nil [23034 23116])
            ("put" code nil nil [23260 23348])
            ("put" code nil nil [23349 23406])
            ("put" code nil nil [23407 23597])
            ("clipboard-yank" function (:user-visible-flag t) nil [23599 23766])
            ("clipboard-kill-ring-save" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [23768 23958])
            ("clipboard-kill-region" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [23960 24138])
            ("menu-bar-enable-clipboard" function (:user-visible-flag t) nil [24140 24763])
            ("menu-bar-custom-menu" variable (:default-value (let ((menu (make-sparse-keymap "Customize"))) (bindings--define-key menu [customize-apropos-faces] (quote (menu-item "Faces Matching..." customize-apropos-faces :help "Browse faces matching a regexp or word list"))) (bindings--define-key menu [customize-apropos-options] (quote (menu-item "Options Matching..." customize-apropos-options :help "Browse options matching a regexp or word list"))) (bindings--define-key menu [customize-apropos] (quote (menu-item "All Settings Matching..." customize-apropos :help "Browse customizable settings matching a regexp or word list"))) (bindings--define-key menu [separator-1] menu-bar-separator) (bindings--define-key menu [customize-group] (quote (menu-item "Specific Group..." customize-group :help "Customize settings of specific group"))) (bindings--define-key menu [customize-face] (quote (menu-item "Specific Face..." customize-face :help "Customize attributes of specific face"))) (bindings--define-key menu [customize-option] (quote (menu-item "Specific Option..." customize-option :help "Customize value of specific option"))) (bindings--define-key menu [separator-2] menu-bar-separator) (bindings--define-key menu [customize-changed-options] (quote (menu-item "New Options..." customize-changed-options :help "Options added or changed in recent Emacs versions"))) (bindings--define-key menu [customize-saved] (quote (menu-item "Saved Options" customize-saved :help "Customize previously saved options"))) (bindings--define-key menu [separator-3] menu-bar-separator) (bindings--define-key menu [customize-browse] (quote (menu-item "Browse Customization Groups" customize-browse :help "Browse all customization groups"))) (bindings--define-key menu [customize] (quote (menu-item "Top-level Customization Group" customize :help "The master group called `Emacs'"))) (bindings--define-key menu [customize-themes] (quote (menu-item "Custom Themes" customize-themes :help "Choose a pre-defined customization theme"))) menu)) nil [24795 27060])
            ("menu-bar-make-mm-toggle" function (:arguments ("fname" "doc" "help" "props")) nil [27133 27584])
            ("menu-bar-make-toggle" function (:arguments ("name" "variable" "doc" "message" "help" "body")) nil [27586 28794])
            ("menu-set-font" function (:user-visible-flag t) nil [28842 29048])
            ("menu-bar-options-save" function (:user-visible-flag t) nil [29050 31135])
            ("menu-bar-showhide-fringe-ind-customize" function (:user-visible-flag t) nil [31244 31424])
            ("menu-bar-showhide-fringe-ind-mixed" function (:user-visible-flag t) nil [31426 31651])
            ("menu-bar-showhide-fringe-ind-box" function (:user-visible-flag t) nil [31653 31864])
            ("menu-bar-showhide-fringe-ind-right" function (:user-visible-flag t) nil [31866 32051])
            ("menu-bar-showhide-fringe-ind-left" function (:user-visible-flag t) nil [32053 32235])
            ("menu-bar-showhide-fringe-ind-none" function (:user-visible-flag t) nil [32237 32407])
            ("menu-bar-showhide-fringe-ind-menu" variable (:default-value (let ((menu (make-sparse-keymap "Buffer boundaries"))) (bindings--define-key menu [customize] (quote (menu-item "Other (Customize)" menu-bar-showhide-fringe-ind-customize :help "Additional choices available through Custom buffer" :visible (display-graphic-p) :button (:radio not (member indicate-buffer-boundaries (quote (nil left right ((top . left) (bottom . right)) ((t . right) (top . left))))))))) (bindings--define-key menu [mixed] (quote (menu-item "Opposite, Arrows Right" menu-bar-showhide-fringe-ind-mixed :help "Show top/bottom indicators in opposite fringes, arrows in right" :visible (display-graphic-p) :button (:radio equal indicate-buffer-boundaries (quote ((t . right) (top . left))))))) (bindings--define-key menu [box] (quote (menu-item "Opposite, No Arrows" menu-bar-showhide-fringe-ind-box :help "Show top/bottom indicators in opposite fringes, no arrows" :visible (display-graphic-p) :button (:radio equal indicate-buffer-boundaries (quote ((top . left) (bottom . right))))))) (bindings--define-key menu [right] (quote (menu-item "In Right Fringe" menu-bar-showhide-fringe-ind-right :help "Show buffer boundaries and arrows in right fringe" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries (quote right))))) (bindings--define-key menu [left] (quote (menu-item "In Left Fringe" menu-bar-showhide-fringe-ind-left :help "Show buffer boundaries and arrows in left fringe" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries (quote left))))) (bindings--define-key menu [none] (quote (menu-item "No Indicators" menu-bar-showhide-fringe-ind-none :help "Hide all buffer boundary indicators and arrows" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries nil)))) menu)) nil [32409 34821])
            ("menu-bar-showhide-fringe-menu-customize" function (:user-visible-flag t) nil [34823 34974])
            ("menu-bar-showhide-fringe-menu-customize-reset" function (:user-visible-flag t) nil [34976 35162])
            ("menu-bar-showhide-fringe-menu-customize-right" function (:user-visible-flag t) nil [35164 35361])
            ("menu-bar-showhide-fringe-menu-customize-left" function (:user-visible-flag t) nil [35363 35558])
            ("menu-bar-showhide-fringe-menu-customize-disable" function (:user-visible-flag t) nil [35560 35731])
            ("menu-bar-showhide-fringe-menu" variable (:default-value (let ((menu (make-sparse-keymap "Fringe"))) (bindings--define-key menu [showhide-fringe-ind] (\` (menu-item "Buffer Boundaries" (\, menu-bar-showhide-fringe-ind-menu) :visible (display-graphic-p) :help "Indicate buffer boundaries in fringe"))) (bindings--define-key menu [indicate-empty-lines] (menu-bar-make-toggle toggle-indicate-empty-lines indicate-empty-lines "Empty Line Indicators" "Indicating of empty lines %s" "Indicate trailing empty lines in fringe, globally")) (bindings--define-key menu [customize] (quote (menu-item "Customize Fringe" menu-bar-showhide-fringe-menu-customize :help "Detailed customization of fringe" :visible (display-graphic-p)))) (bindings--define-key menu [default] (quote (menu-item "Default" menu-bar-showhide-fringe-menu-customize-reset :help "Default width fringe on both left and right side" :visible (display-graphic-p) :button (:radio eq fringe-mode nil)))) (bindings--define-key menu [right] (quote (menu-item "On the Right" menu-bar-showhide-fringe-menu-customize-right :help "Fringe only on the right side" :visible (display-graphic-p) :button (:radio equal fringe-mode (quote (0)))))) (bindings--define-key menu [left] (quote (menu-item "On the Left" menu-bar-showhide-fringe-menu-customize-left :help "Fringe only on the left side" :visible (display-graphic-p) :button (:radio equal fringe-mode (quote (nil . 0)))))) (bindings--define-key menu [none] (quote (menu-item "None" menu-bar-showhide-fringe-menu-customize-disable :help "Turn off fringe" :visible (display-graphic-p) :button (:radio eq fringe-mode 0)))) menu)) nil [35733 37757])
            ("menu-bar-right-scroll-bar" function (:user-visible-flag t) nil [37759 37915])
            ("menu-bar-left-scroll-bar" function (:user-visible-flag t) nil [37917 38070])
            ("menu-bar-no-scroll-bar" function (:user-visible-flag t) nil [38072 38195])
            ("menu-bar-showhide-scroll-bar-menu" variable (:default-value (let ((menu (make-sparse-keymap "Scroll-bar"))) (bindings--define-key menu [right] (quote (menu-item "On the Right" menu-bar-right-scroll-bar :help "Scroll-bar on the right side" :visible (display-graphic-p) :button (:radio eq (cdr (assq (quote vertical-scroll-bars) (frame-parameters))) (quote right))))) (bindings--define-key menu [left] (quote (menu-item "On the Left" menu-bar-left-scroll-bar :help "Scroll-bar on the left side" :visible (display-graphic-p) :button (:radio eq (cdr (assq (quote vertical-scroll-bars) (frame-parameters))) (quote left))))) (bindings--define-key menu [none] (quote (menu-item "None" menu-bar-no-scroll-bar :help "Turn off scroll-bar" :visible (display-graphic-p) :button (:radio eq (cdr (assq (quote vertical-scroll-bars) (frame-parameters))) nil)))) menu)) nil [38197 39395])
            ("menu-bar-frame-for-menubar" function nil nil [39397 39580])
            ("menu-bar-positive-p" function (:arguments ("val")) nil [39582 39703])
            ("menu-bar-set-tool-bar-position" function (:arguments ("position")) nil [39705 39853])
            ("menu-bar-showhide-tool-bar-menu-customize-disable" function (:user-visible-flag t) nil [39854 40006])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-left" function (:user-visible-flag t) nil [40007 40168])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-right" function (:user-visible-flag t) nil [40169 40333])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-top" function (:user-visible-flag t) nil [40334 40492])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-bottom" function (:user-visible-flag t) nil [40493 40660])
            ("when" code nil nil [40662 43441])
            ("menu-bar-showhide-menu" variable (:default-value (let ((menu (make-sparse-keymap "Show/Hide"))) (bindings--define-key menu [column-number-mode] (menu-bar-make-mm-toggle column-number-mode "Column Numbers" "Show the current column number in the mode line")) (bindings--define-key menu [line-number-mode] (menu-bar-make-mm-toggle line-number-mode "Line Numbers" "Show the current line number in the mode line")) (bindings--define-key menu [size-indication-mode] (menu-bar-make-mm-toggle size-indication-mode "Size Indication" "Show the size of the buffer in the mode line")) (bindings--define-key menu [linecolumn-separator] menu-bar-separator) (bindings--define-key menu [showhide-battery] (menu-bar-make-mm-toggle display-battery-mode "Battery Status" "Display battery status information in mode line")) (bindings--define-key menu [showhide-date-time] (menu-bar-make-mm-toggle display-time-mode "Time, Load and Mail" "Display time, system load averages and mail status in mode line")) (bindings--define-key menu [datetime-separator] menu-bar-separator) (bindings--define-key menu [showhide-speedbar] (quote (menu-item "Speedbar" speedbar-frame-mode :help "Display a Speedbar quick-navigation frame" :button (:toggle and (boundp (quote speedbar-frame)) (frame-live-p (symbol-value (quote speedbar-frame))) (frame-visible-p (symbol-value (quote speedbar-frame))))))) (bindings--define-key menu [showhide-fringe] (\` (menu-item "Fringe" (\, menu-bar-showhide-fringe-menu) :visible (display-graphic-p)))) (bindings--define-key menu [showhide-scroll-bar] (\` (menu-item "Scroll-bar" (\, menu-bar-showhide-scroll-bar-menu) :visible (display-graphic-p)))) (bindings--define-key menu [showhide-tooltip-mode] (quote (menu-item "Tooltips" tooltip-mode :help "Turn tooltips on/off" :visible (and (display-graphic-p) (fboundp (quote x-show-tip))) :button (:toggle . tooltip-mode)))) (bindings--define-key menu [menu-bar-mode] (quote (menu-item "Menu-bar" toggle-menu-bar-mode-from-frame :help "Turn menu-bar on/off" :button (:toggle menu-bar-positive-p (frame-parameter (menu-bar-frame-for-menubar) (quote menu-bar-lines)))))) (if (and (boundp (quote menu-bar-showhide-tool-bar-menu)) (keymapp menu-bar-showhide-tool-bar-menu)) (bindings--define-key menu [showhide-tool-bar] (\` (menu-item "Tool-bar" (\, menu-bar-showhide-tool-bar-menu) :visible (display-graphic-p)))) (bindings--define-key menu [showhide-tool-bar] (quote (menu-item "Tool-bar" toggle-tool-bar-mode-from-frame :help "Turn tool-bar on/off" :visible (display-graphic-p) :button (:toggle menu-bar-positive-p (frame-parameter (menu-bar-frame-for-menubar) (quote tool-bar-lines))))))) menu)) nil [43443 47090])
            ("menu-bar-text-mode-auto-fill" function nil nil [47092 47376])
            ("menu-bar-line-wrapping-menu" variable (:default-value (let ((menu (make-sparse-keymap "Line Wrapping"))) (bindings--define-key menu [word-wrap] (\` (menu-item "Word Wrap (Visual Line mode)" (\, (lambda nil (interactive) (unless visual-line-mode (visual-line-mode 1)) (message "Visual-Line mode enabled"))) :help "Wrap long lines at word boundaries" :button (:radio and (null truncate-lines) (not (truncated-partial-width-window-p)) word-wrap) :visible (menu-bar-menu-frame-live-and-visible-p)))) (bindings--define-key menu [truncate] (\` (menu-item "Truncate Long Lines" (\, (lambda nil (interactive) (if visual-line-mode (visual-line-mode 0)) (setq word-wrap nil) (toggle-truncate-lines 1))) :help "Truncate long lines at window edge" :button (:radio or truncate-lines (truncated-partial-width-window-p)) :visible (menu-bar-menu-frame-live-and-visible-p) :enable (not (truncated-partial-width-window-p))))) (bindings--define-key menu [window-wrap] (\` (menu-item "Wrap at Window Edge" (\, (lambda nil (interactive) (if visual-line-mode (visual-line-mode 0)) (setq word-wrap nil) (if truncate-lines (toggle-truncate-lines -1)))) :help "Wrap long lines at window edge" :button (:radio and (null truncate-lines) (not (truncated-partial-width-window-p)) (not word-wrap)) :visible (menu-bar-menu-frame-live-and-visible-p) :enable (not (truncated-partial-width-window-p))))) menu)) nil [47379 49476])
            ("menu-bar-options-menu" variable (:default-value (let ((menu (make-sparse-keymap "Options"))) (bindings--define-key menu [customize] (\` (menu-item "Customize Emacs" (\, menu-bar-custom-menu)))) (bindings--define-key menu [package] (quote (menu-item "Manage Emacs Packages" package-list-packages :help "Install or uninstall additional Emacs packages"))) (bindings--define-key menu [save] (quote (menu-item "Save Options" menu-bar-options-save :help "Save options set from the menu above"))) (bindings--define-key menu [custom-separator] menu-bar-separator) (bindings--define-key menu [menu-set-font] (quote (menu-item "Set Default Font..." menu-set-font :visible (display-multi-font-p) :help "Select a default font"))) (if (featurep (quote system-font-setting)) (bindings--define-key menu [menu-system-font] (menu-bar-make-toggle toggle-use-system-font font-use-system-font "Use System Font" "Use system font: %s" "Use the monospaced font defined by the system"))) (bindings--define-key menu [showhide] (\` (menu-item "Show/Hide" (\, menu-bar-showhide-menu)))) (bindings--define-key menu [showhide-separator] menu-bar-separator) (bindings--define-key menu [mule] (\` (menu-item "Multilingual Environment" (\, mule-menu-keymap)))) (bindings--define-key menu [mule-separator] menu-bar-separator) (bindings--define-key menu [debug-on-quit] (menu-bar-make-toggle toggle-debug-on-quit debug-on-quit "Enter Debugger on Quit/C-g" "Debug on Quit %s" "Enter Lisp debugger when C-g is pressed")) (bindings--define-key menu [debug-on-error] (menu-bar-make-toggle toggle-debug-on-error debug-on-error "Enter Debugger on Error" "Debug on Error %s" "Enter Lisp debugger when an error is signaled")) (bindings--define-key menu [debugger-separator] menu-bar-separator) (bindings--define-key menu [blink-cursor-mode] (menu-bar-make-mm-toggle blink-cursor-mode "Blink Cursor" "Whether the cursor blinks (Blink Cursor mode)")) (bindings--define-key menu [cursor-separator] menu-bar-separator) (bindings--define-key menu [save-place] (menu-bar-make-toggle toggle-save-place-globally save-place "Save Place in Files between Sessions" "Saving place in files %s" "Visit files of previous session when restarting Emacs" (require (quote saveplace)) (set-default (quote save-place) (not (symbol-value (quote save-place)))))) (bindings--define-key menu [uniquify] (menu-bar-make-toggle toggle-uniquify-buffer-names uniquify-buffer-name-style "Use Directory Names in Buffer Names" "Directory name in buffer names (uniquify) %s" "Uniquify buffer names by adding parent directory names" (require (quote uniquify)) (setq uniquify-buffer-name-style (if (not uniquify-buffer-name-style) (quote forward))))) (bindings--define-key menu [edit-options-separator] menu-bar-separator) (bindings--define-key menu [cua-mode] (menu-bar-make-mm-toggle cua-mode "Use CUA Keys (Cut/Paste with C-x/C-c/C-v)" "Use C-z/C-x/C-c/C-v keys for undo/cut/copy/paste" (:visible (or (not (boundp (quote cua-enable-cua-keys))) cua-enable-cua-keys)))) (bindings--define-key menu [cua-emulation-mode] (menu-bar-make-mm-toggle cua-mode "Shift movement mark region (CUA)" "Use shifted movement keys to set and extend the region" (:visible (and (boundp (quote cua-enable-cua-keys)) (not cua-enable-cua-keys))))) (bindings--define-key menu [case-fold-search] (menu-bar-make-toggle toggle-case-fold-search case-fold-search "Ignore Case for Search" "Case-Insensitive Search %s" "Ignore letter-case in search commands")) (bindings--define-key menu [auto-fill-mode] (quote (menu-item "Auto Fill in Text Modes" menu-bar-text-mode-auto-fill :help "Automatically fill text while typing (Auto Fill mode)" :button (:toggle if (listp text-mode-hook) (member (quote turn-on-auto-fill) text-mode-hook) (eq (quote turn-on-auto-fill) text-mode-hook))))) (bindings--define-key menu [line-wrapping] (\` (menu-item "Line Wrapping in This Buffer" (\, menu-bar-line-wrapping-menu)))) (bindings--define-key menu [highlight-separator] menu-bar-separator) (bindings--define-key menu [highlight-paren-mode] (menu-bar-make-mm-toggle show-paren-mode "Highlight Matching Parentheses" "Highlight matching/mismatched parentheses at cursor (Show Paren mode)")) (bindings--define-key menu [transient-mark-mode] (menu-bar-make-mm-toggle transient-mark-mode "Highlight Active Region" "Make text in active region stand out in color (Transient Mark mode)" (:enable (not cua-mode)))) menu)) nil [49478 55258])
            ("send-mail-item-name" function nil nil [55289 55754])
            ("read-mail-item-name" function nil nil [55756 56000])
            ("menu-bar-games-menu" variable (:default-value (let ((menu (make-sparse-keymap "Games"))) (bindings--define-key menu [zone] (quote (menu-item "Zone Out" zone :help "Play tricks with Emacs display when Emacs is idle"))) (bindings--define-key menu [tetris] (quote (menu-item "Tetris" tetris :help "Falling blocks game"))) (bindings--define-key menu [solitaire] (quote (menu-item "Solitaire" solitaire :help "Get rid of all the stones"))) (bindings--define-key menu [snake] (quote (menu-item "Snake" snake :help "Move snake around avoiding collisions"))) (bindings--define-key menu [pong] (quote (menu-item "Pong" pong :help "Bounce the ball to your opponent"))) (bindings--define-key menu [mult] (quote (menu-item "Multiplication Puzzle" mpuz :help "Exercise brain with multiplication"))) (bindings--define-key menu [life] (quote (menu-item "Life" life :help "Watch how John Conway's cellular automaton evolves"))) (bindings--define-key menu [land] (quote (menu-item "Landmark" landmark :help "Watch a neural-network robot learn landmarks"))) (bindings--define-key menu [hanoi] (quote (menu-item "Towers of Hanoi" hanoi :help "Watch Towers-of-Hanoi puzzle solved by Emacs"))) (bindings--define-key menu [gomoku] (quote (menu-item "Gomoku" gomoku :help "Mark 5 contiguous squares (like tic-tac-toe)"))) (bindings--define-key menu [bubbles] (quote (menu-item "Bubbles" bubbles :help "Remove all bubbles using the fewest moves"))) (bindings--define-key menu [black-box] (quote (menu-item "Blackbox" blackbox :help "Find balls in a black box by shooting rays"))) (bindings--define-key menu [adventure] (quote (menu-item "Adventure" dunnet :help "Dunnet, a text Adventure game for Emacs"))) (bindings--define-key menu [5x5] (quote (menu-item "5x5" 5x5 :help "Fill in all the squares on a 5x5 board"))) menu)) nil [56002 58090])
            ("menu-bar-encryption-decryption-menu" variable (:default-value (let ((menu (make-sparse-keymap "Encryption/Decryption"))) (bindings--define-key menu [insert-keys] (quote (menu-item "Insert Keys" epa-insert-keys :help "Insert public keys after the current point"))) (bindings--define-key menu [export-keys] (quote (menu-item "Export Keys" epa-export-keys :help "Export public keys to a file"))) (bindings--define-key menu [import-keys-region] (quote (menu-item "Import Keys from Region" epa-import-keys-region :help "Import public keys from the current region"))) (bindings--define-key menu [import-keys] (quote (menu-item "Import Keys from File..." epa-import-keys :help "Import public keys from a file"))) (bindings--define-key menu [list-keys] (quote (menu-item "List Keys" epa-list-keys :help "Browse your public keyring"))) (bindings--define-key menu [separator-keys] menu-bar-separator) (bindings--define-key menu [sign-region] (quote (menu-item "Sign Region" epa-sign-region :help "Create digital signature of the current region"))) (bindings--define-key menu [verify-region] (quote (menu-item "Verify Region" epa-verify-region :help "Verify digital signature of the current region"))) (bindings--define-key menu [encrypt-region] (quote (menu-item "Encrypt Region" epa-encrypt-region :help "Encrypt the current region"))) (bindings--define-key menu [decrypt-region] (quote (menu-item "Decrypt Region" epa-decrypt-region :help "Decrypt the current region"))) (bindings--define-key menu [separator-file] menu-bar-separator) (bindings--define-key menu [sign-file] (quote (menu-item "Sign File..." epa-sign-file :help "Create digital signature of a file"))) (bindings--define-key menu [verify-file] (quote (menu-item "Verify File..." epa-verify-file :help "Verify digital signature of a file"))) (bindings--define-key menu [encrypt-file] (quote (menu-item "Encrypt File..." epa-encrypt-file :help "Encrypt a file"))) (bindings--define-key menu [decrypt-file] (quote (menu-item "Decrypt File..." epa-decrypt-file :help "Decrypt a file"))) menu)) nil [58092 60433])
            ("menu-bar-read-mail" function (:user-visible-flag t) nil [60435 60562])
            ("menu-bar-tools-menu" variable (:default-value (let ((menu (make-sparse-keymap "Tools"))) (bindings--define-key menu [games] (\` (menu-item "Games" (\, menu-bar-games-menu)))) (bindings--define-key menu [separator-games] menu-bar-separator) (bindings--define-key menu [encryption-decryption] (\` (menu-item "Encryption/Decryption" (\, menu-bar-encryption-decryption-menu)))) (bindings--define-key menu [separator-encryption-decryption] menu-bar-separator) (bindings--define-key menu [simple-calculator] (quote (menu-item "Simple Calculator" calculator :help "Invoke the Emacs built-in quick calculator"))) (bindings--define-key menu [calc] (quote (menu-item "Programmable Calculator" calc :help "Invoke the Emacs built-in full scientific calculator"))) (bindings--define-key menu [calendar] (quote (menu-item "Calendar" calendar :help "Invoke the Emacs built-in calendar"))) (bindings--define-key menu [separator-net] menu-bar-separator) (bindings--define-key menu [directory-search] (quote (menu-item "Directory Search" eudc-tools-menu))) (bindings--define-key menu [compose-mail] (quote (menu-item (format "Send Mail (with %s)" (send-mail-item-name)) compose-mail :visible (and mail-user-agent (not (eq mail-user-agent (quote ignore)))) :help "Send a mail message"))) (bindings--define-key menu [rmail] (quote (menu-item (format "Read Mail (with %s)" (read-mail-item-name)) menu-bar-read-mail :visible (and read-mail-command (not (eq read-mail-command (quote ignore)))) :help "Read your mail and reply to it"))) (bindings--define-key menu [gnus] (quote (menu-item "Read Net News (Gnus)" gnus :help "Read network news groups"))) (bindings--define-key menu [separator-vc] menu-bar-separator) (bindings--define-key menu [vc] nil) (bindings--define-key menu [separator-compare] menu-bar-separator) (bindings--define-key menu [epatch] (quote (menu-item "Apply Patch" menu-bar-epatch-menu))) (bindings--define-key menu [ediff-merge] (quote (menu-item "Merge" menu-bar-ediff-merge-menu))) (bindings--define-key menu [compare] (quote (menu-item "Compare (Ediff)" menu-bar-ediff-menu))) (bindings--define-key menu [separator-spell] menu-bar-separator) (bindings--define-key menu [spell] (quote (menu-item "Spell Checking" ispell-menu-map))) (bindings--define-key menu [separator-prog] menu-bar-separator) (bindings--define-key menu [semantic] (quote (menu-item "Source Code Parsers (Semantic)" semantic-mode :help "Toggle automatic parsing in source code buffers (Semantic mode)" :button (:toggle bound-and-true-p semantic-mode)))) (bindings--define-key menu [ede] (quote (menu-item "Project support (EDE)" global-ede-mode :help "Toggle the Emacs Development Environment (Global EDE mode)" :button (:toggle bound-and-true-p global-ede-mode)))) (bindings--define-key menu [gdb] (quote (menu-item "Debugger (GDB)..." gdb :help "Debug a program from within Emacs with GDB"))) (bindings--define-key menu [shell-on-region] (quote (menu-item "Shell Command on Region..." shell-command-on-region :enable mark-active :help "Pass marked region to a shell command"))) (bindings--define-key menu [shell] (quote (menu-item "Shell Command..." shell-command :help "Invoke a shell command and catch its output"))) (bindings--define-key menu [compile] (quote (menu-item "Compile..." compile :help "Invoke compiler or Make, view compilation errors"))) (bindings--define-key menu [grep] (quote (menu-item "Search Files (Grep)..." grep :help "Search files for strings or regexps (with Grep)"))) menu)) nil [60564 64633])
            ("menu-bar-describe-menu" variable (:default-value (let ((menu (make-sparse-keymap "Describe"))) (bindings--define-key menu [mule-diag] (quote (menu-item "Show All of Mule Status" mule-diag :visible (default-value (quote enable-multibyte-characters)) :help "Display multilingual environment settings"))) (bindings--define-key menu [describe-coding-system-briefly] (quote (menu-item "Describe Coding System (Briefly)" describe-current-coding-system-briefly :visible (default-value (quote enable-multibyte-characters))))) (bindings--define-key menu [describe-coding-system] (quote (menu-item "Describe Coding System..." describe-coding-system :visible (default-value (quote enable-multibyte-characters))))) (bindings--define-key menu [describe-input-method] (quote (menu-item "Describe Input Method..." describe-input-method :visible (default-value (quote enable-multibyte-characters)) :help "Keyboard layout for specific input method"))) (bindings--define-key menu [describe-language-environment] (\` (menu-item "Describe Language Environment" (\, describe-language-environment-map)))) (bindings--define-key menu [separator-desc-mule] menu-bar-separator) (bindings--define-key menu [list-keybindings] (quote (menu-item "List Key Bindings" describe-bindings :help "Display all current key bindings (keyboard shortcuts)"))) (bindings--define-key menu [describe-current-display-table] (quote (menu-item "Describe Display Table" describe-current-display-table :help "Describe the current display table"))) (bindings--define-key menu [describe-package] (quote (menu-item "Describe Package..." describe-package :help "Display documentation of a Lisp package"))) (bindings--define-key menu [describe-face] (quote (menu-item "Describe Face..." describe-face :help "Display the properties of a face"))) (bindings--define-key menu [describe-variable] (quote (menu-item "Describe Variable..." describe-variable :help "Display documentation of variable/option"))) (bindings--define-key menu [describe-function] (quote (menu-item "Describe Function..." describe-function :help "Display documentation of function/command"))) (bindings--define-key menu [describe-key-1] (quote (menu-item "Describe Key or Mouse Operation..." describe-key :help "Display documentation of command bound to a key, a click, or a menu-item"))) (bindings--define-key menu [describe-mode] (quote (menu-item "Describe Buffer Modes" describe-mode :help "Describe this buffer's major and minor mode"))) menu)) nil [64662 67502])
            ("menu-bar-read-lispref" function (:user-visible-flag t) nil [67504 67627])
            ("menu-bar-read-lispintro" function (:user-visible-flag t) nil [67629 67765])
            ("search-emacs-glossary" function (:user-visible-flag t) nil [67767 67906])
            ("emacs-index-search" function
               (:user-visible-flag t
                :arguments ("topic"))
                nil [67908 68079])
            ("elisp-index-search" function
               (:user-visible-flag t
                :arguments ("topic"))
                nil [68081 68262])
            ("menu-bar-search-documentation-menu" variable (:default-value (let ((menu (make-sparse-keymap "Search Documentation"))) (bindings--define-key menu [search-documentation-strings] (quote (menu-item "Search Documentation Strings..." apropos-documentation :help "Find functions and variables whose doc strings match a regexp"))) (bindings--define-key menu [find-any-object-by-name] (quote (menu-item "Find Any Object by Name..." apropos :help "Find symbols of any kind whose names match a regexp"))) (bindings--define-key menu [find-option-by-value] (quote (menu-item "Find Options by Value..." apropos-value :help "Find variables whose values match a regexp"))) (bindings--define-key menu [find-options-by-name] (quote (menu-item "Find Options by Name..." apropos-variable :help "Find variables whose names match a regexp"))) (bindings--define-key menu [find-commands-by-name] (quote (menu-item "Find Commands by Name..." apropos-command :help "Find commands whose names match a regexp"))) (bindings--define-key menu [sep1] menu-bar-separator) (bindings--define-key menu [lookup-command-in-manual] (quote (menu-item "Look Up Command in User Manual..." Info-goto-emacs-command-node :help "Display manual section that describes a command"))) (bindings--define-key menu [lookup-key-in-manual] (quote (menu-item "Look Up Key in User Manual..." Info-goto-emacs-key-command-node :help "Display manual section that describes a key"))) (bindings--define-key menu [lookup-subject-in-elisp-manual] (quote (menu-item "Look Up Subject in ELisp Manual..." elisp-index-search :help "Find description of a subject in Emacs Lisp manual"))) (bindings--define-key menu [lookup-subject-in-emacs-manual] (quote (menu-item "Look Up Subject in User Manual..." emacs-index-search :help "Find description of a subject in Emacs User manual"))) (bindings--define-key menu [emacs-terminology] (quote (menu-item "Emacs Terminology" search-emacs-glossary :help "Display the Glossary section of the Emacs manual"))) menu)) nil [68264 70479])
            ("menu-bar-manuals-menu" variable (:default-value (let ((menu (make-sparse-keymap "More Manuals"))) (bindings--define-key menu [man] (quote (menu-item "Read Man Page..." manual-entry :help "Man-page docs for external commands and libraries"))) (bindings--define-key menu [sep2] menu-bar-separator) (bindings--define-key menu [order-emacs-manuals] (quote (menu-item "Ordering Manuals" view-order-manuals :help "How to order manuals from the Free Software Foundation"))) (bindings--define-key menu [lookup-subject-in-all-manuals] (quote (menu-item "Lookup Subject in all Manuals..." info-apropos :help "Find description of a subject in all installed manuals"))) (bindings--define-key menu [other-manuals] (quote (menu-item "All Other Manuals (Info)" Info-directory :help "Read any of the installed manuals"))) (bindings--define-key menu [emacs-lisp-reference] (quote (menu-item "Emacs Lisp Reference" menu-bar-read-lispref :help "Read the Emacs Lisp Reference manual"))) (bindings--define-key menu [emacs-lisp-intro] (quote (menu-item "Introduction to Emacs Lisp" menu-bar-read-lispintro :help "Read the Introduction to Emacs Lisp Programming"))) menu)) nil [70481 71755])
            ("menu-bar-help-extra-packages" function (:user-visible-flag t) nil [71757 72008])
            ("help-with-tutorial-spec-language" function (:user-visible-flag t) nil [72010 72158])
            ("menu-bar-help-menu" variable (:default-value (let ((menu (make-sparse-keymap "Help"))) (bindings--define-key menu [about-gnu-project] (quote (menu-item "About GNU" describe-gnu-project :help "About the GNU System, GNU Project, and GNU/Linux"))) (bindings--define-key menu [about-emacs] (quote (menu-item "About Emacs" about-emacs :help "Display version number, copyright info, and basic help"))) (bindings--define-key menu [sep4] menu-bar-separator) (bindings--define-key menu [describe-no-warranty] (quote (menu-item "(Non)Warranty" describe-no-warranty :help "Explain that Emacs has NO WARRANTY"))) (bindings--define-key menu [describe-copying] (quote (menu-item "Copying Conditions" describe-copying :help "Show the Emacs license (GPL)"))) (bindings--define-key menu [getting-new-versions] (quote (menu-item "Getting New Versions" describe-distribution :help "How to get the latest version of Emacs"))) (bindings--define-key menu [sep2] menu-bar-separator) (bindings--define-key menu [external-packages] (quote (menu-item "Finding Extra Packages" menu-bar-help-extra-packages :help "Lisp packages distributed separately for use in Emacs"))) (bindings--define-key menu [find-emacs-packages] (quote (menu-item "Search Built-in Packages" finder-by-keyword :help "Find built-in packages and features by keyword"))) (bindings--define-key menu [more-manuals] (\` (menu-item "More Manuals" (\, menu-bar-manuals-menu)))) (bindings--define-key menu [emacs-manual] (quote (menu-item "Read the Emacs Manual" info-emacs-manual :help "Full documentation of Emacs features"))) (bindings--define-key menu [describe] (\` (menu-item "Describe" (\, menu-bar-describe-menu)))) (bindings--define-key menu [search-documentation] (\` (menu-item "Search Documentation" (\, menu-bar-search-documentation-menu)))) (bindings--define-key menu [sep1] menu-bar-separator) (bindings--define-key menu [emacs-psychotherapist] (quote (menu-item "Emacs Psychotherapist" doctor :help "Our doctor will help you feel better"))) (bindings--define-key menu [send-emacs-bug-report] (quote (menu-item "Send Bug Report..." report-emacs-bug :help "Send e-mail to Emacs maintainers"))) (bindings--define-key menu [emacs-manual-bug] (quote (menu-item "How to Report a Bug" info-emacs-bug :help "Read about how to report an Emacs bug"))) (bindings--define-key menu [emacs-known-problems] (quote (menu-item "Emacs Known Problems" view-emacs-problems :help "Read about known problems with Emacs"))) (bindings--define-key menu [emacs-news] (quote (menu-item "Emacs News" view-emacs-news :help "New features of this version"))) (bindings--define-key menu [emacs-faq] (quote (menu-item "Emacs FAQ" view-emacs-FAQ :help "Frequently asked (and answered) questions about Emacs"))) (bindings--define-key menu [emacs-tutorial-language-specific] (quote (menu-item "Emacs Tutorial (choose language)..." help-with-tutorial-spec-language :help "Learn how to use Emacs (choose a language)"))) (bindings--define-key menu [emacs-tutorial] (quote (menu-item "Emacs Tutorial" help-with-tutorial :help "Learn how to use Emacs"))) (and (featurep (quote ns)) (not (eq system-type (quote darwin))) (bindings--define-key menu [info-panel] (quote (menu-item "About Emacs..." ns-do-emacs-info-panel)))) menu)) nil [72160 75920])
            ("bindings--define-key" code nil nil [75922 76009])
            ("bindings--define-key" code nil nil [76010 76104])
            ("bindings--define-key" code nil nil [76105 76198])
            ("bindings--define-key" code nil nil [76199 76283])
            ("bindings--define-key" code nil nil [76284 76368])
            ("if" code nil nil [76500 76764])
            ("menu-bar-menu-frame-live-and-visible-p" function nil nil [76766 77070])
            ("menu-bar-non-minibuffer-window-p" function nil nil [77072 77433])
            ("kill-this-buffer" function (:user-visible-flag t) nil [77435 77867])
            ("kill-this-buffer-enabled-p" function nil nil [77869 78337])
            ("put" code nil nil [78339 78400])
            ("delete-frame-enabled-p" function nil nil [78475 78760])
            ("yank-menu-length" variable (:default-value 20) nil [78762 78873])
            ("menu-bar-update-yank-menu" function (:arguments ("string" "old")) nil [78875 79866])
            ("put" code nil nil [79868 79914])
            ("menu-bar-select-yank" function (:user-visible-flag t) nil [79915 80155])
            ("buffers-menu-max-size" variable (:default-value 10) nil [80177 80521])
            ("buffers-menu-buffer-name-length" variable (:default-value 30) nil [80523 80872])
            ("buffers-menu-show-directories" variable (:default-value (quote unless-uniquify)) nil [80874 81618])
            ("buffers-menu-show-status" variable (:default-value t) nil [81620 81993])
            ("list-buffers-directory" variable nil nil [81995 82104])
            ("make-variable-buffer-local" code nil nil [82105 82157])
            ("menu-bar-select-buffer" function nil nil [82159 82248])
            ("menu-bar-select-frame" function (:arguments ("frame")) nil [82250 82361])
            ("menu-bar-update-buffers-1" function (:arguments ("elt")) nil [82363 83233])
            ("menu-bar-buffers-menu-command-entries" variable nil nil [83302 83352])
            ("menu-bar-select-buffer-function" variable (:default-value (quote switch-to-buffer)) nil [83354 83542])
            ("menu-bar-update-buffers" function (:arguments ("force")) nil [83544 87715])
            ("add-hook" code nil nil [87717 87774])
            ("menu-bar-update-buffers" code nil nil [87776 87801])
            ("dolist" code nil nil [88424 88720])
            ("let" code nil nil [88722 89211])
            ("let" code nil nil [89213 90282])
            ("define-minor-mode" code nil nil [90285 91644])
            ("put" code nil nil [92088 92129])
            ("toggle-menu-bar-mode-from-frame" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [92131 92537])
            ("declare-function" code nil nil [92539 92604])
            ("declare-function" code nil nil [92605 92674])
            ("menu-bar-open" function
               (:user-visible-flag t
                :arguments ("frame"))
                nil [92676 93287])
            ("global-set-key" code nil nil [93289 93326])
            ("menu-bar" package nil nil [93328 93347]))          
    :file "menu-bar.el"
    :pointmax 93375
    :fsize 93374
    :lastmodtime '(20806 7943 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "dnd.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("dnd-protocol-alist" variable (:default-value (\` (((\, (purecopy "^file:///")) . dnd-open-local-file) ((\, (purecopy "^file://")) . dnd-open-file) ((\, (purecopy "^file:")) . dnd-open-local-file) ((\, (purecopy "^\\(https?\\|ftp\\|file\\|nfs\\)://")) . dnd-open-file)))) nil [1192 2295])
            ("dnd-open-remote-file-function" variable (:default-value (if (eq system-type (quote windows-nt)) (quote dnd-open-local-file) (quote dnd-open-remote-url))) nil [2298 2981])
            ("dnd-open-file-other-window" variable nil nil [2984 3148])
            ("dnd-handle-one-url" function (:arguments ("window" "action" "url")) nil [3165 4213])
            ("dnd-get-local-file-uri" function (:arguments ("uri")) nil [4216 4987])
            ("dnd-unescape-uri" function (:arguments ("uri")) nil [4989 5217])
            ("dnd-get-local-file-name" function (:arguments ("uri" "must-exist")) nil [5290 6046])
            ("dnd-open-local-file" function (:arguments ("uri" "_action")) nil [6048 6834])
            ("dnd-open-remote-url" function (:arguments ("uri" "_action")) nil [6836 7319])
            ("dnd-open-file" function (:arguments ("uri" "action")) nil [7322 7998])
            ("dnd-insert-text" function (:arguments ("window" "action" "text")) nil [8001 8404])
            ("dnd" package nil nil [8407 8421]))          
    :file "dnd.el"
    :pointmax 8444
    :fsize 8444
    :lastmodtime '(20806 7940 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "tool-bar.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("define-minor-mode" code nil nil [1738 2764])
            ("toggle-tool-bar-mode-from-frame" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [2858 3206])
            ("tool-bar-map" variable (:default-value (make-sparse-keymap)) nil [3208 3332])
            ("global-set-key" code nil nil [3334 3442])
            ("declare-function" code nil nil [3444 3508])
            ("tool-bar-keymap-cache" variable
               (:constant-flag t
                :default-value (make-hash-table :weakness t :test (quote equal)))
                nil [3510 3585])
            ("tool-bar-make-keymap" function (:arguments ("_ignore")) nil [3587 3980])
            ("tool-bar-make-keymap-1" function nil nil [3982 4877])
            ("tool-bar-add-item" function (:arguments ("icon" "def" "key" "props")) nil [4894 5694])
            ("tool-bar--image-expression" function (:arguments ("icon")) nil [5696 6630])
            ("tool-bar-local-item" function (:arguments ("icon" "def" "key" "map" "props")) nil [6647 7426])
            ("tool-bar-add-item-from-menu" function (:arguments ("command" "icon" "map" "props")) nil [7443 8220])
            ("tool-bar-local-item-from-menu" function (:arguments ("command" "icon" "in-map" "from-map" "props")) nil [8237 10378])
            ("tool-bar-setup" function nil nil [10446 12211])
            ("if" code nil nil [12213 12861])
            ("tool-bar" package nil nil [12864 12883]))          
    :file "tool-bar.el"
    :pointmax 12911
    :fsize 12910
    :lastmodtime '(20806 7945 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "image.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("image" customgroup (:user-visible-flag t) nil [849 908])
            ("defalias" code nil nil [910 948])
            ("image-type-header-regexps" variable
               (:constant-flag t
                :default-value (\` (("\\`/[	
 ]*\\*.*XPM.\\*/" . xpm) ("\\`P[1-6][[:space:]]+\\(?:#.*[[:space:]]+\\)*[0-9]+[[:space:]]+[0-9]+" . pbm) ("\\`GIF8[79]a" . gif) ("\\`\211PNG

" . png) ("\\`[	
 ]*#define \\([a-z0-9_]+\\)_width [0-9]+
#define \\1_height [0-9]+
\\(#define \\1_x_hot [0-9]+
#define \\1_y_hot [0-9]+
\\)?static \\(unsigned \\)?char \\1_bits" . xbm) ("\\`\\(?:MM \\*\\|II\\* \\)" . tiff) ("\\`[	
 ]*%!PS" . postscript) ("\\`\377\330" . jpeg) ((\, (let* ((incomment-re "\\(?:[^-]\\|-[^-]\\)") (comment-re (concat "\\(?:!--" incomment-re "*-->[ 	
]*<\\)"))) (concat "\\(?:<\\?xml[ 	
]+[^>]*>\\)?[ 	
]*<" comment-re "*" "\\(?:!DOCTYPE[ 	
]+[^>]*>[ 	
]*<[ 	
]*" comment-re "*\\)?" "[Ss][Vv][Gg]"))) . svg))))
                nil [950 2230])
            ("image-type-file-name-regexps" variable (:default-value (quote (("\\.png\\'" . png) ("\\.gif\\'" . gif) ("\\.jpe?g\\'" . jpeg) ("\\.bmp\\'" . bmp) ("\\.xpm\\'" . xpm) ("\\.pbm\\'" . pbm) ("\\.xbm\\'" . xbm) ("\\.ps\\'" . postscript) ("\\.tiff?\\'" . tiff) ("\\.svgz?\\'" . svg)))) nil [2232 2691])
            ("image-type-auto-detectable" variable (:default-value (quote ((pbm . t) (xbm) (bmp . maybe) (gif . maybe) (png . maybe) (xpm) (jpeg . maybe) (tiff . maybe) (svg . maybe) (postscript)))) nil [2868 3371])
            ("image-load-path" variable (:default-value (list (file-name-as-directory (expand-file-name "images" data-directory)) (quote data-directory) (quote load-path))) nil [3373 3930])
            ("image-load-path-for-library" function (:arguments ("library" "image" "path" "no-error")) nil [3933 7977])
            ("image-jpeg-p" function (:arguments ("data")) nil [8073 8861])
            ("image-type-from-data" function (:arguments ("data")) nil [8879 9452])
            ("image-type-from-buffer" function nil nil [9470 10292])
            ("image-type-from-file-header" function (:arguments ("file")) nil [10310 10797])
            ("image-type-from-file-name" function (:arguments ("file")) nil [10815 11354])
            ("image-type" function (:arguments ("source" "type" "data-p")) nil [11371 12244])
            ("if" code nil nil [12247 12397])
            ("define-obsolete-variable-alias" code nil nil [12399 12490])
            ("image-type-available-p" function (:arguments ("type")) nil [12507 12713])
            ("image-type-auto-detected-p" function nil nil [12731 13376])
            ("create-image" function (:arguments ("file-or-data" "type" "data-p" "props")) nil [13394 14492])
            ("put-image" function (:arguments ("image" "pos" "string" "area")) nil [14510 15793])
            ("insert-image" function (:arguments ("image" "string" "area" "slice")) nil [15811 17616])
            ("insert-sliced-image" function (:arguments ("image" "string" "area" "rows" "cols")) nil [17634 19288])
            ("remove-images" function (:arguments ("start" "end" "buffer")) nil [19307 19794])
            ("image-search-load-path" function (:arguments ("file" "path")) nil [19796 20502])
            ("find-image" function (:arguments ("specs")) nil [20519 21832])
            ("defimage" function (:arguments ("symbol" "specs" "doc")) nil [21850 22699])
            ("image-animated-types" variable
               (:constant-flag t
                :default-value (quote (gif)))
                nil [22727 22809])
            ("image-animated-p" function (:arguments ("image")) nil [22811 23562])
            ("image-animate" function (:arguments ("image" "index" "limit")) nil [23584 24238])
            ("image-animate-timer" function (:arguments ("image")) nil [24240 24623])
            ("image-animate-timeout" function (:arguments ("image" "n" "count" "time-elapsed" "limit")) nil [24829 25935])
            ("imagemagick-types-inhibit" variable nil nil [25939 25973])
            ("imagemagick-enabled-types" variable nil nil [25974 26008])
            ("imagemagick-filter-types" function nil nil [26010 26827])
            ("imagemagick--file-regexp" variable nil nil [26829 27046])
            ("imagemagick-register-types" function nil nil [27063 28555])
            ("imagemagick-types-inhibit" variable (:default-value (quote (C HTML HTM INFO M TXT PDF))) nil [28557 29434])
            ("imagemagick-enabled-types" variable (:default-value (quote (3FR ART ARW AVS BMP BMP2 BMP3 CAL CALS CMYK CMYKA CR2 CRW CUR CUT DCM DCR DCX DDS DJVU DNG DPX EXR FAX FITS GBR GIF GIF87 GRB HRZ ICB ICO ICON J2C JNG JP2 JPC JPEG JPG JPX K25 KDC MIFF MNG MRW MSL MSVG MTV NEF ORF OTB PBM PCD PCDS PCL PCT PCX PDB PEF PGM PICT PIX PJPEG PNG PNG24 PNG32 PNG8 PNM PPM PSD PTIF PWP RAF RAS RBG RGB RGBA RGBO RLA RLE SCR SCT SFW SGI SR2 SRF SUN SVG SVGZ TGA TIFF TIFF64 TILE TIM TTF UYVY VDA VICAR VID VIFF VST WBMP WPG X3F XBM XC XCF XPM XV XWD YCbCr YCbCrA YUV))) nil [29436 30994])
            ("imagemagick-register-types" code nil nil [30996 31024])
            ("image" package nil nil [31026 31042]))          
    :file "image.el"
    :pointmax 31067
    :fsize 31066
    :lastmodtime '(20806 7942 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "fringe.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("fringe" customgroup (:user-visible-flag t) nil [1316 1392])
            ("when" code nil nil [1460 2751])
            ("fringe-bitmap-p" function (:arguments ("symbol")) nil [2754 2863])
            ("fringe-mode" variable nil nil [2898 2918])
            ("fringe-mode-explicit" variable nil nil [2920 3073])
            ("set-fringe-mode-1" function (:arguments ("_ignore" "value")) nil [3075 3300])
            ("set-fringe-mode" function (:arguments ("value")) nil [3302 3766])
            ("fringe--check-style" function (:arguments ("style")) nil [3768 4022])
            ("fringe-mode-initialize" function (:arguments ("symbol" "value")) nil [4129 4807])
            ("fringe-styles" variable
               (:constant-flag t
                :default-value (quote (("default") ("no-fringes" . 0) ("right-only" 0) ("left-only" nil . 0) ("half-width" 4 . 4) ("minimal" 1 . 1))))
                nil [4809 5462])
            ("fringe-mode" variable nil nil [5464 7122])
            ("setq" code nil nil [7219 7248])
            ("fringe-query-style" function (:arguments ("all-frames")) nil [7250 8069])
            ("fringe-mode" function
               (:user-visible-flag t
                :arguments ("mode"))
                nil [8071 9238])
            ("set-fringe-style" function
               (:user-visible-flag t
                :arguments ("mode"))
                nil [9240 10476])
            ("fringe-columns" function (:arguments ("side" "real")) nil [10478 10902])
            ("fringe" package nil nil [10904 10921]))          
    :file "fringe.el"
    :pointmax 10947
    :fsize 10947
    :lastmodtime '(20806 7941 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "buff-menu.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("tabulated-list" include nil nil [1073 1098])
            ("Buffer-menu" customgroup (:user-visible-flag t) nil [1100 1208])
            ("Buffer-menu-use-header-line" variable (:default-value t) nil [1210 1364])
            ("buffer-menu-buffer" variable
               (:default-value (quote ((t (:weight bold))))
                :type "face")
                nil [1366 1486])
            ("put" code nil nil [1487 1544])
            ("Buffer-menu-buffer+size-width" variable nil nil [1546 1991])
            ("make-obsolete-variable" code nil nil [1993 2130])
            ("Buffer-menu-name-width" variable (:default-value 19) nil [2132 2277])
            ("Buffer-menu-size-width" variable (:default-value 7) nil [2279 2423])
            ("Buffer-menu-mode-width" variable (:default-value 16) nil [2425 2550])
            ("Buffer-menu-use-frame-buffer-list" variable (:default-value t) nil [2552 2953])
            ("Buffer-menu-files-only" variable nil nil [2955 3128])
            ("make-variable-buffer-local" code nil nil [3129 3181])
            ("Info-current-file" variable nil nil [3183 3209])
            ("Info-current-node" variable nil nil [3225 3251])
            ("Buffer-menu-mode-map" variable (:default-value (let ((map (make-sparse-keymap)) (menu-map (make-sparse-keymap))) (set-keymap-parent map tabulated-list-mode-map) (define-key map "v" (quote Buffer-menu-select)) (define-key map "2" (quote Buffer-menu-2-window)) (define-key map "1" (quote Buffer-menu-1-window)) (define-key map "f" (quote Buffer-menu-this-window)) (define-key map "e" (quote Buffer-menu-this-window)) (define-key map "" (quote Buffer-menu-this-window)) (define-key map "o" (quote Buffer-menu-other-window)) (define-key map "" (quote Buffer-menu-switch-other-window)) (define-key map "s" (quote Buffer-menu-save)) (define-key map "d" (quote Buffer-menu-delete)) (define-key map "k" (quote Buffer-menu-delete)) (define-key map "" (quote Buffer-menu-delete)) (define-key map "" (quote Buffer-menu-delete-backwards)) (define-key map "x" (quote Buffer-menu-execute)) (define-key map " " (quote next-line)) (define-key map "" (quote Buffer-menu-backup-unmark)) (define-key map "~" (quote Buffer-menu-not-modified)) (define-key map "u" (quote Buffer-menu-unmark)) (define-key map "m" (quote Buffer-menu-mark)) (define-key map "t" (quote Buffer-menu-visit-tags-table)) (define-key map "%" (quote Buffer-menu-toggle-read-only)) (define-key map "b" (quote Buffer-menu-bury)) (define-key map "V" (quote Buffer-menu-view)) (define-key map "T" (quote Buffer-menu-toggle-files-only)) (define-key map (kbd "M-s a C-s") (quote Buffer-menu-isearch-buffers)) (define-key map (kbd "M-s a M-C-s") (quote Buffer-menu-isearch-buffers-regexp)) (define-key map [mouse-2] (quote Buffer-menu-mouse-select)) (define-key map [follow-link] (quote mouse-face)) (define-key map [menu-bar Buffer-menu-mode] (cons (purecopy "Buffer-Menu") menu-map)) (bindings--define-key menu-map [quit] (quote (menu-item "Quit" quit-window :help "Remove the buffer menu from the display"))) (bindings--define-key menu-map [rev] (quote (menu-item "Refresh" revert-buffer :help "Refresh the *Buffer List* buffer contents"))) (bindings--define-key menu-map [s0] menu-bar-separator) (bindings--define-key menu-map [tf] (quote (menu-item "Show Only File Buffers" Buffer-menu-toggle-files-only :button (:toggle . Buffer-menu-files-only) :help "Toggle whether the current buffer-menu displays only file buffers"))) (bindings--define-key menu-map [s1] menu-bar-separator) (bindings--define-key menu-map [sel] (quote (menu-item "Select Marked" Buffer-menu-select :help "Select this line's buffer; also display buffers marked with `>'"))) (bindings--define-key menu-map [bm2] (quote (menu-item "Select Two" Buffer-menu-2-window :help "Select this line's buffer, with previous buffer in second window"))) (bindings--define-key menu-map [bm1] (quote (menu-item "Select Current" Buffer-menu-1-window :help "Select this line's buffer, alone, in full frame"))) (bindings--define-key menu-map [ow] (quote (menu-item "Select in Other Window" Buffer-menu-other-window :help "Select this line's buffer in other window, leaving buffer menu visible"))) (bindings--define-key menu-map [tw] (quote (menu-item "Select in Current Window" Buffer-menu-this-window :help "Select this line's buffer in this window"))) (bindings--define-key menu-map [s2] menu-bar-separator) (bindings--define-key menu-map [is] (quote (menu-item "Regexp Isearch Marked Buffers..." Buffer-menu-isearch-buffers-regexp :help "Search for a regexp through all marked buffers using Isearch"))) (bindings--define-key menu-map [ir] (quote (menu-item "Isearch Marked Buffers..." Buffer-menu-isearch-buffers :help "Search for a string through all marked buffers using Isearch"))) (bindings--define-key menu-map [s3] menu-bar-separator) (bindings--define-key menu-map [by] (quote (menu-item "Bury" Buffer-menu-bury :help "Bury the buffer listed on this line"))) (bindings--define-key menu-map [vt] (quote (menu-item "Set Unmodified" Buffer-menu-not-modified :help "Mark buffer on this line as unmodified (no changes to save)"))) (bindings--define-key menu-map [ex] (quote (menu-item "Execute" Buffer-menu-execute :help "Save and/or delete buffers marked with s or k commands"))) (bindings--define-key menu-map [s4] menu-bar-separator) (bindings--define-key menu-map [delb] (quote (menu-item "Mark for Delete and Move Backwards" Buffer-menu-delete-backwards :help "Mark buffer on this line to be deleted by x command and move up one line"))) (bindings--define-key menu-map [del] (quote (menu-item "Mark for Delete" Buffer-menu-delete :help "Mark buffer on this line to be deleted by x command"))) (bindings--define-key menu-map [sv] (quote (menu-item "Mark for Save" Buffer-menu-save :help "Mark buffer on this line to be saved by x command"))) (bindings--define-key menu-map [umk] (quote (menu-item "Unmark" Buffer-menu-unmark :help "Cancel all requested operations on buffer on this line and move down"))) (bindings--define-key menu-map [mk] (quote (menu-item "Mark" Buffer-menu-mark :help "Mark buffer on this line for being displayed by v command"))) map)) nil [3268 8416])
            ("define-obsolete-variable-alias" code nil nil [8418 8505])
            ("define-derived-mode" code nil nil [8507 10959])
            ("buffer-menu" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [10961 11910])
            ("buffer-menu-other-window" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [11912 12412])
            ("list-buffers" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [12429 12867])
            ("Buffer-menu-toggle-files-only" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [12869 13381])
            ("defalias" code nil nil [13383 13432])
            ("Buffer-menu-buffer" function (:arguments ("error-if-non-existent-p")) nil [13436 13950])
            ("Buffer-menu-no-header" function nil nil [13952 14124])
            ("Buffer-menu-beginning" function nil nil [14126 14242])
            ("Buffer-menu-mark" function (:user-visible-flag t) nil [14295 14533])
            ("Buffer-menu-unmark" function
               (:user-visible-flag t
                :arguments ("backup"))
                nil [14535 14778])
            ("Buffer-menu-backup-unmark" function (:user-visible-flag t) nil [14780 14960])
            ("Buffer-menu-delete" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [14962 15626])
            ("Buffer-menu-delete-backwards" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [15628 15952])
            ("Buffer-menu-save" function (:user-visible-flag t) nil [15954 16227])
            ("Buffer-menu-not-modified" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [16229 16573])
            ("Buffer-menu-execute" function (:user-visible-flag t) nil [16575 17548])
            ("Buffer-menu-select" function (:user-visible-flag t) nil [17550 18345])
            ("Buffer-menu-marked-buffers" function (:arguments ("unmark")) nil [18347 18774])
            ("Buffer-menu-isearch-buffers" function (:user-visible-flag t) nil [18776 18951])
            ("Buffer-menu-isearch-buffers-regexp" function (:user-visible-flag t) nil [18953 19142])
            ("Buffer-menu-visit-tags-table" function (:user-visible-flag t) nil [19146 19422])
            ("Buffer-menu-1-window" function (:user-visible-flag t) nil [19424 19624])
            ("Buffer-menu-this-window" function (:user-visible-flag t) nil [19626 19766])
            ("Buffer-menu-other-window" function (:user-visible-flag t) nil [19768 19952])
            ("Buffer-menu-switch-other-window" function (:user-visible-flag t) nil [19954 20146])
            ("Buffer-menu-2-window" function (:user-visible-flag t) nil [20148 20459])
            ("Buffer-menu-toggle-read-only" function (:user-visible-flag t) nil [20461 20828])
            ("Buffer-menu-bury" function (:user-visible-flag t) nil [20830 21312])
            ("Buffer-menu-view" function (:user-visible-flag t) nil [21314 21438])
            ("Buffer-menu-view-other-window" function (:user-visible-flag t) nil [21440 21608])
            ("list-buffers-noselect" function (:arguments ("files-only" "buffer-list")) nil [21673 22339])
            ("Buffer-menu-mouse-select" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [22341 22781])
            ("list-buffers--refresh" function (:arguments ("buffer-list" "old-buffer")) nil [22783 24548])
            ("tabulated-list-entry-size->" function (:arguments ("entry1" "entry2")) nil [24550 24696])
            ("Buffer-menu--pretty-name" function (:arguments ("name")) nil [24698 24830])
            ("Buffer-menu--pretty-file-name" function (:arguments ("file")) nil [24832 25113])
            ("Buffer-menu-info-node-description" function (:arguments ("file")) nil [25115 25455]))          
    :file "buff-menu.el"
    :pointmax 25484
    :fsize 25483
    :lastmodtime '(20806 7939 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "replace.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("case-replace" variable (:default-value t) nil [1000 1134])
            ("replace-lax-whitespace" variable nil nil [1136 1443])
            ("replace-regexp-lax-whitespace" variable nil nil [1445 1766])
            ("query-replace-history" variable nil nil [1768 1938])
            ("query-replace-defaults" variable nil nil [1940 2128])
            ("query-replace-interactive" variable nil nil [2130 2271])
            ("make-obsolete-variable" code nil nil [2272 2520])
            ("query-replace-from-history-variable" variable (:default-value (quote query-replace-history)) nil [2522 2868])
            ("query-replace-to-history-variable" variable (:default-value (quote query-replace-history)) nil [2870 3205])
            ("query-replace-skip-read-only" variable nil nil [3207 3377])
            ("query-replace-show-replacement" variable (:default-value t) nil [3379 3541])
            ("query-replace-highlight" variable (:default-value t) nil [3543 3681])
            ("query-replace-lazy-highlight" variable (:default-value t) nil [3683 4052])
            ("query-replace" variable
               (:default-value (quote ((t (:inherit isearch))))
                :type "face")
                nil [4054 4195])
            ("replace-count" variable nil nil [4197 4315])
            ("query-replace-descr" function (:arguments ("string")) nil [4317 4408])
            ("query-replace-read-from" function (:arguments ("prompt" "regexp-flag")) nil [4410 6173])
            ("query-replace-compile-replacement" function (:arguments ("to" "regexp-flag")) nil [6175 7523])
            ("query-replace-read-to" function (:arguments ("from" "prompt" "regexp-flag")) nil [7526 8047])
            ("query-replace-read-args" function (:arguments ("prompt" "regexp-flag" "noerror")) nil [8049 8393])
            ("query-replace" function
               (:user-visible-flag t
                :arguments ("from-string" "to-string" "delimited" "start" "end"))
                nil [8395 10601])
            ("define-key" code nil nil [10603 10642])
            ("query-replace-regexp" function
               (:user-visible-flag t
                :arguments ("regexp" "to-string" "delimited" "start" "end"))
                nil [10644 13833])
            ("define-key" code nil nil [13835 13885])
            ("query-replace-regexp-eval" function (:arguments ("regexp" "to-expr" "delimited" "start" "end")) nil [13887 16996])
            ("map-query-replace-regexp" function
               (:user-visible-flag t
                :arguments ("regexp" "to-strings" "n" "start" "end"))
                nil [16998 19013])
            ("replace-string" function
               (:user-visible-flag t
                :arguments ("from-string" "to-string" "delimited" "start" "end"))
                nil [19015 20912])
            ("replace-regexp" function
               (:user-visible-flag t
                :arguments ("regexp" "to-string" "delimited" "start" "end"))
                nil [20914 23686])
            ("regexp-history" variable nil nil [23690 23878])
            ("occur-collect-regexp-history" variable (:default-value (quote ("\\1"))) nil [23880 23978])
            ("read-regexp" function (:arguments ("prompt" "defaults" "history")) nil [23980 25581])
            ("defalias" code nil nil [25584 25633])
            ("defalias" code nil nil [25634 25680])
            ("defalias" code nil nil [25681 25716])
            ("keep-lines-read-args" function (:arguments ("prompt")) nil [25719 25905])
            ("keep-lines" function
               (:user-visible-flag t
                :arguments ("regexp" "rstart" "rend" "interactive"))
                nil [25907 28621])
            ("flush-lines" function
               (:user-visible-flag t
                :arguments ("regexp" "rstart" "rend" "interactive"))
                nil [28624 30689])
            ("how-many" function
               (:user-visible-flag t
                :arguments ("regexp" "rstart" "rend" "interactive"))
                nil [30692 32400])
            ("occur-menu-map" variable (:default-value (let ((map (make-sparse-keymap))) (bindings--define-key map [next-error-follow-minor-mode] (quote (menu-item "Auto Occurrence Display" next-error-follow-minor-mode :help "Display another occurrence when moving the cursor" :button (:toggle and (boundp (quote next-error-follow-minor-mode)) next-error-follow-minor-mode)))) (bindings--define-key map [separator-1] menu-bar-separator) (bindings--define-key map [kill-this-buffer] (quote (menu-item "Kill Occur Buffer" kill-this-buffer :help "Kill the current *Occur* buffer"))) (bindings--define-key map [quit-window] (quote (menu-item "Quit Occur Window" quit-window :help "Quit the current *Occur* buffer.  Bury it, and maybe delete the selected frame"))) (bindings--define-key map [revert-buffer] (quote (menu-item "Revert Occur Buffer" revert-buffer :help "Replace the text in the *Occur* buffer with the results of rerunning occur"))) (bindings--define-key map [clone-buffer] (quote (menu-item "Clone Occur Buffer" clone-buffer :help "Create and return a twin copy of the current *Occur* buffer"))) (bindings--define-key map [occur-rename-buffer] (quote (menu-item "Rename Occur Buffer" occur-rename-buffer :help "Rename the current *Occur* buffer to *Occur: original-buffer-name*."))) (bindings--define-key map [occur-edit-buffer] (quote (menu-item "Edit Occur Buffer" occur-edit-mode :help "Edit the *Occur* buffer and apply changes to the original buffers."))) (bindings--define-key map [separator-2] menu-bar-separator) (bindings--define-key map [occur-mode-goto-occurrence-other-window] (quote (menu-item "Go To Occurrence Other Window" occur-mode-goto-occurrence-other-window :help "Go to the occurrence the current line describes, in another window"))) (bindings--define-key map [occur-mode-goto-occurrence] (quote (menu-item "Go To Occurrence" occur-mode-goto-occurrence :help "Go to the occurrence the current line describes"))) (bindings--define-key map [occur-mode-display-occurrence] (quote (menu-item "Display Occurrence" occur-mode-display-occurrence :help "Display in another window the occurrence the current line describes"))) (bindings--define-key map [occur-next] (quote (menu-item "Move to Next Match" occur-next :help "Move to the Nth (default 1) next match in an Occur mode buffer"))) (bindings--define-key map [occur-prev] (quote (menu-item "Move to Previous Match" occur-prev :help "Move to the Nth (default 1) previous match in an Occur mode buffer"))) map)) nil [32404 35006])
            ("occur-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mouse-2] (quote occur-mode-mouse-goto)) (define-key map "" (quote occur-mode-goto-occurrence)) (define-key map "e" (quote occur-edit-mode)) (define-key map "" (quote occur-mode-goto-occurrence)) (define-key map "o" (quote occur-mode-goto-occurrence-other-window)) (define-key map "" (quote occur-mode-display-occurrence)) (define-key map "\356" (quote occur-next)) (define-key map "\360" (quote occur-prev)) (define-key map "r" (quote occur-rename-buffer)) (define-key map "c" (quote clone-buffer)) (define-key map "" (quote next-error-follow-minor-mode)) (bindings--define-key map [menu-bar occur] (cons "Occur" occur-menu-map)) map)) nil [35008 35825])
            ("occur-revert-arguments" variable nil nil [35827 35958])
            ("make-variable-buffer-local" code nil nil [35959 36011])
            ("put" code nil nil [36012 36060])
            ("occur-mode-hook" variable (:default-value (quote (turn-on-font-lock))) nil [36062 36182])
            ("occur-hook" variable nil nil [36184 36293])
            ("occur-mode-find-occurrence-hook" variable nil nil [36295 36587])
            ("put" code nil nil [36589 36627])
            ("define-derived-mode" code nil nil [36628 37092])
            ("occur-edit-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map text-mode-map) (define-key map [mouse-2] (quote occur-mode-mouse-goto)) (define-key map "" (quote occur-cease-edit)) (define-key map "" (quote occur-mode-display-occurrence)) (define-key map "" (quote next-error-follow-minor-mode)) (bindings--define-key map [menu-bar occur] (cons "Occur" occur-menu-map)) map)) nil [37117 37569])
            ("define-derived-mode" code nil nil [37571 38032])
            ("occur-cease-edit" function (:user-visible-flag t) nil [38034 38225])
            ("occur-after-change-function" function (:arguments ("beg" "end" "length")) nil [38227 39729])
            ("occur-revert-function" function (:arguments ("_ignore1" "_ignore2")) nil [39733 39905])
            ("occur-mode-find-occurrence" function nil nil [39907 40173])
            ("defalias" code nil nil [40175 40236])
            ("occur-mode-goto-occurrence" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [40237 40985])
            ("occur-mode-goto-occurrence-other-window" function (:user-visible-flag t) nil [40987 41295])
            ("occur-mode-display-occurrence" function (:user-visible-flag t) nil [41297 41723])
            ("occur-find-match" function (:arguments ("n" "search" "message")) nil [41725 42076])
            ("occur-next" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [42078 42269])
            ("occur-prev" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [42271 42473])
            ("occur-next-error" function
               (:user-visible-flag t
                :arguments ("argp" "reset"))
                nil [42475 43466])
            ("match" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) :background "yellow1") (((class color) (min-colors 88) (background dark)) :background "RoyalBlue3") (((class color) (min-colors 8) (background light)) :background "yellow" :foreground "black") (((class color) (min-colors 8) (background dark)) :background "blue" :foreground "white") (((type tty) (class mono)) :inverse-video t) (t :background "gray")))
                :type "face")
                nil [43469 44022])
            ("list-matching-lines-default-context-lines" variable nil nil [44024 44341])
            ("defalias" code nil nil [44343 44381])
            ("list-matching-lines-face" variable (:default-value (quote match)) nil [44383 44601])
            ("list-matching-lines-buffer-name-face" variable (:default-value (quote underline)) nil [44603 44831])
            ("occur-excluded-properties" variable (:default-value (quote (read-only invisible intangible field mouse-face help-echo local-map keymap yank-handler follow-link))) nil [44833 45251])
            ("occur-read-primary-args" function nil nil [45253 46124])
            ("occur-rename-buffer" function
               (:user-visible-flag t
                :arguments ("unique-p" "interactive-p"))
                nil [46126 47013])
            ("occur" function
               (:user-visible-flag t
                :arguments ("regexp" "nlines"))
                nil [47015 48399])
            ("ido-ignore-item-temp-list" variable nil nil [48401 48435])
            ("multi-occur" function
               (:user-visible-flag t
                :arguments ("bufs" "regexp" "nlines"))
                nil [48437 49356])
            ("multi-occur-in-matching-buffers" function
               (:user-visible-flag t
                :arguments ("bufregexp" "regexp" "allbufs"))
                nil [49358 50311])
            ("occur-1" function (:arguments ("regexp" "nlines" "bufs" "buf-name")) nil [50313 53245])
            ("occur-engine" function (:arguments ("regexp" "buffers" "out-buf" "nlines" "case-fold" "title-face" "prefix-face" "match-face" "keep-props")) nil [53247 59207])
            ("occur-engine-line" function (:arguments ("beg" "end" "keep-props")) nil [59209 59699])
            ("occur-engine-add-prefix" function (:arguments ("lines")) nil [59701 59818])
            ("occur-accumulate-lines" function (:arguments ("count" "keep-props" "pt")) nil [59820 60340])
            ("occur-context-lines" function (:arguments ("out-line" "nlines" "keep-props" "begpt" "endpt" "lines" "prev-lines" "prev-after-lines")) nil [60750 62430])
            ("query-replace-help" variable
               (:constant-flag t
                :default-value "Type Space or `y' to replace one match, Delete or `n' to skip to next,
RET or `q' to exit, Period to replace one match and exit,
Comma to replace but not move point immediately,
C-r to enter recursive edit (\\[exit-recursive-edit] to get out again),
C-w to delete match and recursive edit,
C-l to clear the screen, redisplay, and offer same replacement again,
! to replace all remaining matches in this buffer with no more questions,
^ to move point back to previous match,
E to edit the replacement string.
In multi-buffer replacements type `Y' to replace all remaining
matches in all remaining buffers with no more questions,
`N' to skip to the next buffer without replacing remaining matches
in the current buffer.")
                nil [62541 63335])
            ("query-replace-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map " " (quote act)) (define-key map "" (quote skip)) (define-key map [delete] (quote skip)) (define-key map [backspace] (quote skip)) (define-key map "y" (quote act)) (define-key map "n" (quote skip)) (define-key map "Y" (quote act)) (define-key map "N" (quote skip)) (define-key map "e" (quote edit-replacement)) (define-key map "E" (quote edit-replacement)) (define-key map "," (quote act-and-show)) (define-key map "q" (quote exit)) (define-key map "" (quote exit)) (define-key map [return] (quote exit)) (define-key map "." (quote act-and-exit)) (define-key map "" (quote edit)) (define-key map "" (quote delete-and-edit)) (define-key map "" (quote recenter)) (define-key map "!" (quote automatic)) (define-key map "^" (quote backup)) (define-key map "" (quote help)) (define-key map [f1] (quote help)) (define-key map [help] (quote help)) (define-key map "?" (quote help)) (define-key map "" (quote quit)) (define-key map "" (quote quit)) (define-key map "" (quote scroll-up)) (define-key map "\366" (quote scroll-down)) (define-key map [next] (quote scroll-up)) (define-key map [prior] (quote scroll-down)) (define-key map [134217750] (quote scroll-other-window)) (define-key map [M-next] (quote scroll-other-window)) (define-key map [167772182] (quote scroll-other-window-down)) (define-key map [M-prior] (quote scroll-other-window-down)) (define-key map [escape] (quote exit-prefix)) map)) nil [63337 65373])
            ("multi-query-replace-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map query-replace-map) (define-key map "Y" (quote automatic-all)) (define-key map "N" (quote exit-current)) map)) nil [65375 66035])
            ("replace-match-string-symbols" function (:arguments ("n")) nil [66037 67198])
            ("replace-eval-replacement" function (:arguments ("expression" "count")) nil [67200 67414])
            ("replace-quote" function (:arguments ("replacement")) nil [67416 67890])
            ("replace-loop-through-replacements" function (:arguments ("data" "count")) nil [67892 68315])
            ("replace-match-data" function (:arguments ("integers" "reuse" "new")) nil [68317 68720])
            ("replace-match-maybe-edit" function (:arguments ("newtext" "fixedcase" "literal" "noedit" "match-data")) nil [68722 69847])
            ("replace-search-function" variable nil nil [69849 70064])
            ("replace-re-search-function" variable nil nil [70066 70351])
            ("perform-replace" function (:arguments ("from-string" "replacements" "query-flag" "regexp-flag" "delimited-flag" "repeat-count" "map" "start" "end")) nil [70353 84338])
            ("replace-overlay" variable nil nil [84340 84368])
            ("replace-highlight" function (:arguments ("match-beg" "match-end" "range-beg" "range-end" "search-string" "regexp-flag" "delimited-flag" "case-fold-search")) nil [84370 85289])
            ("replace-dehighlight" function nil nil [85291 85523]))          
    :file "replace.el"
    :pointmax 85550
    :fsize 85549
    :lastmodtime '(20806 7945 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "newcomment.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("defalias" code nil nil [2941 2987])
            ("defalias" code nil nil [3003 3053])
            ("defalias" code nil nil [3069 3107])
            ("defalias" code nil nil [3123 3183])
            ("comment" customgroup (:user-visible-flag t) nil [3185 3300])
            ("comment-use-syntax" variable (:default-value (quote undecided)) nil [3387 3715])
            ("comment-fill-column" variable nil nil [3717 3884])
            ("comment-column" variable (:default-value 32) nil [3901 4298])
            ("make-variable-buffer-local" code nil nil [4299 4343])
            ("put" code nil nil [4359 4411])
            ("comment-start" variable nil nil [4428 4528])
            ("put" code nil nil [4544 4603])
            ("comment-start-skip" variable nil nil [4620 4857])
            ("put" code nil nil [4873 4928])
            ("comment-end-skip" variable nil nil [4945 5049])
            ("put" code nil nil [5065 5118])
            ("comment-end" variable (:default-value (purecopy "")) nil [5135 5281])
            ("put" code nil nil [5297 5345])
            ("comment-indent-function" variable (:default-value (quote comment-indent-default)) nil [5362 5718])
            ("comment-insert-comment-function" variable nil nil [5735 5985])
            ("comment-region-function" variable (:default-value (quote comment-region-default)) nil [5987 6338])
            ("uncomment-region-function" variable (:default-value (quote uncomment-region-default)) nil [6340 6699])
            ("block-comment-start" variable nil nil [6717 6749])
            ("block-comment-end" variable nil nil [6750 6780])
            ("comment-quote-nested" variable (:default-value t) nil [6782 6919])
            ("comment-continue" variable nil nil [6921 7396])
            ("comment-add" variable nil nil [7398 7756])
            ("comment-styles" variable
               (:constant-flag t
                :default-value (quote ((plain nil nil nil nil "Start in column 0 (do not indent), as in Emacs-20") (indent-or-triple nil nil nil multi-char "Start in column 0, but only for single-char starters") (indent nil nil nil t "Full comment per line, ends not aligned") (aligned nil t nil t "Full comment per line, ends aligned") (box nil t t t "Full comment per line, ends aligned, + top and bottom") (extra-line t nil t t "One comment for all lines, end on a line by itself") (multi-line t nil nil t "One comment for all lines, end on last commented line") (box-multi t t t t "One comment for all lines, + top and bottom"))))
                nil [7773 9976])
            ("comment-style" variable (:default-value (quote indent)) nil [9993 10419])
            ("comment-padding" variable (:default-value (purecopy " ")) nil [10436 10860])
            ("comment-inline-offset" variable (:default-value 1) nil [10862 11305])
            ("comment-multi-line" variable nil nil [11322 11739])
            ("comment-empty-lines" variable nil nil [11741 12126])
            ("comment-string-strip" function (:arguments ("str" "beforep" "afterp")) nil [12152 12405])
            ("comment-string-reverse" function (:arguments ("s")) nil [12407 12580])
            ("comment-normalize-vars" function (:arguments ("noerror")) nil [12597 15690])
            ("comment-quote-re" function (:arguments ("str" "unp")) nil [15692 15835])
            ("comment-quote-nested" function (:arguments ("cs" "ce" "unp")) nil [15837 16931])
            ("comment-use-global-state" variable nil nil [16960 17315])
            ("comment-search-forward" function (:arguments ("limit" "noerror")) nil [17317 18830])
            ("comment-search-backward" function (:arguments ("limit" "noerror")) nil [18832 19969])
            ("comment-beginning" function nil nil [19971 21131])
            ("comment-forward" function (:arguments ("n")) nil [21133 21636])
            ("comment-enter-backward" function nil nil [21638 23202])
            ("comment-indent-default" function nil nil [23244 23591])
            ("comment-choose-indent" function (:arguments ("indent")) nil [23593 26177])
            ("comment-indent" function
               (:user-visible-flag t
                :arguments ("continue"))
                nil [26194 29160])
            ("comment-set-column" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [29177 30008])
            ("comment-kill" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [30025 30592])
            ("comment-padright" function (:arguments ("str" "n")) nil [30594 32339])
            ("comment-padleft" function (:arguments ("str" "n")) nil [32366 34053])
            ("uncomment-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "arg"))
                nil [34070 34682])
            ("uncomment-region-default" function (:arguments ("beg" "end" "arg")) nil [34684 38582])
            ("comment-make-extra-lines" function (:arguments ("cs" "ce" "ccs" "cce" "min-indent" "max-indent" "block")) nil [38584 40100])
            ("comment-with-narrowing" function (:arguments ("beg" "end" "body")) nil [40102 41158])
            ("comment-add" function (:arguments ("arg")) nil [41160 41559])
            ("comment-region-internal" function (:arguments ("beg" "end" "cs" "ce" "ccs" "cce" "block" "lines" "indent")) nil [41561 44952])
            ("comment-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "arg"))
                nil [44969 45969])
            ("comment-region-default" function (:arguments ("beg" "end" "arg")) nil [45971 48470])
            ("comment-box" function
               (:user-visible-flag t
                :arguments ("beg" "end" "arg"))
                nil [48487 48940])
            ("comment-only-p" function (:arguments ("beg" "end")) nil [48942 49136])
            ("comment-or-uncomment-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "arg"))
                nil [49153 49545])
            ("comment-dwim" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [49562 51187])
            ("comment-auto-fill-only-comments" variable nil nil [51204 51404])
            ("comment-valid-prefix-p" function (:arguments ("prefix" "compos")) nil [51406 53498])
            ("comment-indent-new-line" function
               (:user-visible-flag t
                :arguments ("soft"))
                nil [53516 57402])
            ("newcomment" package nil nil [57404 57425]))          
    :file "newcomment.el"
    :pointmax 57455
    :fsize 57454
    :lastmodtime '(20806 7943 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "register.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("cl-lib" include nil nil [1150 1167])
            ("declare-function" code nil nil [1170 1245])
            ("declare-function" code nil nil [1246 1305])
            ("declare-function" code nil nil [1306 1364])
            ("cl-defstruct" code nil nil [1377 1709])
            ("cl-defun" code nil nil [1711 2332])
            ("register-alist" variable nil nil [2334 3047])
            ("register" customgroup (:user-visible-flag t) nil [3049 3135])
            ("register-separator" variable nil nil [3137 3520])
            ("get-register" function (:arguments ("register")) nil [3522 3662])
            ("set-register" function (:arguments ("register" "value")) nil [3664 3996])
            ("point-to-register" function
               (:user-visible-flag t
                :arguments ("register" "arg"))
                nil [3998 4556])
            ("window-configuration-to-register" function
               (:user-visible-flag t
                :arguments ("register" "_arg"))
                nil [4558 5065])
            ("frame-configuration-to-register" function
               (:user-visible-flag t
                :arguments ("register" "_arg"))
                nil [5067 5562])
            ("defalias" code nil nil [5564 5611])
            ("jump-to-register" function
               (:user-visible-flag t
                :arguments ("register" "delete"))
                nil [5612 7596])
            ("register-swap-out" function nil nil [7598 7951])
            ("number-to-register" function
               (:user-visible-flag t
                :arguments ("number" "register"))
                nil [7953 8525])
            ("increment-register" function
               (:user-visible-flag t
                :arguments ("prefix" "register"))
                nil [8527 9251])
            ("view-register" function
               (:user-visible-flag t
                :arguments ("register"))
                nil [9253 9626])
            ("list-registers" function (:user-visible-flag t) nil [9628 10005])
            ("describe-register-1" function (:arguments ("register" "verbose")) nil [10007 12171])
            ("insert-register" function
               (:user-visible-flag t
                :arguments ("register" "arg"))
                nil [12173 13324])
            ("copy-to-register" function
               (:user-visible-flag t
                :arguments ("register" "start" "end" "delete-flag"))
                nil [13326 13854])
            ("append-to-register" function
               (:user-visible-flag t
                :arguments ("register" "start" "end" "delete-flag"))
                nil [13856 14685])
            ("prepend-to-register" function
               (:user-visible-flag t
                :arguments ("register" "start" "end" "delete-flag"))
                nil [14687 15520])
            ("copy-rectangle-to-register" function
               (:user-visible-flag t
                :arguments ("register" "start" "end" "delete-flag"))
                nil [15522 16278])
            ("register" package nil nil [16281 16300]))          
    :file "register.el"
    :pointmax 16327
    :fsize 16326
    :lastmodtime '(20806 7945 0 0)
    :unmatched-syntax '((close-paren 1167 . 1168) (symbol 1132 . 1149) (open-paren 1131 . 1132))
    )
   (semanticdb-table "rfn-eshadow.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("file-name-shadow-properties-custom-type" variable
               (:constant-flag t
                :default-value (quote (list (checklist :inline t (const :tag "Invisible" :doc "Make shadowed part of filename invisible" :format "%t%n%h" :inline t (invisible t intangible t)) (list :inline t :format "%v" :tag "Face" :doc "Display shadowed part of filename using a different face" (const :format "" face) (face :value file-name-shadow)) (list :inline t :format "%t: %v%h" :tag "Brackets" :doc "    Surround shadowed part of filename with brackets" (const :format "" before-string) (string :format "%v" :size 4 :value "{") (const :format "" after-string) (string :format " and: %v" :value "} ")) (list :inline t :format "%t: %v%n%h" :tag "String" :doc "Display a string instead of the shadowed part of filename" (const :format "" display) (string :format "%v" :size 15 :value "<...ignored...>")) (const :tag "Avoid" :doc "Try to keep cursor out of shadowed part of filename" :format "%t%n%h" :inline t (field shadow))) (repeat :inline t :tag "Other Properties" (list :inline t :format "%v" (symbol :tag "Property") (sexp :tag "Value"))))))
                nil [1459 3318])
            ("file-name-shadow-properties" variable (:default-value (quote (face file-name-shadow field shadow))) nil [3320 3746])
            ("file-name-shadow-tty-properties" variable (:default-value (purecopy (quote (before-string "{" after-string "} " field shadow)))) nil [3748 4207])
            ("file-name-shadow" variable
               (:default-value (quote ((t :inherit shadow)))
                :type "face")
                nil [4209 4356])
            ("rfn-eshadow-setup-minibuffer-hook" variable nil nil [4358 4456])
            ("rfn-eshadow-update-overlay-hook" variable nil nil [4458 4553])
            ("rfn-eshadow-frobbed-minibufs" variable nil nil [4648 4689])
            ("rfn-eshadow-overlay" variable nil nil [4778 4806])
            ("make-variable-buffer-local" code nil nil [4807 4856])
            ("rfn-eshadow-setup-minibuffer" function nil nil [4927 5957])
            ("rfn-eshadow-sifn-equal" function (:arguments ("goal" "pos")) nil [5959 6195])
            ("rfn-eshadow-update-overlay" function nil nil [6236 7987])
            ("define-minor-mode" code nil nil [7990 9461])
            ("rfn-eshadow" package nil nil [9464 9486]))          
    :file "rfn-eshadow.el"
    :pointmax 9517
    :fsize 9516
    :lastmodtime '(20806 7945 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "isearch.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("cl-lib" include nil nil [2476 2493])
            ("isearch" customgroup (:user-visible-flag t) nil [2540 2753])
            ("search-exit-option" variable (:default-value t) nil [2756 2897])
            ("search-slow-window-lines" variable (:default-value 1) nil [2899 3225])
            ("search-slow-speed" variable (:default-value 1200) nil [3227 3473])
            ("search-upper-case" variable (:default-value (quote not-yanks)) nil [3475 3956])
            ("search-nonincremental-instead" variable (:default-value t) nil [3958 4250])
            ("search-whitespace-regexp" variable (:default-value (purecopy "\\s-+")) nil [4252 5234])
            ("search-invisible" variable (:default-value (quote open)) nil [5236 5900])
            ("isearch-hide-immediately" variable (:default-value t) nil [5902 6311])
            ("isearch-resume-in-command-history" variable nil nil [6313 6553])
            ("isearch-mode-hook" variable nil nil [6555 6650])
            ("isearch-update-post-hook" variable nil nil [6652 6760])
            ("isearch-mode-end-hook" variable nil nil [6762 6964])
            ("isearch-mode-end-hook-quit" variable nil nil [6966 7085])
            ("isearch-message-function" variable nil nil [7087 7206])
            ("isearch-wrap-function" variable nil nil [7208 7428])
            ("isearch-push-state-function" variable nil nil [7430 7572])
            ("isearch-filter-predicate" variable (:default-value (quote isearch-filter-visible)) nil [7574 7940])
            ("search-ring" variable nil nil [7959 8020])
            ("regexp-search-ring" variable nil nil [8021 8108])
            ("search-ring-max" variable (:default-value 16) nil [8110 8249])
            ("regexp-search-ring-max" variable (:default-value 16) nil [8250 8403])
            ("search-ring-yank-pointer" variable nil nil [8405 8515])
            ("regexp-search-ring-yank-pointer" variable nil nil [8516 8640])
            ("search-ring-update" variable nil nil [8642 8841])
            ("search-highlight" variable (:default-value t) nil [8881 9013])
            ("isearch" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) (:background "magenta3" :foreground "lightskyblue1")) (((class color) (min-colors 88) (background dark)) (:background "palevioletred2" :foreground "brown4")) (((class color) (min-colors 16)) (:background "magenta4" :foreground "cyan1")) (((class color) (min-colors 8)) (:background "magenta4" :foreground "cyan1")) (t (:inverse-video t))))
                :type "face")
                nil [9015 9669])
            ("isearch-face" variable (:default-value (quote isearch)) nil [9670 9700])
            ("isearch-fail" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) (:background "RosyBrown1")) (((class color) (min-colors 88) (background dark)) (:background "red4")) (((class color) (min-colors 16)) (:background "red")) (((class color) (min-colors 8)) (:background "red")) (((class color grayscale)) :foreground "grey") (t (:inverse-video t))))
                :type "face")
                nil [9702 10208])
            ("isearch-lazy-highlight" variable (:default-value t) nil [10210 10530])
            ("lazy-highlight" customgroup (:user-visible-flag t) nil [10567 10731])
            ("define-obsolete-variable-alias" code nil nil [10733 10892])
            ("lazy-highlight-cleanup" variable (:default-value t) nil [10894 11134])
            ("define-obsolete-variable-alias" code nil nil [11136 11307])
            ("lazy-highlight-initial-delay" variable (:default-value 0.25) nil [11309 11465])
            ("define-obsolete-variable-alias" code nil nil [11467 11628])
            ("lazy-highlight-interval" variable nil nil [11630 11777])
            ("define-obsolete-variable-alias" code nil nil [11779 11950])
            ("lazy-highlight-max-at-a-time" variable (:default-value 20) nil [11952 12308])
            ("lazy-highlight" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) (:background "paleturquoise")) (((class color) (min-colors 88) (background dark)) (:background "paleturquoise4")) (((class color) (min-colors 16)) (:background "turquoise3")) (((class color) (min-colors 8)) (:background "turquoise3")) (t (:underline t))))
                :type "face")
                nil [12310 12798])
            ("define-obsolete-face-alias" code nil nil [12799 12879])
            ("define-obsolete-variable-alias" code nil nil [12880 13033])
            ("lazy-highlight-face" variable (:default-value (quote lazy-highlight)) nil [13034 13078])
            ("isearch-help-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [t] (quote isearch-other-control-char)) (define-key map (char-to-string help-char) (quote isearch-help-for-help)) (define-key map [help] (quote isearch-help-for-help)) (define-key map [f1] (quote isearch-help-for-help)) (define-key map "?" (quote isearch-help-for-help)) (define-key map "b" (quote isearch-describe-bindings)) (define-key map "k" (quote isearch-describe-key)) (define-key map "m" (quote isearch-describe-mode)) (define-key map "q" (quote help-quit)) map)) nil [13110 13702])
            ("help-macro" include nil nil [13723 13744])
            ("make-help-screen" code nil nil [13747 14348])
            ("isearch-help-for-help" function (:user-visible-flag t) nil [14350 14540])
            ("isearch-describe-bindings" function (:user-visible-flag t) nil [14542 14961])
            ("isearch-describe-key" function (:user-visible-flag t) nil [14963 15189])
            ("isearch-describe-mode" function (:user-visible-flag t) nil [15191 15397])
            ("defalias" code nil nil [15399 15451])
            ("isearch-mode-map" variable (:default-value (let ((i 0) (map (make-keymap))) (or (char-table-p (nth 1 map)) (error "The initialization of isearch-mode-map must be updated")) (set-char-table-range (nth 1 map) (cons 256 (max-char)) (quote isearch-printing-char)) (define-key map [t] (quote isearch-other-control-char)) (setq i 32) (while (< i 256) (define-key map (vector i) (quote isearch-printing-char)) (setq i (1+ i))) (let ((meta-map (make-sparse-keymap))) (define-key map (char-to-string meta-prefix-char) meta-map) (define-key map [escape] meta-map) (define-key meta-map [t] (quote isearch-other-meta-char))) (define-key map "" (quote isearch-repeat-forward)) (define-key map "" (quote isearch-repeat-backward)) (define-key map "\223" (quote isearch-repeat-forward)) (define-key map "\222" (quote isearch-repeat-backward)) (define-key map "" (quote isearch-delete-char)) (define-key map "" (quote isearch-abort)) (or (= 27 meta-prefix-char) (error "Inconsistency in isearch.el")) (define-key map "" (quote isearch-cancel)) (define-key map [escape escape escape] (quote isearch-cancel)) (define-key map "" (quote isearch-quote-char)) (define-key map "" (quote isearch-exit)) (define-key map "
" (quote isearch-printing-char)) (define-key map "	" (quote isearch-printing-char)) (define-key map [33554464] (quote isearch-printing-char)) (define-key map "" (quote isearch-yank-word-or-char)) (define-key map "\227" (quote isearch-del-char)) (define-key map "\231" (quote isearch-yank-char)) (define-key map "" (quote isearch-yank-kill)) (define-key map "\363" (quote isearch-yank-line)) (define-key map (char-to-string help-char) isearch-help-map) (define-key map [help] isearch-help-map) (define-key map [f1] isearch-help-map) (define-key map "\356" (quote isearch-ring-advance)) (define-key map "\360" (quote isearch-ring-retreat)) (define-key map "\371" (quote isearch-yank-pop)) (define-key map "\211" (quote isearch-complete)) (define-key map [switch-frame] nil) (define-key map [delete-frame] nil) (define-key map [iconify-frame] nil) (define-key map [make-frame-visible] nil) (define-key map [mouse-movement] nil) (define-key map [language-change] nil) (define-key map "" (quote isearch-toggle-input-method)) (define-key map "" (quote isearch-toggle-specified-input-method)) (define-key map [mouse-2] (function isearch-mouse-2)) (define-key map [down-mouse-2] nil) (define-key map "\343" (quote isearch-toggle-case-fold)) (define-key map "\362" (quote isearch-toggle-regexp)) (define-key map "\345" (quote isearch-edit-string)) (define-key map "\363c" (quote isearch-toggle-case-fold)) (define-key map "\363r" (quote isearch-toggle-regexp)) (define-key map "\363w" (quote isearch-toggle-word)) (define-key map "\363_" (quote isearch-toggle-symbol)) (define-key map "\363 " (quote isearch-toggle-lax-whitespace)) (define-key map [134217765] (quote isearch-query-replace)) (define-key map [201326629] (quote isearch-query-replace-regexp)) (define-key map "\363o" (quote isearch-occur)) (define-key map "\363hr" (quote isearch-highlight-regexp)) (define-key map "" nil) (define-key map [24 t] (quote isearch-other-control-char)) (define-key map "8" nil) (define-key map "8" (quote isearch-other-control-char)) map)) nil [15487 20201])
            ("minibuffer-local-isearch-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "" (quote isearch-nonincremental-exit-minibuffer)) (define-key map "\211" (quote isearch-complete-edit)) (define-key map "" (quote isearch-forward-exit-minibuffer)) (define-key map "" (quote isearch-reverse-exit-minibuffer)) (define-key map "" (quote isearch-yank-char-in-minibuffer)) (define-key map [right] (quote isearch-yank-char-in-minibuffer)) map)) nil [20203 20761])
            ("isearch-forward" variable nil nil [20925 20953])
            ("isearch-regexp" variable nil nil [20992 21019])
            ("isearch-word" variable nil nil [21046 21460])
            ("isearch-lax-whitespace" variable (:default-value t) nil [21462 21899])
            ("isearch-regexp-lax-whitespace" variable nil nil [21901 22345])
            ("isearch-cmds" variable nil nil [22347 22560])
            ("isearch-string" variable nil nil [22562 22588])
            ("isearch-message" variable nil nil [22619 22646])
            ("isearch-message-prefix-add" variable nil nil [22698 22737])
            ("isearch-message-suffix-add" variable nil nil [22779 22818])
            ("isearch-success" variable (:default-value t) nil [22861 22887])
            ("isearch-error" variable nil nil [22925 22951])
            ("isearch-other-end" variable nil nil [22987 23017])
            ("isearch-wrapped" variable nil nil [23064 23092])
            ("isearch-barrier" variable nil nil [23138 23223])
            ("isearch-just-started" variable nil nil [23224 23257])
            ("isearch-start-hscroll" variable nil nil [23258 23290])
            ("isearch-case-fold-search" variable nil nil [23481 23518])
            ("isearch-last-case-fold-search" variable nil nil [23520 23562])
            ("isearch-original-minibuffer-message-timeout" variable nil nil [23618 23674])
            ("isearch-adjusted" variable nil nil [23676 23705])
            ("isearch-slow-terminal-mode" variable nil nil [23706 23745])
            ("isearch-small-window" variable nil nil [23777 23810])
            ("isearch-opoint" variable nil nil [23811 23836])
            ("isearch-window-configuration" variable nil nil [23904 23945])
            ("isearch-yank-flag" variable nil nil [24010 24040])
            ("isearch-op-fun" variable nil nil [24234 24261])
            ("isearch-recursive-edit" variable nil nil [24324 24359])
            ("isearch-nonincremental" variable nil nil [24417 24452])
            ("isearch-new-forward" variable nil nil [24513 24545])
            ("isearch-opened-overlays" variable nil nil [24604 24640])
            ("isearch-hidden" variable nil nil [24692 24719])
            ("isearch-input-method-function" variable nil nil [24784 24826])
            ("isearch-input-method-local-p" variable nil nil [24916 24957])
            ("or" code nil nil [25088 25199])
            ("isearch-mode" variable nil nil [25201 25226])
            ("make-variable-buffer-local" code nil nil [25266 25308])
            ("define-key" code nil nil [25310 25357])
            ("define-key" code nil nil [25358 25409])
            ("define-key" code nil nil [25410 25458])
            ("define-key" code nil nil [25459 25511])
            ("define-key" code nil nil [25512 25561])
            ("define-key" code nil nil [25562 25613])
            ("isearch-forward" function
               (:user-visible-flag t
                :arguments ("regexp-p" "no-recursive-edit"))
                nil [25649 29632])
            ("isearch-forward-regexp" function
               (:user-visible-flag t
                :arguments ("not-regexp" "no-recursive-edit"))
                nil [29634 30307])
            ("isearch-forward-word" function
               (:user-visible-flag t
                :arguments ("not-word" "no-recursive-edit"))
                nil [30309 30778])
            ("isearch-forward-symbol" function
               (:user-visible-flag t
                :arguments ("not-symbol" "no-recursive-edit"))
                nil [30780 31228])
            ("isearch-backward" function
               (:user-visible-flag t
                :arguments ("regexp-p" "no-recursive-edit"))
                nil [31230 31543])
            ("isearch-backward-regexp" function
               (:user-visible-flag t
                :arguments ("not-regexp" "no-recursive-edit"))
                nil [31545 31963])
            ("isearch-mode" function (:arguments ("forward" "regexp" "op-fun" "recursive-edit" "word")) nil [32301 35189])
            ("isearch-update" function nil nil [35238 37542])
            ("isearch-done" function (:arguments ("nopush" "edit")) nil [37544 40539])
            ("isearch-update-ring" function (:arguments ("string" "regexp")) nil [40541 40828])
            ("cl-defstruct" code nil nil [41219 42289])
            ("isearch--set-state" function (:arguments ("cmd")) nil [42291 42939])
            ("isearch-pop-state" function nil nil [42941 43052])
            ("isearch-push-state" function nil nil [43054 43126])
            ("isearch-exit" function (:user-visible-flag t) nil [43190 43622])
            ("minibuffer-history-symbol" variable nil nil [43624 43658])
            ("isearch-fail-pos" function (:arguments ("msg")) nil [43695 44452])
            ("isearch-edit-string" function (:user-visible-flag t) nil [44454 51165])
            ("isearch-nonincremental-exit-minibuffer" function nil nil [51167 51286])
            ("isearch-forward-exit-minibuffer" function nil nil [51288 51397])
            ("isearch-reverse-exit-minibuffer" function nil nil [51399 51510])
            ("isearch-cancel" function (:user-visible-flag t) nil [51512 52028])
            ("isearch-abort" function (:user-visible-flag t) nil [52077 52828])
            ("isearch-repeat" function (:arguments ("direction")) nil [52830 54622])
            ("isearch-repeat-forward" function (:user-visible-flag t) nil [54624 54741])
            ("isearch-repeat-backward" function (:user-visible-flag t) nil [54743 54863])
            ("isearch-toggle-regexp" function (:user-visible-flag t) nil [54865 55149])
            ("isearch-toggle-word" function (:user-visible-flag t) nil [55151 55427])
            ("isearch-toggle-symbol" function (:user-visible-flag t) nil [55429 55731])
            ("isearch-toggle-lax-whitespace" function (:user-visible-flag t) nil [55733 56546])
            ("isearch-toggle-case-fold" function (:user-visible-flag t) nil [56548 56996])
            ("word-search-regexp" function (:arguments ("string" "lax")) nil [57016 57688])
            ("word-search-backward" function
               (:user-visible-flag t
                :arguments ("string" "bound" "noerror" "count"))
                nil [57690 58514])
            ("word-search-forward" function
               (:user-visible-flag t
                :arguments ("string" "bound" "noerror" "count"))
                nil [58516 59321])
            ("word-search-backward-lax" function
               (:user-visible-flag t
                :arguments ("string" "bound" "noerror" "count"))
                nil [59323 60266])
            ("word-search-forward-lax" function
               (:user-visible-flag t
                :arguments ("string" "bound" "noerror" "count"))
                nil [60268 61191])
            ("isearch-symbol-regexp" function (:arguments ("string" "lax")) nil [61211 61532])
            ("put" code nil nil [61534 61596])
            ("search-forward-lax-whitespace" function (:arguments ("string" "bound" "noerror" "count")) nil [61629 61901])
            ("search-backward-lax-whitespace" function (:arguments ("string" "bound" "noerror" "count")) nil [61903 62178])
            ("re-search-forward-lax-whitespace" function (:arguments ("regexp" "bound" "noerror" "count")) nil [62180 62440])
            ("re-search-backward-lax-whitespace" function (:arguments ("regexp" "bound" "noerror" "count")) nil [62442 62705])
            ("isearch-query-replace" function
               (:user-visible-flag t
                :arguments ("delimited" "regexp-flag"))
                nil [62709 64821])
            ("isearch-query-replace-regexp" function
               (:user-visible-flag t
                :arguments ("delimited"))
                nil [64823 65095])
            ("isearch-occur" function
               (:user-visible-flag t
                :arguments ("regexp" "nlines"))
                nil [65097 66956])
            ("declare-function" code nil nil [66958 67012])
            ("isearch-highlight-regexp" function (:user-visible-flag t) nil [67014 68349])
            ("isearch-delete-char" function (:user-visible-flag t) nil [68353 68579])
            ("isearch-del-char" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [68581 69228])
            ("isearch-yank-string" function (:arguments ("string")) nil [69230 69712])
            ("isearch-yank-kill" function (:user-visible-flag t) nil [69714 69850])
            ("isearch-yank-pop" function (:user-visible-flag t) nil [69852 70396])
            ("isearch-yank-x-selection" function (:user-visible-flag t) nil [70398 70720])
            ("isearch-mouse-2" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [70723 71300])
            ("isearch-yank-internal" function (:arguments ("jumpform")) nil [71302 71856])
            ("isearch-yank-char-in-minibuffer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [71858 72207])
            ("isearch-yank-char" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [72209 72391])
            ("declare-function" code nil nil [72393 72453])
            ("isearch-yank-word-or-char" function (:user-visible-flag t) nil [72454 72922])
            ("isearch-yank-word" function (:user-visible-flag t) nil [72924 73082])
            ("isearch-yank-line" function (:user-visible-flag t) nil [73084 73299])
            ("isearch-search-and-update" function nil nil [73301 75258])
            ("isearch-backslash" function (:arguments ("str")) nil [75582 75734])
            ("isearch-fallback" function (:arguments ("want-backslash" "allow-invalid" "to-barrier")) nil [75736 78403])
            ("isearch-unread-key-sequence" function (:arguments ("keylist")) nil [78405 79327])
            ("if" code nil nil [80726 80822])
            ("if" code nil nil [80823 80923])
            ("put" code nil nil [81039 81072])
            ("put" code nil nil [81073 81117])
            ("put" code nil nil [81118 81160])
            ("put" code nil nil [81204 81241])
            ("put" code nil nil [81242 81286])
            ("put" code nil nil [81287 81336])
            ("put" code nil nil [81337 81394])
            ("put" code nil nil [81395 81446])
            ("put" code nil nil [81491 81536])
            ("put" code nil nil [81537 81577])
            ("put" code nil nil [81578 81621])
            ("put" code nil nil [81622 81665])
            ("put" code nil nil [81666 81705])
            ("put" code nil nil [81737 81785])
            ("put" code nil nil [81786 81836])
            ("put" code nil nil [81869 81912])
            ("put" code nil nil [81913 81955])
            ("put" code nil nil [81956 81995])
            ("isearch-allow-scroll" variable nil nil [81997 82303])
            ("isearch-string-out-of-window" function (:arguments ("isearch-point")) nil [82305 83502])
            ("isearch-back-into-window" function (:arguments ("above" "isearch-point")) nil [83504 84341])
            ("isearch-reread-key-sequence-naturally" function (:arguments ("keylist")) nil [84343 84620])
            ("isearch-lookup-scroll-key" function (:arguments ("key-seq")) nil [84672 85062])
            ("defalias" code nil nil [85064 85127])
            ("isearch-other-meta-char" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [85129 91243])
            ("isearch-quote-char" function (:user-visible-flag t) nil [91245 91944])
            ("isearch-printing-char" function (:user-visible-flag t) nil [91946 92269])
            ("isearch-process-search-char" function (:arguments ("char")) nil [92271 92882])
            ("isearch-process-search-string" function (:arguments ("string" "message")) nil [92884 93073])
            ("isearch-ring-adjust1" function (:arguments ("advance")) nil [93093 93730])
            ("isearch-ring-adjust" function (:arguments ("advance")) nil [93732 94187])
            ("isearch-ring-advance" function (:user-visible-flag t) nil [94189 94398])
            ("isearch-ring-retreat" function (:user-visible-flag t) nil [94400 94530])
            ("isearch-complete1" function nil nil [94532 95437])
            ("isearch-complete" function (:user-visible-flag t) nil [95439 95890])
            ("isearch-complete-edit" function (:user-visible-flag t) nil [95892 96118])
            ("isearch-message" function (:arguments ("c-q-hack" "ellipsis")) nil [96141 96863])
            ("isearch-message-prefix" function (:arguments ("ellipsis" "nonincremental")) nil [96865 98450])
            ("isearch-message-suffix" function (:arguments ("c-q-hack")) nil [98452 98643])
            ("isearch-search-fun-function" variable (:default-value (quote isearch-search-fun-default)) nil [98661 99101])
            ("isearch-search-fun" function nil nil [99103 99320])
            ("isearch-search-fun-default" function nil nil [99322 100588])
            ("isearch-search-string" function (:arguments ("string" "bound" "noerror")) nil [100590 102321])
            ("isearch-search" function nil nil [102323 104372])
            ("isearch-open-overlay-temporary" function (:arguments ("ov")) nil [104439 105405])
            ("isearch-open-necessary-overlays" function (:arguments ("ov")) nil [105674 106501])
            ("isearch-clean-overlays" function nil nil [106634 106807])
            ("isearch-intersects-p" function (:arguments ("start0" "end0" "start1" "end1")) nil [106810 107118])
            ("isearch-close-unnecessary-overlays" function (:arguments ("begin" "end")) nil [107239 108017])
            ("isearch-range-invisible" function (:arguments ("beg" "end")) nil [108020 110035])
            ("isearch-filter-visible" function (:arguments ("beg" "end")) nil [110037 110405])
            ("isearch-no-upper-case-p" function (:arguments ("string" "regexp-flag")) nil [110431 111636])
            ("isearch-text-char-description" function (:arguments ("c")) nil [111699 111901])
            ("isearch-unread" function (:arguments ("char-or-events")) nil [112010 112180])
            ("isearch-overlay" variable nil nil [112201 112229])
            ("isearch-highlight" function (:arguments ("beg" "end")) nil [112231 112654])
            ("isearch-dehighlight" function nil nil [112656 112748])
            ("isearch-lazy-highlight-overlays" variable nil nil [113958 114002])
            ("isearch-lazy-highlight-wrapped" variable nil nil [114003 114046])
            ("isearch-lazy-highlight-start-limit" variable nil nil [114047 114094])
            ("isearch-lazy-highlight-end-limit" variable nil nil [114095 114140])
            ("isearch-lazy-highlight-start" variable nil nil [114141 114182])
            ("isearch-lazy-highlight-end" variable nil nil [114183 114222])
            ("isearch-lazy-highlight-timer" variable nil nil [114223 114264])
            ("isearch-lazy-highlight-last-string" variable nil nil [114265 114312])
            ("isearch-lazy-highlight-window" variable nil nil [114313 114355])
            ("isearch-lazy-highlight-window-start" variable nil nil [114356 114404])
            ("isearch-lazy-highlight-window-end" variable nil nil [114405 114451])
            ("isearch-lazy-highlight-case-fold-search" variable nil nil [114452 114504])
            ("isearch-lazy-highlight-regexp" variable nil nil [114505 114547])
            ("isearch-lazy-highlight-lax-whitespace" variable nil nil [114548 114598])
            ("isearch-lazy-highlight-regexp-lax-whitespace" variable nil nil [114599 114656])
            ("isearch-lazy-highlight-word" variable nil nil [114657 114697])
            ("isearch-lazy-highlight-forward" variable nil nil [114698 114741])
            ("isearch-lazy-highlight-error" variable nil nil [114742 114783])
            ("lazy-highlight-cleanup" function
               (:user-visible-flag t
                :arguments ("force"))
                nil [114785 115485])
            ("define-obsolete-function-alias" code nil nil [115487 115646])
            ("isearch-lazy-highlight-new-loop" function (:arguments ("beg" "end")) nil [115648 118960])
            ("isearch-lazy-highlight-search" function nil nil [118962 120509])
            ("isearch-lazy-highlight-update" function nil nil [120511 123069])
            ("isearch-resume" function (:arguments ("string" "regexp" "word" "forward" "message" "case-fold")) nil [123071 123666]))          
    :file "isearch.el"
    :pointmax 123693
    :fsize 123692
    :lastmodtime '(20806 7942 0 0)
    :unmatched-syntax '((close-paren 13744 . 13745) (symbol 13705 . 13722) (open-paren 13704 . 13705) (close-paren 2493 . 2494) (symbol 2458 . 2475) (open-paren 2457 . 2458))
    )
   (semanticdb-table "help-macro.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("backquote" include nil nil [2811 2831])
            ("three-step-help" variable nil nil [3118 3482])
            ("make-help-screen" function (:arguments ("fname" "help-line" "help-text" "helped-map")) nil [3484 8235])
            ("help-macro" package nil nil [8237 8258]))          
    :file "help-macro.el"
    :pointmax 8288
    :fsize 8287
    :lastmodtime '(20806 7942 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jit-lock.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("with-buffer-prepared-for-jit-lock" function (:arguments ("body")) nil [982 1289])
            ("jit-lock" customgroup (:user-visible-flag t) nil [1313 1426])
            ("jit-lock-chunk-size" variable (:default-value 500) nil [1428 1641])
            ("jit-lock-stealth-time" variable nil nil [1644 2035])
            ("jit-lock-stealth-nice" variable (:default-value 0.5) nil [2038 2620])
            ("jit-lock-stealth-load" variable (:default-value (if (condition-case nil (load-average) (error)) 200)) nil [2623 3431])
            ("jit-lock-stealth-verbose" variable nil nil [3434 3583])
            ("defvaralias" code nil nil [3586 3651])
            ("jit-lock-contextually" variable (:default-value (quote syntax-driven)) nil [3652 4627])
            ("jit-lock-context-time" variable (:default-value 0.5) nil [4629 4793])
            ("jit-lock-defer-time" variable nil nil [4795 5041])
            ("jit-lock-mode" variable nil nil [5086 5164])
            ("make-variable-buffer-local" code nil nil [5165 5208])
            ("jit-lock-functions" variable nil nil [5210 5367])
            ("make-variable-buffer-local" code nil nil [5368 5416])
            ("jit-lock-context-unfontify-pos" variable nil nil [5418 5574])
            ("make-variable-buffer-local" code nil nil [5575 5635])
            ("jit-lock-stealth-timer" variable nil nil [5638 5736])
            ("jit-lock-stealth-repeat-timer" variable nil nil [5737 5851])
            ("jit-lock-context-timer" variable nil nil [5852 5950])
            ("jit-lock-defer-timer" variable nil nil [5951 6048])
            ("jit-lock-defer-buffers" variable nil nil [6050 6142])
            ("jit-lock-stealth-buffers" variable nil nil [6143 6237])
            ("jit-lock-mode" function (:arguments ("arg")) nil [6259 10150])
            ("jit-lock-register" function (:arguments ("fun" "contextual")) nil [10152 10630])
            ("jit-lock-unregister" function (:arguments ("fun")) nil [10632 10841])
            ("jit-lock-refontify" function (:arguments ("beg" "end")) nil [11091 11368])
            ("jit-lock-function" function (:arguments ("start")) nil [11401 12258])
            ("jit-lock-fontify-now" function (:arguments ("start" "end")) nil [12260 16054])
            ("jit-lock-force-redisplay" function (:arguments ("buf" "start" "end")) nil [16056 16427])
            ("jit-lock-stealth-chunk-start" function (:arguments ("around")) nil [16460 18024])
            ("jit-lock-stealth-fontify" function (:arguments ("repeat")) nil [18026 20159])
            ("jit-lock-deferred-fontify" function nil nil [20192 21109])
            ("jit-lock-context-fontify" function nil nil [21112 22423])
            ("jit-lock-start" variable nil nil [22425 22448])
            ("jit-lock-end" variable nil nil [22449 22470])
            ("jit-lock-after-change-extend-region-functions" variable nil nil [22503 23175])
            ("jit-lock-after-change" function (:arguments ("start" "end" "old-len")) nil [23177 24737])
            ("jit-lock" package nil nil [24739 24758]))          
    :file "jit-lock.el"
    :pointmax 24786
    :fsize 24785
    :lastmodtime '(20806 7942 0 0)
    :unmatched-syntax '((close-paren 1289 . 1290) (symbol 962 . 979) (open-paren 961 . 962))
    )
   (semanticdb-table "font-lock.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("syntax" include nil nil [10464 10481])
            ("cl-lib" include nil nil [10501 10518])
            ("font-lock" customgroup
               (:user-visible-flag t
                :value (quote ((jit-lock custom-group))))
                nil [10555 10797])
            ("font-lock-faces" customgroup (:user-visible-flag t) nil [10799 10905])
            ("font-lock-extra-types" customgroup (:user-visible-flag t) nil [10907 11029])
            ("font-lock-maximum-size" variable (:default-value 256000) nil [11052 12108])
            ("make-obsolete-variable" code nil nil [12109 12168])
            ("font-lock-maximum-decoration" variable (:default-value t) nil [12170 13300])
            ("font-lock-verbose" variable nil nil [13302 13615])
            ("font-lock-comment-face" variable (:default-value (quote font-lock-comment-face)) nil [14289 14380])
            ("font-lock-comment-delimiter-face" variable (:default-value (quote font-lock-comment-delimiter-face)) nil [14382 14502])
            ("font-lock-string-face" variable (:default-value (quote font-lock-string-face)) nil [14504 14592])
            ("font-lock-doc-face" variable (:default-value (quote font-lock-doc-face)) nil [14594 14682])
            ("font-lock-keyword-face" variable (:default-value (quote font-lock-keyword-face)) nil [14684 14775])
            ("font-lock-builtin-face" variable (:default-value (quote font-lock-builtin-face)) nil [14777 14868])
            ("font-lock-function-name-face" variable (:default-value (quote font-lock-function-name-face)) nil [14870 14978])
            ("font-lock-variable-name-face" variable (:default-value (quote font-lock-variable-name-face)) nil [14980 15088])
            ("font-lock-type-face" variable (:default-value (quote font-lock-type-face)) nil [15090 15187])
            ("font-lock-constant-face" variable (:default-value (quote font-lock-constant-face)) nil [15189 15298])
            ("font-lock-warning-face" variable (:default-value (quote font-lock-warning-face)) nil [15300 15411])
            ("font-lock-negation-char-face" variable (:default-value (quote font-lock-negation-char-face)) nil [15413 15581])
            ("font-lock-preprocessor-face" variable (:default-value (quote font-lock-preprocessor-face)) nil [15583 15698])
            ("define-obsolete-variable-alias" code nil nil [15700 15792])
            ("font-lock-keywords" variable nil nil [15823 21652])
            ("font-lock-keywords-alist" variable nil nil [21654 22249])
            ("put" code nil nil [22250 22305])
            ("font-lock-removed-keywords-alist" variable nil nil [22307 22698])
            ("font-lock-keywords-only" variable nil nil [22700 22851])
            ("font-lock-keywords-case-fold-search" variable nil nil [22853 23090])
            ("make-variable-buffer-local" code nil nil [23091 23156])
            ("font-lock-syntactically-fontified" variable nil nil [23158 23377])
            ("make-variable-buffer-local" code nil nil [23378 23441])
            ("font-lock-syntactic-face-function" variable (:default-value (lambda (state) (if (nth 3 state) font-lock-string-face font-lock-comment-face))) nil [23443 23860])
            ("font-lock-syntactic-keywords" variable nil nil [23862 25087])
            ("make-obsolete-variable" code nil nil [25088 25201])
            ("font-lock-syntax-table" variable nil nil [25203 25396])
            ("font-lock-beginning-of-syntax-function" variable nil nil [25398 26020])
            ("make-obsolete-variable" code nil nil [26021 26144])
            ("font-lock-mark-block-function" variable nil nil [26146 26412])
            ("font-lock-fontify-buffer-function" variable (:default-value (quote font-lock-default-fontify-buffer)) nil [26414 26584])
            ("font-lock-unfontify-buffer-function" variable (:default-value (quote font-lock-default-unfontify-buffer)) nil [26586 26808])
            ("font-lock-fontify-region-function" variable (:default-value (quote font-lock-default-fontify-region)) nil [26810 27143])
            ("font-lock-unfontify-region-function" variable (:default-value (quote font-lock-default-unfontify-region)) nil [27145 27381])
            ("font-lock-inhibit-thing-lock" variable nil nil [27383 27631])
            ("font-lock-multiline" variable nil nil [27633 27960])
            ("font-lock-fontified" variable nil nil [27962 27994])
            ("save-buffer-state" function (:arguments ("body")) nil [28195 28446])
            ("font-lock-face-attributes" variable nil nil [28486 28520])
            ("font-lock-specified-p" function (:arguments ("mode")) nil [28556 28980])
            ("font-lock-initial-fontify" function nil nil [28982 29544])
            ("font-lock-mode-internal" function (:arguments ("arg")) nil [29546 29967])
            ("font-lock-add-keywords" function (:arguments ("mode" "keywords" "how")) nil [29969 33686])
            ("font-lock-update-removed-keyword-alist" function (:arguments ("mode" "keywords" "how")) nil [33688 34776])
            ("font-lock-remove-keywords" function (:arguments ("mode" "keywords")) nil [35597 38247])
            ("font-lock-support-mode" variable (:default-value (quote jit-lock-mode)) nil [38591 40270])
            ("fast-lock-mode" variable nil nil [40272 40295])
            ("lazy-lock-mode" variable nil nil [40296 40319])
            ("jit-lock-mode" variable nil nil [40320 40342])
            ("declare-function" code nil nil [40344 40405])
            ("declare-function" code nil nil [40406 40469])
            ("declare-function" code nil nil [40470 40515])
            ("declare-function" code nil nil [40516 40577])
            ("declare-function" code nil nil [40578 40641])
            ("declare-function" code nil nil [40642 40687])
            ("font-lock-turn-on-thing-lock" function nil nil [40689 41581])
            ("font-lock-turn-off-thing-lock" function nil nil [41583 41942])
            ("font-lock-after-fontify-buffer" function nil nil [41944 42266])
            ("font-lock-after-unfontify-buffer" function nil nil [42268 42804])
            ("font-lock-extend-after-change-region-function" variable nil nil [45456 46206])
            ("make-variable-buffer-local" code nil nil [46207 46282])
            ("font-lock-fontify-buffer" function (:user-visible-flag t) nil [46284 46587])
            ("font-lock-unfontify-buffer" function nil nil [46589 46674])
            ("font-lock-fontify-region" function (:arguments ("beg" "end" "loudly")) nil [46676 46986])
            ("font-lock-unfontify-region" function (:arguments ("beg" "end")) nil [46988 47217])
            ("font-lock-default-fontify-buffer" function nil nil [47219 47936])
            ("font-lock-default-unfontify-buffer" function nil nil [47938 48277])
            ("font-lock-dont-widen" variable nil nil [48279 48482])
            ("font-lock-beg" variable nil nil [48485 48507])
            ("font-lock-end" variable nil nil [48508 48530])
            ("font-lock-extend-region-functions" variable (:default-value (quote (font-lock-extend-region-wholelines font-lock-extend-region-multiline))) nil [48531 49838])
            ("make-variable-buffer-local" code nil nil [49969 50032])
            ("font-lock-extend-region-multiline" function nil nil [50034 50803])
            ("font-lock-extend-region-wholelines" function nil nil [50805 51232])
            ("font-lock-default-fontify-region" function (:arguments ("beg" "end" "loudly")) nil [51234 53198])
            ("font-lock-extra-managed-props" variable nil nil [53641 53854])
            ("font-lock-default-unfontify-region" function (:arguments ("beg" "end")) nil [53856 54227])
            ("font-lock-after-change-function" function (:arguments ("beg" "end" "old-len")) nil [54285 55422])
            ("jit-lock-start" variable nil nil [55424 55447])
            ("jit-lock-end" variable nil nil [55448 55469])
            ("font-lock-extend-jit-lock-region-after-change" function (:arguments ("beg" "end" "old-len")) nil [55470 58748])
            ("font-lock-fontify-block" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [58750 59902])
            ("font-lock-prepend-text-property" function (:arguments ("start" "end" "prop" "value" "object")) nil [60336 61265])
            ("font-lock-append-text-property" function (:arguments ("start" "end" "prop" "value" "object")) nil [61267 62193])
            ("font-lock-fillin-text-property" function (:arguments ("start" "end" "prop" "value" "object")) nil [62195 62828])
            ("font-lock-apply-syntactic-highlight" function (:arguments ("highlight")) nil [65182 66513])
            ("font-lock-fontify-syntactic-anchored-keywords" function (:arguments ("keywords" "limit")) nil [66515 67564])
            ("font-lock-fontify-syntactic-keywords-region" function (:arguments ("start" "end")) nil [67566 69376])
            ("font-lock-comment-start-skip" variable nil nil [69473 69588])
            ("font-lock-comment-end-skip" variable nil nil [69590 69696])
            ("font-lock-fontify-syntactically-region" function (:arguments ("start" "end" "loudly")) nil [69698 71374])
            ("font-lock-apply-highlight" function (:arguments ("highlight")) nil [71469 72993])
            ("font-lock-fontify-anchored-keywords" function (:arguments ("keywords" "limit")) nil [72995 74407])
            ("font-lock-fontify-keywords-region" function (:arguments ("start" "end" "loudly")) nil [74409 76798])
            ("font-lock-compile-keywords" function (:arguments ("keywords" "syntactic-keywords")) nil [76876 78700])
            ("font-lock-compile-keyword" function (:arguments ("keyword")) nil [78702 79557])
            ("font-lock-eval-keywords" function (:arguments ("keywords")) nil [79559 79815])
            ("font-lock-value-in-major-mode" function (:arguments ("alist")) nil [79817 80092])
            ("font-lock-choose-keywords" function (:arguments ("keywords" "level")) nil [80094 80482])
            ("font-lock-set-defaults" variable nil nil [80484 80519])
            ("font-lock-refresh-defaults" function nil nil [80556 81132])
            ("font-lock-major-mode" variable nil nil [81134 81232])
            ("make-variable-buffer-local" code nil nil [81233 81283])
            ("font-lock-set-defaults" function nil nil [81285 84210])
            ("font-lock-comment-face" variable
               (:default-value (quote ((((class grayscale) (background light)) :foreground "DimGray" :weight bold :slant italic) (((class grayscale) (background dark)) :foreground "LightGray" :weight bold :slant italic) (((class color) (min-colors 88) (background light)) :foreground "Firebrick") (((class color) (min-colors 88) (background dark)) :foreground "chocolate1") (((class color) (min-colors 16) (background light)) :foreground "red") (((class color) (min-colors 16) (background dark)) :foreground "red1") (((class color) (min-colors 8) (background light)) :foreground "red") (((class color) (min-colors 8) (background dark)) :foreground "yellow") (t :weight bold :slant italic)))
                :type "face")
                nil [84335 85172])
            ("font-lock-comment-delimiter-face" variable
               (:default-value (quote ((default :inherit font-lock-comment-face)))
                :type "face")
                nil [85174 85351])
            ("font-lock-string-face" variable
               (:default-value (quote ((((class grayscale) (background light)) :foreground "DimGray" :slant italic) (((class grayscale) (background dark)) :foreground "LightGray" :slant italic) (((class color) (min-colors 88) (background light)) :foreground "VioletRed4") (((class color) (min-colors 88) (background dark)) :foreground "LightSalmon") (((class color) (min-colors 16) (background light)) :foreground "RosyBrown") (((class color) (min-colors 16) (background dark)) :foreground "LightSalmon") (((class color) (min-colors 8)) :foreground "green") (t :slant italic)))
                :type "face")
                nil [85353 86034])
            ("font-lock-doc-face" variable
               (:default-value (quote ((t :inherit font-lock-string-face)))
                :type "face")
                nil [86036 86187])
            ("font-lock-keyword-face" variable
               (:default-value (quote ((((class grayscale) (background light)) :foreground "LightGray" :weight bold) (((class grayscale) (background dark)) :foreground "DimGray" :weight bold) (((class color) (min-colors 88) (background light)) :foreground "Purple") (((class color) (min-colors 88) (background dark)) :foreground "Cyan1") (((class color) (min-colors 16) (background light)) :foreground "Purple") (((class color) (min-colors 16) (background dark)) :foreground "Cyan") (((class color) (min-colors 8)) :foreground "cyan" :weight bold) (t :weight bold)))
                :type "face")
                nil [86189 86861])
            ("font-lock-builtin-face" variable
               (:default-value (quote ((((class grayscale) (background light)) :foreground "LightGray" :weight bold) (((class grayscale) (background dark)) :foreground "DimGray" :weight bold) (((class color) (min-colors 88) (background light)) :foreground "dark slate blue") (((class color) (min-colors 88) (background dark)) :foreground "LightSteelBlue") (((class color) (min-colors 16) (background light)) :foreground "Orchid") (((class color) (min-colors 16) (background dark)) :foreground "LightSteelBlue") (((class color) (min-colors 8)) :foreground "blue" :weight bold) (t :weight bold)))
                :type "face")
                nil [86863 87562])
            ("font-lock-function-name-face" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) :foreground "Blue1") (((class color) (min-colors 88) (background dark)) :foreground "LightSkyBlue") (((class color) (min-colors 16) (background light)) :foreground "Blue") (((class color) (min-colors 16) (background dark)) :foreground "LightSkyBlue") (((class color) (min-colors 8)) :foreground "blue" :weight bold) (t :inverse-video t :weight bold)))
                :type "face")
                nil [87564 88115])
            ("font-lock-variable-name-face" variable
               (:default-value (quote ((((class grayscale) (background light)) :foreground "Gray90" :weight bold :slant italic) (((class grayscale) (background dark)) :foreground "DimGray" :weight bold :slant italic) (((class color) (min-colors 88) (background light)) :foreground "sienna") (((class color) (min-colors 88) (background dark)) :foreground "LightGoldenrod") (((class color) (min-colors 16) (background light)) :foreground "DarkGoldenrod") (((class color) (min-colors 16) (background dark)) :foreground "LightGoldenrod") (((class color) (min-colors 8)) :foreground "yellow" :weight light) (t :weight bold :slant italic)))
                :type "face")
                nil [88117 88878])
            ("font-lock-type-face" variable
               (:default-value (quote ((((class grayscale) (background light)) :foreground "Gray90" :weight bold) (((class grayscale) (background dark)) :foreground "DimGray" :weight bold) (((class color) (min-colors 88) (background light)) :foreground "ForestGreen") (((class color) (min-colors 88) (background dark)) :foreground "PaleGreen") (((class color) (min-colors 16) (background light)) :foreground "ForestGreen") (((class color) (min-colors 16) (background dark)) :foreground "PaleGreen") (((class color) (min-colors 8)) :foreground "green") (t :weight bold :underline t)))
                :type "face")
                nil [88880 89574])
            ("font-lock-constant-face" variable
               (:default-value (quote ((((class grayscale) (background light)) :foreground "LightGray" :weight bold :underline t) (((class grayscale) (background dark)) :foreground "Gray50" :weight bold :underline t) (((class color) (min-colors 88) (background light)) :foreground "dark cyan") (((class color) (min-colors 88) (background dark)) :foreground "Aquamarine") (((class color) (min-colors 16) (background light)) :foreground "CadetBlue") (((class color) (min-colors 16) (background dark)) :foreground "Aquamarine") (((class color) (min-colors 8)) :foreground "magenta") (t :weight bold :underline t)))
                :type "face")
                nil [89576 90315])
            ("font-lock-warning-face" variable
               (:default-value (quote ((t :inherit error)))
                :type "face")
                nil [90317 90451])
            ("font-lock-negation-char-face" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [90453 90599])
            ("font-lock-preprocessor-face" variable
               (:default-value (quote ((t :inherit font-lock-builtin-face)))
                :type "face")
                nil [90601 90772])
            ("font-lock-regexp-grouping-backslash" variable
               (:default-value (quote ((t :inherit bold)))
                :type "face")
                nil [90774 90944])
            ("font-lock-regexp-grouping-construct" variable
               (:default-value (quote ((t :inherit bold)))
                :type "face")
                nil [90946 91119])
            ("font-lock-match-c-style-declaration-item-and-skip-to-next" function (:arguments ("limit")) nil [95959 97988])
            ("cpp-font-lock-keywords-source-directives" variable
               (:constant-flag t
                :default-value "define\\|e\\(?:l\\(?:if\\|se\\)\\|ndif\\|rror\\)\\|file\\|i\\(?:f\\(?:n?def\\)?\\|mport\\|nclude\\)\\|line\\|pragma\\|undef\\|warning")
                nil [98613 98859])
            ("cpp-font-lock-keywords-source-depth" variable (:constant-flag t) nil [99114 99296])
            ("cpp-font-lock-keywords" variable
               (:constant-flag t
                :default-value (let* ((directives cpp-font-lock-keywords-source-directives) (directives-depth cpp-font-lock-keywords-source-depth)) (list (quote ("^#[ 	]*\\(?:error\\|warning\\)[ 	]+\\(.+\\)" 1 font-lock-warning-face prepend)) (quote ("^#[ 	]*\\(?:import\\|include\\)[ 	]*\\(<[^>\"
]*>?\\)" 1 font-lock-string-face prepend)) (quote ("^#[ 	]*define[ 	]+\\([[:alpha:]_][[:alnum:]_$]*\\)(" (1 font-lock-function-name-face prepend) ((lambda (limit) (re-search-forward "\\(?:\\([[:alpha:]_][[:alnum:]_]*\\)[,]?\\)" (or (save-excursion (re-search-forward ")" limit t)) limit) t)) nil nil (1 font-lock-variable-name-face prepend)))) (quote ("^#[ 	]*\\(?:elif\\|if\\)\\>" ("\\<\\(defined\\)\\>[ 	]*(?\\([[:alpha:]_][[:alnum:]_]*\\)?" nil nil (1 font-lock-builtin-face prepend) (2 font-lock-variable-name-face prepend t)))) (list (concat "^\\(#[ 	]*\\(?:" directives "\\)\\)\\>[ 	!]*\\([[:alpha:]_][[:alnum:]_]*\\)?") (quote (1 font-lock-preprocessor-face prepend)) (list (+ 2 directives-depth) (quote font-lock-variable-name-face) nil t)))))
                nil [99298 101105])
            ("lisp-font-lock-keywords-1" variable
               (:constant-flag t
                :default-value (eval-when-compile (\` (((\, (concat "(\\(def\\(" "\\(advice\\|alias\\|generic\\|macro\\*?\\|method\\|" "setf\\|subst\\*?\\|un\\*?\\|" "ine-\\(condition\\|" "\\(?:derived\\|\\(?:global\\(?:ized\\)?-\\)?minor\\|generic\\)-mode\\|" "method-combination\\|setf-expander\\|skeleton\\|widget\\|" "function\\|\\(compiler\\|modify\\|symbol\\)-macro\\)\\)\\|" "\\(const\\(ant\\)?\\|custom\\|varalias\\|face\\|parameter\\|var\\)\\|" "\\(class\\|group\\|theme\\|package\\|struct\\|type\\)" "\\)\\)\\>" "[ 	'(]*" "\\(setf[ 	]+\\sw+\\|\\sw+\\)?")) (1 font-lock-keyword-face) (9 (cond ((match-beginning 3) font-lock-function-name-face) ((match-beginning 6) font-lock-variable-name-face) (t font-lock-type-face)) nil t)) ("^;;;###\\([-a-z]*autoload\\)" 1 font-lock-warning-face prepend) ("\\[\\(\\^\\)" 1 font-lock-negation-char-face prepend)))))
                nil [101119 102387])
            ("lisp-font-lock-keywords-2" variable
               (:constant-flag t
                :default-value (append lisp-font-lock-keywords-1 (eval-when-compile (\` (((\, (concat "(" (regexp-opt (quote ("cond" "if" "while" "while-no-input" "let" "let*" "letrec" "pcase" "pcase-let" "pcase-let*" "prog" "progn" "progv" "prog1" "prog2" "prog*" "inline" "lambda" "save-restriction" "save-excursion" "save-selected-window" "save-window-excursion" "save-match-data" "save-current-buffer" "combine-after-change-calls" "unwind-protect" "condition-case" "condition-case-unless-debug" "track-mouse" "eval-after-load" "eval-and-compile" "eval-when-compile" "eval-when" "eval-next-after-load" "with-case-table" "with-category-table" "with-current-buffer" "with-demoted-errors" "with-electric-help" "with-local-quit" "with-no-warnings" "with-output-to-string" "with-output-to-temp-buffer" "with-selected-window" "with-selected-frame" "with-silent-modifications" "with-syntax-table" "with-temp-buffer" "with-temp-file" "with-temp-message" "with-timeout" "with-timeout-handler" "with-wrapper-hook")) t) "\\>")) . 1) ((\, (concat "(" (regexp-opt (quote ("when" "unless" "case" "ecase" "typecase" "etypecase" "ccase" "ctypecase" "handler-case" "handler-bind" "restart-bind" "restart-case" "in-package" "break" "ignore-errors" "loop" "do" "do*" "dotimes" "dolist" "the" "locally" "proclaim" "declaim" "declare" "symbol-macrolet" "letf" "lexical-let" "lexical-let*" "flet" "labels" "compiler-let" "destructuring-bind" "macrolet" "tagbody" "block" "go" "multiple-value-bind" "multiple-value-prog1" "return" "return-from" "with-accessors" "with-compilation-unit" "with-condition-restarts" "with-hash-table-iterator" "with-input-from-string" "with-open-file" "with-open-stream" "with-output-to-string" "with-package-iterator" "with-simple-restart" "with-slots" "with-standard-io-syntax")) t) "\\>")) . 1) ((\, (concat "(\\(catch\\|throw\\|featurep\\|provide\\|require\\)\\>" "[ 	']*\\(\\sw+\\)?")) (1 font-lock-keyword-face) (2 font-lock-constant-face nil t)) ("(\\(abort\\|assert\\|warn\\|check-type\\|cerror\\|error\\|signal\\)\\>" 1 font-lock-warning-face) ("\\\\\\\\\\[\\(\\sw+\\)\\]" 1 font-lock-constant-face prepend) ("`\\(\\sw\\sw+\\)'" 1 font-lock-constant-face prepend) ("\\<:\\sw+\\>" 0 font-lock-builtin-face) ("\\<\\&\\sw+\\>" . font-lock-type-face) ((lambda (bound) (catch (quote found) (while (re-search-forward "\\(\\\\\\\\\\)\\(?:\\(\\\\\\\\\\)\\|\\((\\(?:\\?[0-9]*:\\)?\\|[|)]\\)\\)" bound t) (unless (match-beginning 2) (let ((face (get-text-property (1- (point)) (quote face)))) (when (or (and (listp face) (memq (quote font-lock-string-face) face)) (eq (quote font-lock-string-face) face)) (throw (quote found) t))))))) (1 (quote font-lock-regexp-grouping-backslash) prepend) (3 (quote font-lock-regexp-grouping-construct) prepend)))))))
                nil [102389 106532])
            ("lisp-font-lock-keywords" variable (:default-value lisp-font-lock-keywords-1) nil [106534 106644])
            ("font-lock" package nil nil [106647 106667]))          
    :file "font-lock.el"
    :pointmax 106696
    :fsize 106695
    :lastmodtime '(20806 7941 0 0)
    :unmatched-syntax '((close-paren 28520 . 28521) (symbol 28058 . 28075) (open-paren 28057 . 28058) (close-paren 10518 . 10519) (symbol 10483 . 10500) (open-paren 10482 . 10483))
    )
   (semanticdb-table "facemenu.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("help" include nil nil [3652 3667])
            ("button" include nil nil [3670 3687])
            ("define-key" code nil nil [3710 3765])
            ("define-key" code nil nil [3766 3813])
            ("facemenu" customgroup (:user-visible-flag t) nil [3815 3939])
            ("facemenu-keybindings" variable (:default-value (mapcar (quote purecopy) (quote ((default . "d") (bold . "b") (italic . "i") (bold-italic . "l") (underline . "u"))))) nil [3941 4778])
            ("facemenu-new-faces-at-end" variable (:default-value t) nil [4780 5014])
            ("facemenu-listed-faces" variable nil nil [5016 6144])
            ("facemenu-face-menu" variable (:default-value (let ((map (make-sparse-keymap "Face"))) (define-key map "o" (cons (purecopy "Other...") (quote facemenu-set-face))) map)) nil [6146 6325])
            ("defalias" code nil nil [6326 6375])
            ("put" code nil nil [6376 6441])
            ("facemenu-foreground-menu" variable (:default-value (let ((map (make-sparse-keymap "Foreground Color"))) (define-key map "o" (cons (purecopy "Other...") (quote facemenu-set-foreground))) map)) nil [6443 6658])
            ("defalias" code nil nil [6659 6720])
            ("put" code nil nil [6721 6792])
            ("facemenu-background-menu" variable (:default-value (let ((map (make-sparse-keymap "Background Color"))) (define-key map "o" (cons (purecopy "Other...") (quote facemenu-set-background))) map)) nil [6794 7009])
            ("defalias" code nil nil [7010 7071])
            ("put" code nil nil [7072 7143])
            ("facemenu-enable-faces-p" function nil nil [7199 7448])
            ("facemenu-special-menu" variable (:default-value (let ((map (make-sparse-keymap "Special"))) (define-key map [115] (cons (purecopy "Remove Special") (quote facemenu-remove-special))) (define-key map [116] (cons (purecopy "Intangible") (quote facemenu-set-intangible))) (define-key map [118] (cons (purecopy "Invisible") (quote facemenu-set-invisible))) (define-key map [114] (cons (purecopy "Read-Only") (quote facemenu-set-read-only))) map)) nil [7450 7949])
            ("defalias" code nil nil [7950 8005])
            ("facemenu-justification-menu" variable (:default-value (let ((map (make-sparse-keymap "Justification"))) (define-key map [99] (cons (purecopy "Center") (quote set-justification-center))) (define-key map [98] (cons (purecopy "Full") (quote set-justification-full))) (define-key map [114] (cons (purecopy "Right") (quote set-justification-right))) (define-key map [108] (cons (purecopy "Left") (quote set-justification-left))) (define-key map [117] (cons (purecopy "Unfilled") (quote set-justification-none))) map)) nil [8007 8534])
            ("defalias" code nil nil [8535 8602])
            ("facemenu-indentation-menu" variable (:default-value (let ((map (make-sparse-keymap "Indentation"))) (define-key map [decrease-right-margin] (cons (purecopy "Indent Right Less") (quote decrease-right-margin))) (define-key map [increase-right-margin] (cons (purecopy "Indent Right More") (quote increase-right-margin))) (define-key map [decrease-left-margin] (cons (purecopy "Indent Less") (quote decrease-left-margin))) (define-key map [increase-left-margin] (cons (purecopy "Indent More") (quote increase-left-margin))) map)) nil [8604 9167])
            ("defalias" code nil nil [9168 9231])
            ("facemenu-menu" variable nil nil [9295 9357])
            ("setq" code nil nil [9358 9417])
            ("let" code nil nil [9418 10027])
            ("let" code nil nil [10028 10649])
            ("defalias" code nil nil [10650 10689])
            ("facemenu-keymap" variable (:default-value (let ((map (make-sparse-keymap "Set face"))) (define-key map "o" (cons (purecopy "Other...") (quote facemenu-set-face))) (define-key map "\357" (quote font-lock-fontify-block)) map)) nil [10691 11037])
            ("defalias" code nil nil [11038 11081])
            ("facemenu-add-face-function" variable nil nil [11084 11406])
            ("facemenu-end-add-face" variable nil nil [11408 11686])
            ("facemenu-remove-face-function" variable nil nil [11688 12020])
            ("facemenu-color-alist" variable nil nil [12046 12181])
            ("facemenu-update" function (:user-visible-flag t) nil [12183 12510])
            ("facemenu-set-face" function
               (:user-visible-flag t
                :arguments ("face" "start" "end"))
                nil [12512 13695])
            ("facemenu-set-foreground" function
               (:user-visible-flag t
                :arguments ("color" "start" "end"))
                nil [13697 14568])
            ("facemenu-set-background" function
               (:user-visible-flag t
                :arguments ("color" "start" "end"))
                nil [14570 15441])
            ("facemenu-set-face-from-menu" function
               (:user-visible-flag t
                :arguments ("face" "start" "end"))
                nil [15443 16696])
            ("facemenu-set-invisible" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [16698 16930])
            ("facemenu-set-intangible" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [16932 17193])
            ("facemenu-set-read-only" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [17195 17430])
            ("facemenu-remove-face-props" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [17432 17708])
            ("facemenu-remove-all" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [17710 17944])
            ("facemenu-remove-special" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [17946 18326])
            ("defalias" code nil nil [18329 18372])
            ("list-colors-sort" variable nil nil [18374 19386])
            ("list-colors-sort-key" function (:arguments ("color")) nil [19388 20721])
            ("list-colors-display" function
               (:user-visible-flag t
                :arguments ("list" "buffer-name" "callback"))
                nil [20723 22915])
            ("list-colors-print" function (:arguments ("list" "callback")) nil [22917 24398])
            ("list-colors-duplicates" function (:arguments ("list")) nil [24401 26016])
            ("facemenu-color-equal" function (:arguments ("a" "b")) nil [26018 26376])
            ("facemenu-self-insert-data" variable nil nil [26379 26417])
            ("facemenu-post-self-insert-function" function nil nil [26419 26796])
            ("facemenu-set-self-insert-face" function (:arguments ("face")) nil [26798 27039])
            ("facemenu-add-face" function
               (:user-visible-flag t
                :arguments ("face" "start" "end"))
                nil [27041 29955])
            ("facemenu-active-faces" function (:arguments ("face-list" "frame")) nil [29957 31282])
            ("facemenu-add-new-face" function (:arguments ("face")) nil [31284 33311])
            ("facemenu-add-new-color" function (:arguments ("color" "menu")) nil [33347 34595])
            ("facemenu-complete-face-list" function (:arguments ("oldlist")) nil [34597 35126])
            ("facemenu-iterate" function (:arguments ("func" "list")) nil [35128 35383])
            ("facemenu-update" code nil nil [35385 35402])
            ("facemenu" package nil nil [35404 35423]))          
    :file "facemenu.el"
    :pointmax 35451
    :fsize 35450
    :lastmodtime '(20806 7941 0 0)
    :unmatched-syntax '((close-paren 3687 . 3688) (symbol 3632 . 3649) (open-paren 3631 . 3632))
    )
   (semanticdb-table "help.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("help-macro" include nil nil [1132 1153])
            ("add-hook" code nil nil [1224 1275])
            ("add-hook" code nil nil [1276 1327])
            ("help-window-point-marker" variable (:default-value (make-marker)) nil [1748 1858])
            ("help-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map (char-to-string help-char) (quote help-for-help)) (define-key map [help] (quote help-for-help)) (define-key map [f1] (quote help-for-help)) (define-key map "." (quote display-local-help)) (define-key map "?" (quote help-for-help)) (define-key map "" (quote about-emacs)) (define-key map "" (quote describe-copying)) (define-key map "" (quote view-emacs-debugging)) (define-key map "" (quote view-external-packages)) (define-key map "" (quote view-emacs-FAQ)) (define-key map "" (quote view-order-manuals)) (define-key map "" (quote view-emacs-news)) (define-key map "" (quote describe-distribution)) (define-key map "" (quote view-emacs-problems)) (define-key map "" (quote view-emacs-todo)) (define-key map "" (quote describe-no-warranty)) (define-key map "" (quote describe-input-method)) (define-key map "C" (quote describe-coding-system)) (define-key map "F" (quote Info-goto-emacs-command-node)) (define-key map "I" (quote describe-input-method)) (define-key map "K" (quote Info-goto-emacs-key-command-node)) (define-key map "L" (quote describe-language-environment)) (define-key map "S" (quote info-lookup-symbol)) (define-key map "a" (quote apropos-command)) (define-key map "b" (quote describe-bindings)) (define-key map "c" (quote describe-key-briefly)) (define-key map "d" (quote apropos-documentation)) (define-key map "e" (quote view-echo-area-messages)) (define-key map "f" (quote describe-function)) (define-key map "g" (quote describe-gnu-project)) (define-key map "h" (quote view-hello-file)) (define-key map "i" (quote info)) (define-key map "4i" (quote info-other-window)) (define-key map "k" (quote describe-key)) (define-key map "l" (quote view-lossage)) (define-key map "m" (quote describe-mode)) (define-key map "n" (quote view-emacs-news)) (define-key map "p" (quote finder-by-keyword)) (define-key map "P" (quote describe-package)) (define-key map "r" (quote info-emacs-manual)) (define-key map "s" (quote describe-syntax)) (define-key map "t" (quote help-with-tutorial)) (define-key map "w" (quote where-is)) (define-key map "v" (quote describe-variable)) (define-key map "q" (quote help-quit)) map)) nil [1860 4107])
            ("define-key" code nil nil [4109 4173])
            ("define-key" code nil nil [4174 4218])
            ("define-key" code nil nil [4219 4261])
            ("fset" code nil nil [4262 4291])
            ("help-button-cache" variable nil nil [4360 4390])
            ("help-quit" function (:user-visible-flag t) nil [4394 4488])
            ("help-return-method" variable nil nil [4490 4859])
            ("define-obsolete-function-alias" code nil nil [4861 4954])
            ("help-print-return-message" function (:arguments ("function")) nil [4955 7196])
            ("fset" code nil nil [7256 7317])
            ("defalias" code nil nil [7319 7359])
            ("defalias" code nil nil [7392 7441])
            ("make-help-screen" code nil nil [7487 10478])
            ("function-called-at-point" function nil nil [10483 12215])
            ("view-help-file" function (:arguments ("file" "dir")) nil [12246 12401])
            ("describe-distribution" function (:user-visible-flag t) nil [12403 12547])
            ("describe-copying" function (:user-visible-flag t) nil [12549 12687])
            ("describe-gnu-project" function (:user-visible-flag t) nil [12689 12810])
            ("define-obsolete-function-alias" code nil nil [12812 12891])
            ("describe-no-warranty" function (:user-visible-flag t) nil [12893 13139])
            ("describe-prefix-bindings" function (:user-visible-flag t) nil [13141 13647])
            ("setq" code nil nil [13738 13790])
            ("view-emacs-news" function
               (:user-visible-flag t
                :arguments ("version"))
                nil [13792 16218])
            ("view-emacs-todo" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [16220 16339])
            ("define-obsolete-function-alias" code nil nil [16341 16408])
            ("view-echo-area-messages" function (:user-visible-flag t) nil [16411 16682])
            ("view-order-manuals" function (:user-visible-flag t) nil [16684 16792])
            ("view-emacs-FAQ" function (:user-visible-flag t) nil [16794 16981])
            ("view-emacs-problems" function (:user-visible-flag t) nil [16983 17131])
            ("view-emacs-debugging" function (:user-visible-flag t) nil [17133 17256])
            ("view-external-packages" function (:user-visible-flag t) nil [17258 17398])
            ("view-lossage" function (:user-visible-flag t) nil [17400 18187])
            ("describe-bindings" function
               (:user-visible-flag t
                :arguments ("prefix" "buffer"))
                nil [18208 18888])
            ("describe-bindings-internal" function (:arguments ("menus" "prefix")) nil [18931 19507])
            ("where-is" function
               (:user-visible-flag t
                :arguments ("definition" "insert"))
                nil [19509 21630])
            ("help-key-description" function (:arguments ("key" "untranslated")) nil [21632 21992])
            ("describe-key-briefly" function
               (:user-visible-flag t
                :arguments ("key" "insert" "untranslated"))
                nil [21994 25116])
            ("describe-key" function
               (:user-visible-flag t
                :arguments ("key" "untranslated" "up-event"))
                nil [25118 30726])
            ("describe-mode" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [30729 34490])
            ("describe-minor-mode" function
               (:user-visible-flag t
                :arguments ("minor-mode"))
                nil [34493 35380])
            ("describe-minor-mode-completion-table-for-symbol" function nil nil [35392 35606])
            ("describe-minor-mode-from-symbol" function
               (:user-visible-flag t
                :arguments ("symbol"))
                nil [35608 35952])
            ("describe-minor-mode-completion-table-for-indicator" function nil nil [35967 36284])
            ("describe-minor-mode-from-indicator" function
               (:user-visible-flag t
                :arguments ("indicator"))
                nil [36286 36835])
            ("lookup-minor-mode-from-indicator" function (:arguments ("indicator")) nil [36837 37627])
            ("temp-buffer-max-height" variable (:default-value (lambda (buffer) (if (eq (selected-window) (frame-root-window)) (/ (x-display-pixel-height) (frame-char-height) 2) (/ (- (frame-height) 2) 2)))) nil [37675 38418])
            ("define-minor-mode" code nil nil [38420 39576])
            ("resize-temp-buffer-window" function (:arguments ("window")) nil [39578 40885])
            ("help-window-select" variable (:default-value (quote other)) nil [40905 41500])
            ("help-enable-auto-load" variable (:default-value t) nil [41502 41889])
            ("help-window-display-message" function (:arguments ("quit-part" "window" "scroll")) nil [41891 42809])
            ("help-window-setup" function (:arguments ("help-window")) nil [42811 44925])
            ("with-help-window" function (:arguments ("buffer-name" "body")) nil [45455 46283])
            ("help-form-show" function nil nil [46411 46601])
            ("help" package nil nil [46604 46619]))          
    :file "help.el"
    :pointmax 46643
    :fsize 46642
    :lastmodtime '(20806 7942 0 0)
    :unmatched-syntax '((close-paren 1153 . 1154) (symbol 1114 . 1131) (open-paren 1113 . 1114))
    )
   (semanticdb-table "button.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("button" variable
               (:default-value (quote ((t :inherit link)))
                :type "face")
                nil [2216 2310])
            ("button-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [(control 109)] (quote push-button)) (define-key map [mouse-2] (quote push-button)) map)) nil [2312 2631])
            ("button-buffer-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [9] (quote forward-button)) (define-key map "	" (quote backward-button)) (define-key map [backtab] (quote backward-button)) map)) nil [2633 2957])
            ("put" code nil nil [2993 3028])
            ("put" code nil nil [3029 3073])
            ("put" code nil nil [3074 3114])
            ("put" code nil nil [3115 3150])
            ("put" code nil nil [3216 3253])
            ("put" code nil nil [3254 3330])
            ("put" code nil nil [3400 3434])
            ("put" code nil nil [3530 3569])
            ("put" code nil nil [3631 3684])
            ("button-category-symbol" function (:arguments ("type")) nil [4245 4515])
            ("define-button-type" function (:arguments ("name" "properties")) nil [4517 6155])
            ("button-type-put" function (:arguments ("type" "prop" "val")) nil [6157 6296])
            ("button-type-get" function (:arguments ("type" "prop")) nil [6298 6429])
            ("button-type-subtype-p" function (:arguments ("type" "supertype")) nil [6431 6659])
            ("button-start" function (:arguments ("button")) nil [6706 6952])
            ("button-end" function (:arguments ("button")) nil [6954 7185])
            ("button-get" function (:arguments ("button" "prop")) nil [7187 7401])
            ("button-put" function (:arguments ("button" "prop" "val")) nil [7403 8228])
            ("button-activate" function (:arguments ("button" "use-mouse-action")) nil [8230 8784])
            ("button-label" function (:arguments ("button")) nil [8786 8924])
            ("button-type" function (:arguments ("button")) nil [8926 9018])
            ("button-has-type-p" function (:arguments ("button" "type")) nil [9020 9188])
            ("make-button" function (:arguments ("beg" "end" "properties")) nil [9221 10149])
            ("insert-button" function (:arguments ("label" "properties")) nil [10151 10618])
            ("make-text-button" function (:arguments ("beg" "end" "properties")) nil [10657 12856])
            ("insert-text-button" function (:arguments ("label" "properties")) nil [12858 13543])
            ("button-at" function (:arguments ("pos")) nil [13579 13969])
            ("next-button" function (:arguments ("pos" "count-current")) nil [13971 14537])
            ("previous-button" function (:arguments ("pos" "count-current")) nil [14539 15546])
            ("push-button" function
               (:user-visible-flag t
                :arguments ("pos" "use-mouse-action"))
                nil [15568 16690])
            ("forward-button" function
               (:user-visible-flag t
                :arguments ("n" "wrap" "display-message"))
                nil [16692 18211])
            ("backward-button" function
               (:user-visible-flag t
                :arguments ("n" "wrap" "display-message"))
                nil [18213 18717])
            ("button" package nil nil [18720 18737]))          
    :file "button.el"
    :pointmax 18763
    :fsize 18762
    :lastmodtime '(20806 7939 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "font-core.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("font-lock-defaults" variable nil nil [1081 3605])
            ("put" code nil nil [3621 3670])
            ("make-variable-buffer-local" code nil nil [3671 3719])
            ("font-lock-function" variable (:default-value (quote font-lock-default-function)) nil [3721 3921])
            ("font-lock-major-mode" variable nil nil [3988 4017])
            ("define-minor-mode" code nil nil [4019 6891])
            ("font-lock-change-mode" function nil nil [6986 7040])
            ("font-lock-defontify" function nil nil [7042 7476])
            ("font-lock-set-defaults" variable nil nil [7478 7509])
            ("font-lock-default-function" function (:arguments ("mode")) nil [7510 8590])
            ("turn-on-font-lock" function nil nil [8592 8733])
            ("font-lock-global-modes" variable (:default-value t) nil [11658 12503])
            ("turn-on-font-lock-if-desired" function nil nil [12505 12819])
            ("define-globalized-minor-mode" code nil nil [12821 13132])
            ("font-core" package nil nil [13169 13189]))          
    :file "font-core.el"
    :pointmax 13218
    :fsize 13217
    :lastmodtime '(20806 7941 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "indent.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("indent" customgroup (:user-visible-flag t) nil [961 1026])
            ("standard-indent" variable (:default-value 4) nil [1028 1162])
            ("indent-line-function" variable (:default-value (quote indent-relative)) nil [1164 1550])
            ("tab-always-indent" variable (:default-value t) nil [1552 2307])
            ("indent-according-to-mode" function (:user-visible-flag t) nil [2310 3322])
            ("indent-for-tab-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [3324 5749])
            ("insert-tab" function (:arguments ("arg")) nil [5751 6043])
            ("indent-rigidly" function
               (:user-visible-flag t
                :arguments ("start" "end" "arg"))
                nil [6045 6777])
            ("indent-line-to" function (:arguments ("column")) nil [6779 7399])
            ("current-left-margin" function nil nil [7401 7805])
            ("move-to-left-margin" function
               (:user-visible-flag t
                :arguments ("n" "force"))
                nil [7807 8722])
            ("indent-to-left-margin" function nil nil [8822 9133])
            ("delete-to-left-margin" function (:arguments ("from" "to")) nil [9135 9699])
            ("set-left-margin" function
               (:user-visible-flag t
                :arguments ("from" "to" "width"))
                nil [9701 10576])
            ("set-right-margin" function
               (:user-visible-flag t
                :arguments ("from" "to" "width"))
                nil [10578 11137])
            ("alter-text-property" function (:arguments ("from" "to" "prop" "func" "object")) nil [11139 11807])
            ("increase-left-margin" function
               (:user-visible-flag t
                :arguments ("from" "to" "inc"))
                nil [11809 12643])
            ("decrease-left-margin" function
               (:user-visible-flag t
                :arguments ("from" "to" "inc"))
                nil [12645 13126])
            ("increase-right-margin" function
               (:user-visible-flag t
                :arguments ("from" "to" "inc"))
                nil [13128 13781])
            ("decrease-right-margin" function
               (:user-visible-flag t
                :arguments ("from" "to" "inc"))
                nil [13783 14314])
            ("beginning-of-line-text" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [14316 15330])
            ("indent-region-function" variable nil nil [15332 15514])
            ("indent-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "column"))
                nil [15516 17457])
            ("indent-relative-maybe" function (:user-visible-flag t) nil [17459 17722])
            ("indent-relative" function
               (:user-visible-flag t
                :arguments ("unindented-ok"))
                nil [17724 19087])
            ("tab-stop-list" variable (:default-value (quote (8 16 24 32 40 48 56 64 72 80 88 96 104 112 120))) nil [19089 19336])
            ("put" code nil nil [19337 19385])
            ("edit-tab-stops-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "" (quote edit-tab-stops-note-changes)) (define-key map "" (quote edit-tab-stops-note-changes)) map)) nil [19387 19618])
            ("edit-tab-stops-buffer" variable nil nil [19620 19769])
            ("edit-tab-stops" function (:user-visible-flag t) nil [19771 20830])
            ("edit-tab-stops-note-changes" function (:user-visible-flag t) nil [20832 21232])
            ("tab-to-tab-stop" function (:user-visible-flag t) nil [21234 21776])
            ("move-to-tab-stop" function (:user-visible-flag t) nil [21778 22623])
            ("define-key" code nil nil [22625 22677])
            ("define-key" code nil nil [22678 22721])
            ("define-key" code nil nil [22722 22765])
            ("define-key" code nil nil [22766 22807]))          
    :file "indent.el"
    :pointmax 22833
    :fsize 22832
    :lastmodtime '(20806 7942 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "composite.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("reference-point-alist" variable
               (:constant-flag t
                :default-value (quote ((tl . 0) (tc . 1) (tr . 2) (Bl . 3) (Bc . 4) (Br . 5) (bl . 6) (bc . 7) (br . 8) (cl . 9) (cc . 10) (cr . 11) (top-left . 0) (top-center . 1) (top-right . 2) (base-left . 3) (base-center . 4) (base-right . 5) (bottom-left . 6) (bottom-center . 7) (bottom-right . 8) (center-left . 9) (center-center . 10) (center-right . 11) (ml . 3) (mc . 10) (mr . 5) (mid-left . 3) (mid-center . 10) (mid-right . 5))))
                nil [1107 3316])
            ("encode-composition-rule" function (:arguments ("rule")) nil [3334 4529])
            ("decode-composition-rule" function (:arguments ("rule-code")) nil [4736 5402])
            ("encode-composition-components" function (:arguments ("components" "nocopy")) nil [5737 6209])
            ("decode-composition-components" function (:arguments ("components" "nocopy")) nil [6666 6976])
            ("compose-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "components" "modification-func"))
                nil [6978 9197])
            ("decompose-region" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [9199 9571])
            ("compose-string" function (:arguments ("string" "start" "end" "components" "modification-func")) nil [9573 10537])
            ("decompose-string" function (:arguments ("string")) nil [10539 10711])
            ("compose-chars" function (:arguments ("args")) nil [10713 11591])
            ("find-composition" function (:arguments ("pos" "limit" "string" "detail-p")) nil [11593 13541])
            ("compose-chars-after" function (:arguments ("pos" "limit" "object")) nil [13545 14989])
            ("compose-last-chars" function
               (:user-visible-flag t
                :arguments ("args"))
                nil [14991 15903])
            ("global-set-key" code nil nil [15905 15962])
            ("lgstring-header" function (:arguments ("gstring")) nil [16083 16136])
            ("lgstring-set-header" function (:arguments ("gstring" "header")) nil [16137 16208])
            ("lgstring-font" function (:arguments ("gstring")) nil [16209 16278])
            ("lgstring-char" function (:arguments ("gstring" "i")) nil [16279 16355])
            ("lgstring-char-len" function (:arguments ("gstring")) nil [16356 16434])
            ("lgstring-shaped-p" function (:arguments ("gstring")) nil [16435 16490])
            ("lgstring-set-id" function (:arguments ("gstring" "id")) nil [16491 16550])
            ("lgstring-glyph" function (:arguments ("gstring" "i")) nil [16551 16611])
            ("lgstring-glyph-len" function (:arguments ("gstring")) nil [16612 16674])
            ("lgstring-set-glyph" function (:arguments ("gstring" "i" "glyph")) nil [16675 16751])
            ("lglyph-from" function (:arguments ("glyph")) nil [16753 16798])
            ("lglyph-to" function (:arguments ("glyph")) nil [16799 16842])
            ("lglyph-char" function (:arguments ("glyph")) nil [16843 16888])
            ("lglyph-code" function (:arguments ("glyph")) nil [16889 16934])
            ("lglyph-width" function (:arguments ("glyph")) nil [16935 16981])
            ("lglyph-lbearing" function (:arguments ("glyph")) nil [16982 17031])
            ("lglyph-rbearing" function (:arguments ("glyph")) nil [17032 17081])
            ("lglyph-ascent" function (:arguments ("glyph")) nil [17082 17129])
            ("lglyph-descent" function (:arguments ("glyph")) nil [17130 17178])
            ("lglyph-adjustment" function (:arguments ("glyph")) nil [17179 17230])
            ("lglyph-set-from-to" function (:arguments ("glyph" "from" "to")) nil [17232 17325])
            ("lglyph-set-char" function (:arguments ("glyph" "char")) nil [17326 17385])
            ("lglyph-set-code" function (:arguments ("glyph" "code")) nil [17386 17445])
            ("lglyph-set-width" function (:arguments ("glyph" "width")) nil [17446 17508])
            ("lglyph-set-adjustment" function (:arguments ("glyph" "xoff" "yoff" "wadjust")) nil [17509 17642])
            ("lglyph-copy" function (:arguments ("glyph")) nil [17644 17696])
            ("lgstring-insert-glyph" function (:arguments ("gstring" "idx" "glyph")) nil [17698 18197])
            ("compose-glyph-string" function (:arguments ("gstring" "from" "to")) nil [18199 18772])
            ("compose-glyph-string-relative" function (:arguments ("gstring" "from" "to" "gap")) nil [18774 19988])
            ("compose-gstring-for-graphic" function (:arguments ("gstring")) nil [19990 24307])
            ("let" code nil nil [24309 24589])
            ("compose-gstring-for-terminal" function (:arguments ("gstring")) nil [24591 26534])
            ("auto-compose-chars" function (:arguments ("func" "from" "to" "font-object" "string")) nil [26537 27476])
            ("put" code nil nil [27478 27525])
            ("make-variable-buffer-local" code nil nil [27527 27582])
            ("setq-default" code nil nil [27583 27643])
            ("define-minor-mode" code nil nil [27660 28261])
            ("make-variable-buffer-local" code nil nil [28313 28364])
            ("define-minor-mode" code nil nil [28381 28749])
            ("defalias" code nil nil [28751 28809]))          
    :file "composite.el"
    :pointmax 28841
    :fsize 28840
    :lastmodtime '(20806 7940 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "case-table.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("describe-buffer-case-table" function (:user-visible-flag t) nil [1194 2240])
            ("get-upcase-table" function (:arguments ("case-table")) nil [2242 2702])
            ("copy-case-table" function (:arguments ("case-table")) nil [2704 3119])
            ("set-case-syntax-delims" function (:arguments ("l" "r" "table")) nil [3121 3947])
            ("set-case-syntax-pair" function (:arguments ("uc" "lc" "table")) nil [3949 4719])
            ("set-upcase-syntax" function (:arguments ("uc" "lc" "table")) nil [4721 5314])
            ("set-downcase-syntax" function (:arguments ("uc" "lc" "table")) nil [5316 5913])
            ("set-case-syntax" function (:arguments ("c" "syntax" "table")) nil [5915 6555])
            ("case-table" package nil nil [6557 6578]))          
    :file "case-table.el"
    :pointmax 6608
    :fsize 6607
    :lastmodtime '(20806 7939 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "epa-hook.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("epa-file" customgroup (:user-visible-flag t) nil [910 1028])
            ("epa-file--file-name-regexp-set" function (:arguments ("variable" "value")) nil [1030 1198])
            ("epa-file-name-regexp" variable (:default-value (purecopy "\\.gpg\\(~\\|\\.~[0-9]+~\\)?\\'")) nil [1200 1643])
            ("epa-file-inhibit-auto-save" variable (:default-value t) nil [1645 1789])
            ("epa-file-encrypt-to" variable nil nil [1791 1912])
            ("put" code nil nil [1914 2137])
            ("put" code nil nil [2139 2184])
            ("epa-file-handler" variable (:default-value (cons epa-file-name-regexp (quote epa-file-handler))) nil [2186 2259])
            ("epa-file-auto-mode-alist-entry" variable (:default-value (list epa-file-name-regexp nil (quote epa-file))) nil [2261 2344])
            ("epa-file-name-regexp-update" function nil nil [2346 2514])
            ("epa-file-find-file-hook" function nil nil [2516 2693])
            ("define-minor-mode" code nil nil [2695 3797])
            ("put" code nil nil [3799 3836])
            ("put" code nil nil [3837 3909])
            ("epa-hook" package nil nil [3911 3930]))          
    :file "epa-hook.el"
    :pointmax 3958
    :fsize 3957
    :lastmodtime '(20806 7941 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jka-cmpr-hook.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("compression" customgroup (:user-visible-flag t) nil [1161 1234])
            ("jka-compr" customgroup (:user-visible-flag t) nil [1236 1311])
            ("jka-compr-verbose" variable (:default-value t) nil [1313 1476])
            ("jka-compr-added-to-file-coding-system-alist" variable nil nil [1553 1609])
            ("jka-compr-file-name-handler-entry" variable nil nil [1611 1728])
            ("jka-compr-compression-info-list" variable nil nil [1871 1911])
            ("jka-compr-mode-alist-additions" variable nil nil [1912 1951])
            ("jka-compr-load-suffixes" variable nil nil [1952 1984])
            ("jka-compr-compression-info-list--internal" variable nil nil [1986 2251])
            ("jka-compr-mode-alist-additions--internal" variable nil nil [2253 2515])
            ("jka-compr-load-suffixes--internal" variable nil nil [2517 2758])
            ("jka-compr-build-file-regexp" function nil nil [2762 3290])
            ("jka-compr-info-regexp" function (:arguments ("info")) nil [3370 3435])
            ("jka-compr-info-compress-message" function (:arguments ("info")) nil [3436 3501])
            ("jka-compr-info-compress-program" function (:arguments ("info")) nil [3502 3567])
            ("jka-compr-info-compress-args" function (:arguments ("info")) nil [3568 3633])
            ("jka-compr-info-uncompress-message" function (:arguments ("info")) nil [3634 3699])
            ("jka-compr-info-uncompress-program" function (:arguments ("info")) nil [3700 3765])
            ("jka-compr-info-uncompress-args" function (:arguments ("info")) nil [3766 3831])
            ("jka-compr-info-can-append" function (:arguments ("info")) nil [3832 3897])
            ("jka-compr-info-strip-extension" function (:arguments ("info")) nil [3898 3963])
            ("jka-compr-info-file-magic-bytes" function (:arguments ("info")) nil [3964 4029])
            ("jka-compr-get-compression-info" function (:arguments ("filename")) nil [4032 4564])
            ("jka-compr-install" function nil nil [4566 6289])
            ("jka-compr-installed-p" function nil nil [6291 6670])
            ("jka-compr-update" function nil nil [6672 7200])
            ("jka-compr-set" function (:arguments ("variable" "value")) nil [7202 7327])
            ("jka-compr-compression-info-list" variable (:default-value (mapcar (quote purecopy) (quote (["\\.Z\\'" "compressing" "compress" ("-c") "uncompressing" "gzip" ("-c" "-q" "-d") nil t "\235"] ["\\.bz2\\'" "bzip2ing" "bzip2" nil "bunzip2ing" "bzip2" ("-d") nil t "BZh"] ["\\.tbz2?\\'" "bzip2ing" "bzip2" nil "bunzip2ing" "bzip2" ("-d") nil nil "BZh"] ["\\.\\(?:tgz\\|svgz\\|sifz\\)\\'" "compressing" "gzip" ("-c" "-q") "uncompressing" "gzip" ("-c" "-q" "-d") t nil "\213"] ["\\.g?z\\'" "compressing" "gzip" ("-c" "-q") "uncompressing" "gzip" ("-c" "-q" "-d") t t "\213"] ["\\.lz\\'" "Lzip compressing" "lzip" ("-c" "-q") "Lzip uncompressing" "lzip" ("-c" "-q" "-d") t t "LZIP"] ["\\.lzma\\'" "LZMA compressing" "lzma" ("-c" "-q" "-z") "LZMA uncompressing" "lzma" ("-c" "-q" "-d") t t ""] ["\\.xz\\'" "XZ compressing" "xz" ("-c" "-q") "XZ uncompressing" "xz" ("-c" "-q" "-d") t t "\3757zXZ "] ["\\.dz\\'" nil nil nil "uncompressing" "gzip" ("-c" "-q" "-d") nil t "\213"])))) nil [7474 11807])
            ("jka-compr-mode-alist-additions" variable (:default-value (list (cons (purecopy "\\.tgz\\'") (quote tar-mode)) (cons (purecopy "\\.tbz2?\\'") (quote tar-mode)))) nil [11809 12428])
            ("jka-compr-load-suffixes" variable (:default-value (list (purecopy ".gz"))) nil [12430 13064])
            ("define-minor-mode" code nil nil [13066 13791])
            ("with-auto-compression-mode" function (:arguments ("body")) nil [13793 14232])
            ("put" code nil nil [14330 14368])
            ("put" code nil nil [14369 14512])
            ("when" code nil nil [14535 14589])
            ("jka-cmpr-hook" package nil nil [14591 14615]))          
    :file "jka-cmpr-hook.el"
    :pointmax 14648
    :fsize 14647
    :lastmodtime '(20806 7942 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "abbrev.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("cl-lib" include nil nil [1033 1050])
            ("abbrev-mode" customgroup (:user-visible-flag t) nil [1053 1167])
            ("abbrev-file-name" variable (:default-value (locate-user-emacs-file "abbrev_defs" ".abbrev_defs")) nil [1169 1359])
            ("only-global-abbrevs" variable nil nil [1361 1612])
            ("define-minor-mode" code nil nil [1614 2042])
            ("put" code nil nil [2044 2093])
            ("edit-abbrevs-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "" (quote abbrev-edit-save-buffer)) (define-key map "" (quote abbrev-edit-save-to-file)) (define-key map "" (quote edit-abbrevs-redefine)) map)) nil [2097 2372])
            ("kill-all-abbrevs" function (:user-visible-flag t) nil [2374 2545])
            ("copy-abbrev-table" function (:arguments ("table")) nil [2547 2882])
            ("insert-abbrevs" function (:user-visible-flag t) nil [2884 3170])
            ("list-abbrevs" function
               (:user-visible-flag t
                :arguments ("local"))
                nil [3172 3470])
            ("abbrev-table-name" function (:arguments ("table")) nil [3472 3758])
            ("prepare-abbrev-list-buffer" function (:arguments ("local")) nil [3760 4646])
            ("edit-abbrevs-mode" function (:user-visible-flag t) nil [4648 4952])
            ("edit-abbrevs" function (:user-visible-flag t) nil [4954 5897])
            ("edit-abbrevs-redefine" function (:user-visible-flag t) nil [5899 6094])
            ("define-abbrevs" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [6096 7094])
            ("read-abbrev-file" function
               (:user-visible-flag t
                :arguments ("file" "quietly"))
                nil [7096 7613])
            ("quietly-read-abbrev-file" function (:arguments ("file")) nil [7615 7940])
            ("write-abbrev-file" function
               (:user-visible-flag t
                :arguments ("file" "verbose"))
                nil [7942 9701])
            ("abbrev-edit-save-to-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [9703 10023])
            ("abbrev-edit-save-buffer" function (:user-visible-flag t) nil [10025 10258])
            ("add-mode-abbrev" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [10262 10802])
            ("add-global-abbrev" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [10804 11294])
            ("add-abbrev" function (:arguments ("table" "type" "arg")) nil [11296 11889])
            ("inverse-add-mode-abbrev" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [11891 12322])
            ("inverse-add-global-abbrev" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [12324 12667])
            ("inverse-add-abbrev" function (:arguments ("table" "type" "arg")) nil [12669 13280])
            ("abbrev-prefix-mark" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [13282 13943])
            ("expand-region-abbrevs" function
               (:user-visible-flag t
                :arguments ("start" "end" "noquery"))
                nil [13945 14632])
            ("abbrev-table-get" function (:arguments ("table" "prop")) nil [14658 14811])
            ("abbrev-table-put" function (:arguments ("table" "prop" "val")) nil [14813 15038])
            ("defalias" code nil nil [15040 15129])
            ("defalias" code nil nil [15131 15300])
            ("abbrev-table-name-list" variable (:default-value (quote (fundamental-mode-abbrev-table global-abbrev-table))) nil [15356 15497])
            ("make-abbrev-table" function (:arguments ("props")) nil [15499 16290])
            ("abbrev-table-p" function (:arguments ("object")) nil [16292 16461])
            ("abbrev-table-empty-p" function (:arguments ("object" "ignore-system")) nil [16463 16927])
            ("global-abbrev-table" variable (:default-value (make-abbrev-table)) nil [16929 17176])
            ("abbrev-minor-mode-table-alist" variable nil nil [17178 17433])
            ("fundamental-mode-abbrev-table" variable (:default-value (let ((table (make-abbrev-table))) (setq-default local-abbrev-table table) table)) nil [17435 17710])
            ("abbrevs-changed" variable nil nil [17712 17860])
            ("abbrev-all-caps" variable nil nil [17862 18003])
            ("abbrev-start-location" variable nil nil [18005 18207])
            ("abbrev-start-location-buffer" variable nil nil [18209 18387])
            ("last-abbrev" variable nil nil [18389 18486])
            ("last-abbrev-text" variable nil nil [18488 18618])
            ("last-abbrev-location" variable nil nil [18620 18710])
            ("pre-abbrev-expand-hook" variable nil nil [18887 19162])
            ("make-obsolete-variable" code nil nil [19163 19243])
            ("clear-abbrev-table" function (:arguments ("table")) nil [19245 19867])
            ("define-abbrev" function (:arguments ("table" "name" "expansion" "hook" "props")) nil [19869 22894])
            ("abbrev--check-chars" function (:arguments ("abbrev" "global")) nil [22896 23639])
            ("define-global-abbrev" function
               (:user-visible-flag t
                :arguments ("abbrev" "expansion"))
                nil [23641 23999])
            ("define-mode-abbrev" function
               (:user-visible-flag t
                :arguments ("abbrev" "expansion"))
                nil [24001 24423])
            ("abbrev--active-tables" function (:arguments ("tables")) nil [24425 25472])
            ("abbrev-symbol" function (:arguments ("abbrev" "table")) nil [25475 26809])
            ("abbrev-expansion" function (:arguments ("abbrev" "table")) nil [26812 27072])
            ("abbrev--before-point" function nil nil [27075 29658])
            ("abbrev-insert" function (:arguments ("abbrev" "name" "wordstart" "wordend")) nil [29660 32704])
            ("abbrev-expand-functions" variable nil nil [32706 32956])
            ("expand-abbrev" function (:user-visible-flag t) nil [32958 34496])
            ("unexpand-abbrev" function (:user-visible-flag t) nil [34498 35396])
            ("abbrev--write" function (:arguments ("sym")) nil [35398 35853])
            ("abbrev--describe" function (:arguments ("sym")) nil [35855 36249])
            ("insert-abbrev-table-description" function (:arguments ("name" "readable")) nil [36251 37292])
            ("put" code nil nil [37294 37338])
            ("define-abbrev-table" function (:arguments ("tablename" "definitions" "docstring" "props")) nil [37339 39343])
            ("abbrev-table-menu" function (:arguments ("table" "prompt" "sortfun")) nil [39345 40161])
            ("abbrev" package nil nil [40163 40180]))          
    :file "abbrev.el"
    :pointmax 40206
    :fsize 40205
    :lastmodtime '(20806 7939 0 0)
    :unmatched-syntax '((close-paren 1050 . 1051) (symbol 1015 . 1032) (open-paren 1014 . 1015))
    )
   (semanticdb-table "minibuffer.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("cl-lib" include nil nil [3861 3878])
            ("completion-boundaries" function (:arguments ("string" "table" "pred" "suffix")) nil [3951 4863])
            ("completion-metadata" function (:arguments ("string" "table" "pred")) nil [4865 5875])
            ("completion--field-metadata" function (:arguments ("field-start")) nil [5877 6108])
            ("completion-metadata-get" function (:arguments ("metadata" "prop")) nil [6110 6186])
            ("completion--some" function (:arguments ("fun" "xs")) nil [6188 6608])
            ("complete-with-action" function (:arguments ("action" "table" "string" "pred")) nil [6610 7136])
            ("completion-table-dynamic" function (:arguments ("fun")) nil [7138 8329])
            ("lazy-completion-table" function (:arguments ("var" "fun")) nil [8331 9146])
            ("completion-table-case-fold" function (:arguments ("table" "dont-fold")) nil [9148 9490])
            ("completion-table-subvert" function (:arguments ("table" "s1" "s2")) nil [9492 11193])
            ("completion-table-with-context" function (:arguments ("prefix" "table" "string" "pred" "action")) nil [11195 12479])
            ("completion-table-with-terminator" function (:arguments ("terminator" "table" "string" "pred" "action")) nil [12481 15733])
            ("completion-table-with-predicate" function (:arguments ("table" "pred1" "strict" "string" "pred2" "action")) nil [15735 17208])
            ("completion-table-in-turn" function (:arguments ("tables")) nil [17210 17647])
            ("completion-table-with-quoting" function (:arguments ("table" "unquote" "requote")) nil [17649 23964])
            ("completion--twq-try" function (:arguments ("string" "ustring" "completion" "point" "unquote" "requote")) nil [23966 25212])
            ("completion--string-equal-p" function (:arguments ("s1" "s2")) nil [25214 25318])
            ("completion--twq-all" function (:arguments ("string" "ustring" "completions" "boundary" "unquote" "requote")) nil [25320 28317])
            ("define-obsolete-function-alias" code nil nil [28468 28553])
            ("define-obsolete-function-alias" code nil nil [28554 28647])
            ("minibuffer" customgroup (:user-visible-flag t) nil [28676 28816])
            ("minibuffer-message" function (:arguments ("message" "args")) nil [28818 30835])
            ("minibuffer-completion-contents" function nil nil [30837 31038])
            ("delete-minibuffer-contents" function (:user-visible-flag t) nil [31040 31397])
            ("completion-show-inline-help" variable (:default-value t) nil [31399 31502])
            ("completion-auto-help" variable (:default-value t) nil [31504 31907])
            ("completion-styles-alist" variable
               (:constant-flag t
                :default-value (quote ((emacs21 completion-emacs21-try-completion completion-emacs21-all-completions "Simple prefix-based completion.
I.e. when completing \"foo_bar\" (where _ is the position of point),
it will consider all completions candidates matching the glob
pattern \"foobar*\".") (emacs22 completion-emacs22-try-completion completion-emacs22-all-completions "Prefix completion that only operates on the text before point.
I.e. when completing \"foo_bar\" (where _ is the position of point),
it will consider all completions candidates matching the glob
pattern \"foo*\" and will add back \"bar\" to the end of it.") (basic completion-basic-try-completion completion-basic-all-completions "Completion of the prefix before point and the suffix after point.
I.e. when completing \"foo_bar\" (where _ is the position of point),
it will consider all completions candidates matching the glob
pattern \"foo*bar*\".") (partial-completion completion-pcm-try-completion completion-pcm-all-completions "Completion of multiple words, each one taken as a prefix.
I.e. when completing \"l-co_h\" (where _ is the position of point),
it will consider all completions candidates matching the glob
pattern \"l*-co*h*\".
Furthermore, for completions that are done step by step in subfields,
the method is applied to all the preceding fields that do not yet match.
E.g. C-x C-f /u/mo/s TAB could complete to /usr/monnier/src.
Additionally the user can use the char \"*\" as a glob pattern.") (substring completion-substring-try-completion completion-substring-all-completions "Completion of the string taken as a substring.
I.e. when completing \"foo_bar\" (where _ is the position of point),
it will consider all completions candidates matching the glob
pattern \"*foo*bar*\".") (initials completion-initials-try-completion completion-initials-all-completions "Completion of acronyms and initialisms.
E.g. can complete M-x lch to list-command-history
and C-x C-f ~/sew to ~/src/emacs/work."))))
                nil [31909 34490])
            ("completion--styles-type" variable
               (:constant-flag t
                :default-value (\` (repeat :tag "insert a new menu to add more styles" (choice (\,@ (mapcar (lambda (x) (list (quote const) (car x))) completion-styles-alist))))))
                nil [34492 34701])
            ("completion--cycling-threshold-type" variable
               (:constant-flag t
                :default-value (quote (choice (const :tag "No cycling" nil) (const :tag "Always cycle" t) (integer :tag "Threshold"))))
                nil [34702 34868])
            ("completion-styles" variable (:default-value (quote (basic partial-completion emacs22))) nil [34870 35795])
            ("completion-category-overrides" variable (:default-value (quote ((buffer (styles basic substring))))) nil [35797 36914])
            ("completion--styles" function (:arguments ("metadata")) nil [36916 37208])
            ("completion--nth-completion" function (:arguments ("n" "string" "table" "pred" "point" "metadata")) nil [37210 38840])
            ("completion-try-completion" function (:arguments ("string" "table" "pred" "point" "metadata")) nil [38842 39399])
            ("completion-all-completions" function (:arguments ("string" "table" "pred" "point" "metadata")) nil [39401 39938])
            ("minibuffer--bitset" function (:arguments ("modified" "completions" "exact")) nil [39940 40089])
            ("completion--replace" function (:arguments ("beg" "end" "newtext")) nil [40091 41715])
            ("completion-cycle-threshold" variable nil nil [41717 42146])
            ("completion--cycle-threshold" function (:arguments ("metadata")) nil [42148 42385])
            ("completion-all-sorted-completions" variable nil nil [42387 42433])
            ("make-variable-buffer-local" code nil nil [42434 42497])
            ("defvar-local" code nil nil [42498 42560])
            ("completion-cycling" variable nil nil [42561 42592])
            ("completion-fail-discreetly" variable nil nil [42594 42685])
            ("completion--message" function (:arguments ("msg")) nil [42687 42786])
            ("completion--do-completion" function (:arguments ("try-completion-function" "expect-exact")) nil [42788 49271])
            ("minibuffer-complete" function (:user-visible-flag t) nil [49273 50626])
            ("completion--cache-all-sorted-completions" function (:arguments ("comps")) nil [50628 50956])
            ("completion--flush-all-sorted-completions" function (:arguments ("start" "end" "_len")) nil [50958 51403])
            ("completion--metadata" function (:arguments ("string" "base" "md-at-point" "table" "pred")) nil [51405 51851])
            ("completion-all-sorted-completions" function nil nil [51853 53675])
            ("minibuffer-force-complete" function (:user-visible-flag t) nil [53677 56215])
            ("minibuffer-confirm-exit-commands" variable (:default-value (quote (completion-at-point minibuffer-complete minibuffer-complete-word PC-complete PC-complete-word))) nil [56217 56483])
            ("minibuffer-complete-and-exit" function (:user-visible-flag t) nil [56485 59818])
            ("completion--try-word-completion" function (:arguments ("string" "table" "predicate" "point" "md")) nil [59820 64682])
            ("minibuffer-complete-word" function (:user-visible-flag t) nil [64685 65074])
            ("completions-annotations" variable
               (:default-value (quote ((t :inherit italic)))
                :type "face")
                nil [65076 65193])
            ("completions-format" variable (:default-value (quote horizontal)) nil [65195 65612])
            ("completion--insert-strings" function (:arguments ("strings")) nil [65614 69088])
            ("completion-common-substring" variable nil nil [69090 69130])
            ("make-obsolete-variable" code nil nil [69131 69195])
            ("completion-setup-hook" variable nil nil [69197 69534])
            ("completions-first-difference" variable
               (:default-value (quote ((t (:inherit bold))))
                :type "face")
                nil [69536 69705])
            ("completions-common-part" variable
               (:default-value (quote ((t (:inherit default))))
                :type "face")
                nil [69707 70064])
            ("completion-hilit-commonality" function (:arguments ("completions" "prefix-len" "base-size")) nil [70066 71413])
            ("display-completion-list" function (:arguments ("completions" "common-substring")) nil [71415 73331])
            ("completion-extra-properties" variable nil nil [73333 74303])
            ("completion-annotate-function" variable nil nil [74305 75188])
            ("make-obsolete-variable" code nil nil [75189 75303])
            ("completion--done" function (:arguments ("string" "finished" "message")) nil [75305 76121])
            ("minibuffer-completion-help" function (:user-visible-flag t) nil [76123 81190])
            ("minibuffer-hide-completions" function nil nil [81192 81535])
            ("exit-minibuffer" function (:user-visible-flag t) nil [81537 82018])
            ("self-insert-and-exit" function (:user-visible-flag t) nil [82020 82217])
            ("completion-in-region-functions" variable nil nil [82219 82769])
            ("completion-in-region--data" variable nil nil [82771 82810])
            ("completion-in-region-mode-predicate" variable nil nil [82812 83068])
            ("completion-in-region-mode--predicate" variable nil nil [83070 83291])
            ("completion-in-region" function (:arguments ("start" "end" "collection" "predicate")) nil [83293 84681])
            ("completion-in-region-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "\277" (quote completion-help-at-point)) (define-key map "	" (quote completion-at-point)) map)) nil [84683 85035])
            ("completion-in-region--postch" function nil nil [85345 86002])
            ("define-minor-mode" code nil nil [86078 87220])
            ("setq" code nil nil [87347 87475])
            ("completion-at-point-functions" variable (:default-value (quote (tags-completion-at-point-function))) nil [87477 88569])
            ("completion--capf-misbehave-funs" variable nil nil [88571 88819])
            ("completion--capf-safe-funs" variable nil nil [88820 89050])
            ("completion--capf-wrapper" function (:arguments ("fun" "which")) nil [89052 90975])
            ("completion-at-point" function (:user-visible-flag t) nil [90977 91981])
            ("completion-help-at-point" function (:user-visible-flag t) nil [91983 93904])
            ("let" code nil nil [93925 94089])
            ("minibuffer-local-completion-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "	" (quote minibuffer-complete)) (define-key map " " (quote minibuffer-complete-word)) (define-key map "?" (quote minibuffer-completion-help)) map)) nil [94091 94594])
            ("minibuffer-local-must-match-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-completion-map) (define-key map "" (quote minibuffer-complete-and-exit)) (define-key map "
" (quote minibuffer-complete-and-exit)) map)) nil [94596 94925])
            ("minibuffer-local-filename-completion-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map " " nil) map)) nil [94927 95222])
            ("define-obsolete-variable-alias" code nil nil [95224 95349])
            ("minibuffer-local-filename-must-match-map" variable (:default-value (make-sparse-keymap)) nil [95350 95420])
            ("make-obsolete-variable" code nil nil [95421 95498])
            ("let" code nil nil [95500 95663])
            ("minibuffer-inactive-mode-map" variable (:default-value (let ((map (make-keymap))) (suppress-keymap map) (define-key map "e" (quote find-file-other-frame)) (define-key map "f" (quote find-file-other-frame)) (define-key map "b" (quote switch-to-buffer-other-frame)) (define-key map "i" (quote info)) (define-key map "m" (quote mail)) (define-key map "n" (quote make-frame)) (define-key map [mouse-1] (lambda nil (interactive) (with-current-buffer "*Messages*" (goto-char (point-max)) (display-buffer (current-buffer))))) (define-key map [down-mouse-1] (function ignore)) map)) nil [95665 96551])
            ("define-derived-mode" code nil nil [96553 96880])
            ("minibuffer--double-dollars" function (:arguments ("str")) nil [96906 97162])
            ("completion--make-envvar-table" function nil nil [97164 97330])
            ("completion--embedded-envvar-re" variable
               (:constant-flag t
                :default-value (concat "\\(?:^\\|[^$]\\(?:\\$\\$\\)*\\)" "$\\([[:alnum:]_]*\\|{\\([^}]*\\)\\)\\'"))
                nil [97332 97469])
            ("completion--embedded-envvar-table" function (:arguments ("string" "_pred" "action")) nil [97471 99918])
            ("completion-file-name-table" function (:arguments ("string" "pred" "action")) nil [99920 102648])
            ("read-file-name-predicate" variable nil nil [102707 102801])
            ("make-obsolete-variable" code nil nil [102802 102915])
            ("completion--sifn-requote" function (:arguments ("upos" "qstr")) nil [102917 105300])
            ("defalias" code nil nil [105302 105736])
            ("defalias" code nil nil [105738 105961])
            ("read-file-name-function" variable (:default-value (quote read-file-name-default)) nil [105963 106136])
            ("read-file-name-completion-ignore-case" variable (:default-value (if (memq system-type (quote (ms-dos windows-nt darwin cygwin))) t nil)) nil [106138 106384])
            ("insert-default-directory" variable (:default-value t) nil [106386 107446])
            ("declare-function" code nil nil [107528 107648])
            ("read-file-name--defaults" function (:arguments ("dir" "initial")) nil [107650 108840])
            ("read-file-name" function (:arguments ("prompt" "dir" "default-filename" "mustmatch" "initial" "predicate")) nil [108842 111915])
            ("minibuffer-local-filename-syntax" variable (:default-value (let ((table (make-syntax-table)) (punctuation (car (string-to-syntax ".")))) (map-char-table (lambda (c syntax) (when (eq (car syntax) punctuation) (modify-syntax-entry c "_" table))) table) (mapc (lambda (c) (modify-syntax-entry c "." table)) (quote (47 58 92))) table)) nil [111917 112389])
            ("read-file-name-default" function (:arguments ("prompt" "dir" "default-filename" "mustmatch" "initial" "predicate")) nil [112979 120196])
            ("internal-complete-buffer-except" function (:arguments ("buffer")) nil [120198 120697])
            ("completion-emacs21-try-completion" function (:arguments ("string" "table" "pred" "_point")) nil [120757 120976])
            ("completion-emacs21-all-completions" function (:arguments ("string" "table" "pred" "_point")) nil [120978 121192])
            ("completion-emacs22-try-completion" function (:arguments ("string" "table" "pred" "point")) nil [121194 122231])
            ("completion-emacs22-all-completions" function (:arguments ("string" "table" "pred" "point")) nil [122233 122505])
            ("completion--merge-suffix" function (:arguments ("completion" "point" "suffix")) nil [122530 123211])
            ("completion-basic--pattern" function (:arguments ("beforepoint" "afterpoint" "bounds")) nil [123213 123408])
            ("completion-basic-try-completion" function (:arguments ("string" "table" "pred" "point")) nil [123410 124690])
            ("completion-basic-all-completions" function (:arguments ("string" "table" "pred" "point")) nil [124692 125375])
            ("completion-pcm--delim-wild-regex" variable nil nil [125424 125876])
            ("completion-pcm--prepare-delim-re" function (:arguments ("delims")) nil [125878 125994])
            ("completion-pcm-word-delimiters" variable (:default-value "-_./:| ") nil [125996 126658])
            ("completion-pcm-complete-word-inserts-delimiters" variable nil nil [126660 127098])
            ("completion-pcm--pattern-trivial-p" function (:arguments ("pattern")) nil [127100 127385])
            ("completion-pcm--string->pattern" function (:arguments ("string" "point")) nil [127387 129373])
            ("completion-pcm--pattern->regex" function (:arguments ("pattern" "group")) nil [129375 129921])
            ("completion-pcm--all-completions" function (:arguments ("prefix" "pattern" "table" "pred")) nil [129923 131176])
            ("completion-pcm--hilit-commonality" function (:arguments ("pattern" "completions")) nil [131178 131978])
            ("completion-pcm--find-all-completions" function (:arguments ("string" "table" "pred" "point" "filter")) nil [131980 137221])
            ("completion-pcm-all-completions" function (:arguments ("string" "table" "pred" "point")) nil [137223 137523])
            ("completion--sreverse" function (:arguments ("str")) nil [137525 137672])
            ("completion--common-suffix" function (:arguments ("strs")) nil [137674 137857])
            ("completion-pcm--merge-completions" function (:arguments ("strs" "pattern")) nil [137859 142329])
            ("completion-pcm--pattern->string" function (:arguments ("pattern")) nil [142331 142602])
            ("completion-pcm--filename-try-filter" function (:arguments ("all")) nil [143226 143614])
            ("completion-pcm--merge-try" function (:arguments ("pattern" "all" "prefix" "suffix")) nil [143617 144840])
            ("completion-pcm-try-completion" function (:arguments ("string" "table" "pred" "point")) nil [144842 145218])
            ("completion-substring--all-completions" function (:arguments ("string" "table" "pred" "point")) nil [145301 146036])
            ("completion-substring-try-completion" function (:arguments ("string" "table" "pred" "point")) nil [146038 146425])
            ("completion-substring-all-completions" function (:arguments ("string" "table" "pred" "point")) nil [146427 146762])
            ("completion-initials-expand" function (:arguments ("str" "table" "pred")) nil [146857 148506])
            ("completion-initials-all-completions" function (:arguments ("string" "table" "pred" "_point")) nil [148508 148735])
            ("completion-initials-try-completion" function (:arguments ("string" "table" "pred" "_point")) nil [148737 148962])
            ("completing-read-function" variable (:default-value (quote completing-read-default)) nil [148965 149142])
            ("completing-read-default" function (:arguments ("prompt" "collection" "predicate" "require-match" "initial-input" "hist" "def" "inherit-input-method")) nil [149144 150927])
            ("minibuffer-insert-file-name-at-point" function (:user-visible-flag t) nil [150948 151321])
            ("minibuffer" package nil nil [151323 151344]))          
    :file "minibuffer.el"
    :pointmax 151374
    :fsize 151374
    :lastmodtime '(20806 7943 0 0)
    :unmatched-syntax '((close-paren 3878 . 3879) (symbol 3843 . 3860) (open-paren 3842 . 3843))
    )
   (semanticdb-table "startup.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("setq" code nil nil [1115 1151])
            ("command-line-processed" variable nil nil [1153 1238])
            ("initialization" customgroup (:user-visible-flag t) nil [1240 1321])
            ("initial-buffer-choice" variable nil nil [1323 1952])
            ("inhibit-startup-screen" variable nil nil [1954 2207])
            ("defvaralias" code nil nil [2209 2269])
            ("defvaralias" code nil nil [2270 2332])
            ("startup-screen-inhibit-startup-screen" variable nil nil [2334 2384])
            ("inhibit-startup-echo-area-message" variable nil nil [2506 3191])
            ("inhibit-default-init" variable nil nil [3193 3323])
            ("inhibit-startup-buffer-menu" variable nil nil [3325 3489])
            ("command-switch-alist" variable nil nil [3491 3759])
            ("command-line-args-left" variable nil nil [3761 3845])
            ("defvaralias" code nil nil [3847 4083])
            ("internal-make-var-non-special" code nil nil [4084 4121])
            ("argi" variable nil nil [4123 4175])
            ("internal-make-var-non-special" code nil nil [4176 4213])
            ("command-line-functions" variable nil nil [4215 4669])
            ("command-line-default-directory" variable nil nil [4671 4839])
            ("command-line-x-option-alist" variable
               (:constant-flag t
                :default-value (quote (("-bw" 1 x-handle-numeric-switch border-width) ("-d" 1 x-handle-display) ("-display" 1 x-handle-display) ("-name" 1 x-handle-name-switch) ("-title" 1 x-handle-switch title) ("-T" 1 x-handle-switch title) ("-r" 0 x-handle-switch reverse t) ("-rv" 0 x-handle-switch reverse t) ("-reverse" 0 x-handle-switch reverse t) ("-reverse-video" 0 x-handle-switch reverse t) ("-fn" 1 x-handle-switch font) ("-font" 1 x-handle-switch font) ("-fs" 0 x-handle-initial-switch fullscreen fullboth) ("-fw" 0 x-handle-initial-switch fullscreen fullwidth) ("-fh" 0 x-handle-initial-switch fullscreen fullheight) ("-mm" 0 x-handle-initial-switch fullscreen maximized) ("-ib" 1 x-handle-numeric-switch internal-border-width) ("-g" 1 x-handle-geometry) ("-lsp" 1 x-handle-numeric-switch line-spacing) ("-geometry" 1 x-handle-geometry) ("-fg" 1 x-handle-switch foreground-color) ("-foreground" 1 x-handle-switch foreground-color) ("-bg" 1 x-handle-switch background-color) ("-background" 1 x-handle-switch background-color) ("-ms" 1 x-handle-switch mouse-color) ("-nbi" 0 x-handle-switch icon-type nil) ("-iconic" 0 x-handle-iconic) ("-xrm" 1 x-handle-xrm-switch) ("-cr" 1 x-handle-switch cursor-color) ("-vb" 0 x-handle-switch vertical-scroll-bars t) ("-hb" 0 x-handle-switch horizontal-scroll-bars t) ("-bd" 1 x-handle-switch) ("--border-width" 1 x-handle-numeric-switch border-width) ("--display" 1 x-handle-display) ("--name" 1 x-handle-name-switch) ("--title" 1 x-handle-switch title) ("--reverse-video" 0 x-handle-switch reverse t) ("--font" 1 x-handle-switch font) ("--fullscreen" 0 x-handle-initial-switch fullscreen fullboth) ("--fullwidth" 0 x-handle-initial-switch fullscreen fullwidth) ("--fullheight" 0 x-handle-initial-switch fullscreen fullheight) ("--maximized" 0 x-handle-initial-switch fullscreen maximized) ("--internal-border" 1 x-handle-numeric-switch internal-border-width) ("--geometry" 1 x-handle-geometry) ("--foreground-color" 1 x-handle-switch foreground-color) ("--background-color" 1 x-handle-switch background-color) ("--mouse-color" 1 x-handle-switch mouse-color) ("--no-bitmap-icon" 0 x-handle-no-bitmap-icon) ("--iconic" 0 x-handle-iconic) ("--xrm" 1 x-handle-xrm-switch) ("--cursor-color" 1 x-handle-switch cursor-color) ("--vertical-scroll-bars" 0 x-handle-switch vertical-scroll-bars t) ("--line-spacing" 1 x-handle-numeric-switch line-spacing) ("--border-color" 1 x-handle-switch border-color) ("--smid" 1 x-handle-smid) ("--parent-id" 1 x-handle-parent-id))))
                nil [4947 8131])
            ("command-line-ns-option-alist" variable
               (:constant-flag t
                :default-value (quote (("-NSAutoLaunch" 1 ns-ignore-1-arg) ("-NXAutoLaunch" 1 ns-ignore-1-arg) ("-macosx" 0 ignore) ("-NSHost" 1 ns-ignore-1-arg) ("-_NSMachLaunch" 1 ns-ignore-1-arg) ("-MachLaunch" 1 ns-ignore-1-arg) ("-NXOpen" 1 ns-ignore-1-arg) ("-NSOpen" 1 ns-handle-nxopen) ("-NXOpenTemp" 1 ns-ignore-1-arg) ("-NSOpenTemp" 1 ns-handle-nxopentemp) ("-GSFilePath" 1 ns-handle-nxopen) ("-name" 1 x-handle-name-switch) ("-title" 1 x-handle-switch title) ("-T" 1 x-handle-switch title) ("-r" 0 x-handle-switch reverse t) ("-rv" 0 x-handle-switch reverse t) ("-reverse" 0 x-handle-switch reverse t) ("-fn" 1 x-handle-switch font) ("-font" 1 x-handle-switch font) ("-ib" 1 x-handle-numeric-switch internal-border-width) ("-g" 1 x-handle-geometry) ("-geometry" 1 x-handle-geometry) ("-fg" 1 x-handle-switch foreground-color) ("-foreground" 1 x-handle-switch foreground-color) ("-bg" 1 x-handle-switch background-color) ("-background" 1 x-handle-switch background-color) ("-itype" 0 x-handle-switch icon-type t) ("-i" 0 x-handle-switch icon-type t) ("-iconic" 0 x-handle-iconic icon-type t) ("-cr" 1 x-handle-switch cursor-color) ("-vb" 0 x-handle-switch vertical-scroll-bars t) ("-hb" 0 x-handle-switch horizontal-scroll-bars t) ("-bd" 1 x-handle-switch) ("--name" 1 x-handle-name-switch) ("--title" 1 x-handle-switch title) ("--reverse-video" 0 x-handle-switch reverse t) ("--font" 1 x-handle-switch font) ("--internal-border" 1 x-handle-numeric-switch internal-border-width) ("--foreground-color" 1 x-handle-switch foreground-color) ("--background-color" 1 x-handle-switch background-color) ("--mouse-color" 1 x-handle-switch mouse-color) ("--icon-type" 0 x-handle-switch icon-type t) ("--iconic" 0 x-handle-iconic) ("--cursor-color" 1 x-handle-switch cursor-color) ("--vertical-scroll-bars" 0 x-handle-switch vertical-scroll-bars t) ("--border-color" 1 x-handle-switch border-width))))
                nil [8133 11085])
            ("before-init-hook" variable nil nil [11088 11198])
            ("after-init-hook" variable nil nil [11200 11616])
            ("emacs-startup-hook" variable nil nil [11618 11725])
            ("term-setup-hook" variable nil nil [11727 12001])
            ("inhibit-startup-hooks" variable nil nil [12003 12144])
            ("keyboard-type" variable nil nil [12146 12367])
            ("window-setup-hook" variable nil nil [12369 12555])
            ("initial-major-mode" variable (:default-value (quote lisp-interaction-mode)) nil [12557 12726])
            ("init-file-user" variable nil nil [12728 13375])
            ("site-run-file" variable (:default-value (purecopy "site-start")) nil [13377 14647])
            ("mail-host-address" variable nil nil [14649 14878])
            ("user-mail-address" variable (:default-value (if command-line-processed (or (getenv "EMAIL") (concat (user-login-name) "@" (or mail-host-address (system-name)))) "")) nil [14880 15369])
            ("auto-save-list-file-prefix" variable (:default-value (cond ((eq system-type (quote ms-dos)) (concat user-emacs-directory "auto-save.list/_s")) (t (concat user-emacs-directory "auto-save-list/.saves-")))) nil [15371 16124])
            ("emacs-basic-display" variable nil nil [16126 16158])
            ("init-file-debug" variable nil nil [16160 16188])
            ("init-file-had-error" variable nil nil [16190 16286])
            ("normal-top-level-add-subdirs-inode-list" variable nil nil [16288 16340])
            ("no-blinking-cursor" variable nil nil [16342 16373])
            ("default-frame-background-mode" variable nil nil [16375 16413])
            ("pure-space-overflow" variable nil nil [16415 16500])
            ("pure-space-overflow-message" variable (:default-value (purecopy "Warning Warning!!!  Pure space overflow    !!!Warning Warning
(See the node Pure Storage in the Lisp manual for details.)
")) nil [16502 16678])
            ("tutorial-directory" variable (:default-value (file-name-as-directory (expand-file-name "tutorials" data-directory))) nil [16680 16915])
            ("package-subdirectory-regexp" variable
               (:constant-flag t
                :default-value "\\([^.].*?\\)-\\([0-9]+\\(?:[.][0-9]+\\|\\(?:pre\\|beta\\|alpha\\)[0-9]+\\)*\\)")
                nil [16917 17316])
            ("normal-top-level-add-subdirs-to-load-path" function nil nil [17318 19050])
            ("normal-top-level-add-to-load-path" function (:arguments ("dirs")) nil [19052 19821])
            ("normal-top-level" function nil nil [19823 26215])
            ("tty-long-option-alist" variable
               (:constant-flag t
                :default-value (quote (("--name" . "-name") ("--title" . "-T") ("--reverse-video" . "-reverse") ("--foreground-color" . "-fg") ("--background-color" . "-bg") ("--color" . "-color"))))
                nil [26323 26549])
            ("tool-bar-images-pixel-height" variable
               (:constant-flag t
                :default-value 24)
                nil [26551 26641])
            ("tool-bar-originally-present" variable nil nil [26643 26762])
            ("handle-args-function-alist" variable (:default-value (quote ((nil . tty-handle-args)))) nil [26764 27126])
            ("window-system-initialization-alist" variable (:default-value (quote ((nil . ignore)))) nil [27128 27494])
            ("tty-handle-args" function (:arguments ("args")) nil [27496 30254])
            ("declare-function" code nil nil [30256 30350])
            ("declare-function" code nil nil [30351 30410])
            ("declare-function" code nil nil [30411 30455])
            ("server-name" variable nil nil [30457 30477])
            ("server-process" variable nil nil [30478 30501])
            ("command-line" function nil nil [30503 50915])
            ("x-apply-session-resources" function nil nil [50917 51944])
            ("initial-scratch-message" variable (:default-value (purecopy ";; This buffer is for notes you don't want to save, and for Lisp evaluation.
;; If you want to create a file, visit that file with C-x C-f,
;; then enter the text in that file's own buffer.

")) nil [51946 52388])
            ("fancy-startup-text" variable
               (:constant-flag t
                :default-value (\` ((:face (variable-pitch font-lock-comment-face) "Welcome to " :link ("GNU Emacs" (\, (lambda (_button) (browse-url "http://www.gnu.org/software/emacs/"))) "Browse http://www.gnu.org/software/emacs/") ", one component of the " :link (\, (lambda nil (if (eq system-type (quote gnu/linux)) (\` ("GNU/Linux" (\, (lambda (_button) (browse-url "http://www.gnu.org/gnu/linux-and-gnu.html"))) "Browse http://www.gnu.org/gnu/linux-and-gnu.html")) (\` ("GNU" (\, (lambda (_button) (describe-gnu-project))) "Display info on the GNU project"))))) " operating system.

" :face variable-pitch :link ("Emacs Tutorial" (\, (lambda (_button) (help-with-tutorial)))) "	Learn basic keystroke commands" (\, (lambda nil (let* ((en "TUTORIAL") (tut (or (get-language-info current-language-environment (quote tutorial)) en)) (title (with-temp-buffer (insert-file-contents (expand-file-name tut tutorial-directory) nil) (search-forward ".") (buffer-substring (point-min) (1- (point)))))) (if (string= en tut) "" (concat " (" title ")"))))) "
" :link ("Emacs Guided Tour" (\, (lambda (_button) (browse-url "http://www.gnu.org/software/emacs/tour/"))) "Browse http://www.gnu.org/software/emacs/tour/") "	Overview of Emacs features at gnu.org
" :link ("View Emacs Manual" (\, (lambda (_button) (info-emacs-manual)))) "	View the Emacs manual using Info
" :link ("Absence of Warranty" (\, (lambda (_button) (describe-no-warranty)))) "	GNU Emacs comes with " :face (variable-pitch (:slant oblique)) "ABSOLUTELY NO WARRANTY
" :face variable-pitch :link ("Copying Conditions" (\, (lambda (_button) (describe-copying)))) "	Conditions for redistributing and changing Emacs
" :link ("Ordering Manuals" (\, (lambda (_button) (view-order-manuals)))) "	Purchasing printed copies of manuals
" "
"))))
                nil [52563 55280])
            ("fancy-about-text" variable
               (:constant-flag t
                :default-value (\` ((:face (variable-pitch font-lock-comment-face) "This is " :link ("GNU Emacs" (\, (lambda (_button) (browse-url "http://www.gnu.org/software/emacs/"))) "Browse http://www.gnu.org/software/emacs/") ", one component of the " :link (\, (lambda nil (if (eq system-type (quote gnu/linux)) (\` ("GNU/Linux" (\, (lambda (_button) (browse-url "http://www.gnu.org/gnu/linux-and-gnu.html"))) "Browse http://www.gnu.org/gnu/linux-and-gnu.html")) (\` ("GNU" (\, (lambda (_button) (describe-gnu-project))) "Display info on the GNU project."))))) " operating system.
" :face (variable-pitch font-lock-builtin-face) "
" (\, (lambda nil (emacs-version))) "
" :face (variable-pitch (:height 0.8)) (\, (lambda nil emacs-copyright)) "

" :face variable-pitch :link ("Authors" (\, (lambda (_button) (view-file (expand-file-name "AUTHORS" data-directory)) (goto-char (point-min))))) "	Many people have contributed code included in GNU Emacs
" :link ("Contributing" (\, (lambda (_button) (view-file (expand-file-name "CONTRIBUTE" data-directory)) (goto-char (point-min))))) "	How to contribute improvements to Emacs
" "
" :link ("GNU and Freedom" (\, (lambda (_button) (describe-gnu-project)))) "	Why we developed GNU Emacs, and the GNU operating system
" :link ("Absence of Warranty" (\, (lambda (_button) (describe-no-warranty)))) "	GNU Emacs comes with " :face (variable-pitch (:slant oblique)) "ABSOLUTELY NO WARRANTY
" :face variable-pitch :link ("Copying Conditions" (\, (lambda (_button) (describe-copying)))) "	Conditions for redistributing and changing Emacs
" :link ("Getting New Versions" (\, (lambda (_button) (describe-distribution)))) "	How to obtain the latest version of Emacs
" :link ("Ordering Manuals" (\, (lambda (_button) (view-order-manuals)))) "	Buying printed manuals from the FSF
" "
" :link ("Emacs Tutorial" (\, (lambda (_button) (help-with-tutorial)))) "	Learn basic Emacs keystroke commands" (\, (lambda nil (let* ((en "TUTORIAL") (tut (or (get-language-info current-language-environment (quote tutorial)) en)) (title (with-temp-buffer (insert-file-contents (expand-file-name tut tutorial-directory) nil 0 256) (search-forward ".") (buffer-substring (point-min) (1- (point)))))) (if (string= en tut) "" (concat " (" title ")"))))) "
" :link ("Emacs Guided Tour" (\, (lambda (_button) (browse-url "http://www.gnu.org/software/emacs/tour/"))) "Browse http://www.gnu.org/software/emacs/tour/") "	See an overview of Emacs features at gnu.org"))))
                nil [55282 58394])
            ("fancy-splash-screen" customgroup (:user-visible-flag t) nil [58397 58516])
            ("fancy-splash-image" variable nil nil [58518 58715])
            ("splash-screen-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (suppress-keymap map) (set-keymap-parent map button-buffer-map) (define-key map "" (quote scroll-down-command)) (define-key map " " (quote scroll-up-command)) (define-key map "q" (quote exit-splash-screen)) map)) nil [58718 59039])
            ("fancy-splash-insert" function (:arguments ("args")) nil [59110 60506])
            ("declare-function" code nil nil [60508 60577])
            ("fancy-splash-head" function nil nil [60579 62079])
            ("fancy-startup-tail" function (:arguments ("concise")) nil [62081 65191])
            ("exit-splash-screen" function (:user-visible-flag t) nil [65193 65302])
            ("fancy-startup-screen" function (:arguments ("concise")) nil [65304 66672])
            ("fancy-about-screen" function nil nil [66674 67369])
            ("fancy-splash-frame" function nil nil [67371 67829])
            ("use-fancy-splash-screens-p" function nil nil [67831 68628])
            ("normal-splash-screen" function (:arguments ("startup" "concise")) nil [68631 71140])
            ("normal-mouse-startup-screen" function nil nil [71142 72919])
            ("normal-no-mouse-startup-screen" function nil nil [72973 77947])
            ("normal-about-screen" function nil nil [77949 79474])
            ("startup-echo-area-message" function nil nil [79476 79790])
            ("display-startup-echo-area-message" function nil nil [79792 81056])
            ("display-startup-screen" function (:arguments ("concise")) nil [81058 81510])
            ("display-about-screen" function (:user-visible-flag t) nil [81512 81758])
            ("defalias" code nil nil [81760 81805])
            ("defalias" code nil nil [81806 81863])
            ("command-line-1" function (:arguments ("args-left")) nil [81865 92809])
            ("command-line-normalize-file-name" function (:arguments ("file")) nil [92811 93479]))          
    :file "startup.el"
    :pointmax 93506
    :fsize 93505
    :lastmodtime '(20806 7945 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "cus-face.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("defalias" code nil nil [941 972])
            ("custom-declare-face" function (:arguments ("face" "spec" "doc" "args")) nil [997 2361])
            ("custom-face-attributes" variable
               (:constant-flag t
                :default-value (quote ((:family (string :tag "Font Family" :help-echo "Font family or fontset alias name.")) (:foundry (string :tag "Font Foundry" :help-echo "Font foundry name.")) (:width (choice :tag "Width" :help-echo "Font width." :value normal (const :tag "compressed" condensed) (const :tag "condensed" condensed) (const :tag "demiexpanded" semi-expanded) (const :tag "expanded" expanded) (const :tag "extracondensed" extra-condensed) (const :tag "extraexpanded" extra-expanded) (const :tag "medium" normal) (const :tag "narrow" condensed) (const :tag "normal" normal) (const :tag "regular" normal) (const :tag "semicondensed" semi-condensed) (const :tag "semiexpanded" semi-expanded) (const :tag "ultracondensed" ultra-condensed) (const :tag "ultraexpanded" ultra-expanded) (const :tag "wide" extra-expanded))) (:height (choice :tag "Height" :help-echo "Face's font height." :value 1.0 (integer :tag "Height in 1/10 pt") (number :tag "Scale" 1.0))) (:weight (choice :tag "Weight" :help-echo "Font weight." :value normal (const :tag "black" ultra-bold) (const :tag "bold" bold) (const :tag "book" semi-light) (const :tag "demibold" semi-bold) (const :tag "extralight" extra-light) (const :tag "extrabold" extra-bold) (const :tag "heavy" extra-bold) (const :tag "light" light) (const :tag "medium" normal) (const :tag "normal" normal) (const :tag "regular" normal) (const :tag "semibold" semi-bold) (const :tag "semilight" semi-light) (const :tag "ultralight" ultra-light) (const :tag "ultrabold" ultra-bold) (const :tag "thin" thin))) (:slant (choice :tag "Slant" :help-echo "Font slant." :value normal (const :tag "italic" italic) (const :tag "oblique" oblique) (const :tag "normal" normal) (const :tag "roman" roman))) (:underline (choice :tag "Underline" :help-echo "Control text underlining." (const :tag "Off" nil) (list :tag "On" :value (:color foreground-color :style line) (const :format "" :value :color) (choice :tag "Color" (const :tag "Foreground Color" foreground-color) color) (const :format "" :value :style) (choice :tag "Style" (const :tag "Line" line) (const :tag "Wave" wave)))) (lambda (real-value) (and real-value (let ((color (or (and (consp real-value) (plist-get real-value :color)) (and (stringp real-value) real-value) (quote foreground-color))) (style (or (and (consp real-value) (plist-get real-value :style)) (quote line)))) (list :color color :style style)))) (lambda (cus-value) (and cus-value (let ((color (plist-get cus-value :color)) (style (plist-get cus-value :style))) (cond ((eq style (quote line)) (if (eq color (quote foreground-color)) t color)) (t (\` (:color (\, color) :style (\, style))))))))) (:overline (choice :tag "Overline" :help-echo "Control text overlining." (const :tag "Off" nil) (const :tag "On" t) (color :tag "Colored"))) (:strike-through (choice :tag "Strike-through" :help-echo "Control text strike-through." (const :tag "Off" nil) (const :tag "On" t) (color :tag "Colored"))) (:box (choice :tag "Box around text" :help-echo "Control box around text." (const :tag "Off" nil) (list :tag "Box" :value (:line-width 2 :color "grey75" :style released-button) (const :format "" :value :line-width) (integer :tag "Width") (const :format "" :value :color) (choice :tag "Color" (const :tag "*" nil) color) (const :format "" :value :style) (choice :tag "Style" (const :tag "Raised" released-button) (const :tag "Sunken" pressed-button) (const :tag "None" nil)))) (lambda (real-value) (and real-value (let ((lwidth (or (and (consp real-value) (plist-get real-value :line-width)) (and (integerp real-value) real-value) 1)) (color (or (and (consp real-value) (plist-get real-value :color)) (and (stringp real-value) real-value) nil)) (style (and (consp real-value) (plist-get real-value :style)))) (list :line-width lwidth :color color :style style)))) (lambda (cus-value) (and cus-value (let ((lwidth (plist-get cus-value :line-width)) (color (plist-get cus-value :color)) (style (plist-get cus-value :style))) (cond ((and (null color) (null style)) lwidth) ((and (null lwidth) (null style)) color) (t (nconc (and lwidth (\` (:line-width (\, lwidth)))) (and color (\` (:color (\, color)))) (and style (\` (:style (\, style))))))))))) (:inverse-video (choice :tag "Inverse-video" :help-echo "Control whether text should be in inverse-video." (const :tag "Off" nil) (const :tag "On" t))) (:foreground (color :tag "Foreground" :help-echo "Set foreground color (name or #RRGGBB hex spec).")) (:background (color :tag "Background" :help-echo "Set background color (name or #RRGGBB hex spec).")) (:stipple (choice :tag "Stipple" :help-echo "Background bit-mask" (const :tag "None" nil) (file :tag "File" :help-echo "Name of bitmap file." :must-match t))) (:inherit (repeat :tag "Inherit" :help-echo "List of faces to inherit attributes from." (face :Tag "Face" default)) (lambda (real-value) (cond ((or (null real-value) (eq real-value (quote unspecified))) nil) ((symbolp real-value) (list real-value)) (t real-value))) (lambda (cus-value) (if (and (consp cus-value) (null (cdr cus-value))) (car cus-value) cus-value))))))
                nil [2385 9741])
            ("custom-face-attributes-get" function (:arguments ("face" "frame")) nil [9743 10378])
            ("custom-set-faces" function (:arguments ("args")) nil [10399 11140])
            ("custom-theme-set-faces" function (:arguments ("theme" "args")) nil [11142 13589])
            ("custom-theme-reset-faces" function (:arguments ("theme" "args")) nil [13751 14107])
            ("custom-reset-faces" function (:arguments ("args")) nil [14109 14425])
            ("cus-face" package nil nil [14441 14460]))          
    :file "cus-face.el"
    :pointmax 14488
    :fsize 14487
    :lastmodtime '(20806 7940 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "window.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("internal--before-save-selected-window" function nil nil [946 1979])
            ("internal--after-save-selected-window" function (:arguments ("state")) nil [1981 2278])
            ("save-selected-window" function (:arguments ("body")) nil [2280 3318])
            ("temp-buffer-window-setup-hook" variable nil nil [3320 3521])
            ("temp-buffer-window-show-hook" variable nil nil [3523 3744])
            ("temp-buffer-window-setup" function (:arguments ("buffer-or-name")) nil [3746 4360])
            ("temp-buffer-window-show" function (:arguments ("buffer" "action")) nil [4362 5606])
            ("with-temp-buffer-window" function (:arguments ("buffer-or-name" "action" "quit-function" "body")) nil [5662 8110])
            ("window-right" function (:arguments ("window")) nil [8417 8629])
            ("window-left" function (:arguments ("window")) nil [8631 8841])
            ("window-child" function (:arguments ("window")) nil [8843 8998])
            ("window-child-count" function (:arguments ("window")) nil [9000 9296])
            ("window-last-child" function (:arguments ("window")) nil [9298 9565])
            ("window-normalize-buffer" function (:arguments ("buffer-or-name")) nil [9567 10061])
            ("window-normalize-frame" function (:arguments ("frame")) nil [10063 10316])
            ("window-normalize-window" function (:arguments ("window" "live-only")) nil [10318 10873])
            ("ignore-window-parameters" variable nil nil [10875 11219])
            ("window-safe-min-height" variable
               (:constant-flag t
                :default-value 1)
                nil [11221 11343])
            ("window-min-height" variable (:default-value 4) nil [11345 11978])
            ("window-safe-min-width" variable
               (:constant-flag t
                :default-value 2)
                nil [11980 12103])
            ("window-min-width" variable (:default-value 10) nil [12105 12748])
            ("window-combined-p" function (:arguments ("window" "horizontal")) nil [12750 13380])
            ("window-combinations" function (:arguments ("window" "horizontal")) nil [13382 14489])
            ("walk-window-tree-1" function (:arguments ("fun" "walk-window-tree-window" "any" "sub-only")) nil [14491 15203])
            ("walk-window-tree" function (:arguments ("fun" "frame" "any" "minibuf")) nil [15205 16428])
            ("walk-window-subtree" function (:arguments ("fun" "window" "any")) nil [16430 17081])
            ("window-with-parameter" function (:arguments ("parameter" "value" "frame" "any" "minibuf")) nil [17083 18041])
            ("window-atom-root" function (:arguments ("window")) nil [18063 18483])
            ("window-make-atom" function (:arguments ("window")) nil [18485 18823])
            ("display-buffer-in-atom-window" function (:arguments ("buffer" "alist")) nil [18825 20516])
            ("window--atom-check-1" function (:arguments ("window")) nil [20518 21406])
            ("window--atom-check" function (:arguments ("frame")) nil [21408 21796])
            ("window-sides" variable (:default-value (quote (left top right bottom))) nil [21815 21879])
            ("window-sides-vertical" variable nil nil [21881 22087])
            ("window-sides-slots" variable (:default-value (quote (nil nil nil nil))) nil [22089 23510])
            ("window--major-non-side-window" function (:arguments ("frame")) nil [23512 24560])
            ("window--major-side-window" function (:arguments ("side")) nil [24562 26232])
            ("display-buffer-in-major-side-window" function (:arguments ("buffer" "side" "slot" "alist")) nil [26234 28359])
            ("delete-side-window" function (:arguments ("window")) nil [28361 28579])
            ("display-buffer-in-side-window" function (:arguments ("buffer" "alist")) nil [28581 33622])
            ("window--side-check" function (:arguments ("frame")) nil [33624 36112])
            ("window--check" function (:arguments ("frame")) nil [36114 36293])
            ("window-size-fixed" variable nil nil [36313 36750])
            ("make-variable-buffer-local" code nil nil [36751 36798])
            ("window--size-ignore-p" function (:arguments ("window" "ignore")) nil [36800 36976])
            ("window-min-size" function (:arguments ("window" "horizontal" "ignore")) nil [36978 37790])
            ("window--min-size-1" function (:arguments ("window" "horizontal" "ignore")) nil [37792 40292])
            ("window-sizable" function (:arguments ("window" "delta" "horizontal" "ignore")) nil [40294 41959])
            ("window-sizable-p" function (:arguments ("window" "delta" "horizontal" "ignore")) nil [41961 42432])
            ("window--size-fixed-1" function (:arguments ("window" "horizontal")) nil [42434 43574])
            ("window-size-fixed-p" function (:arguments ("window" "horizontal")) nil [43576 44066])
            ("window--min-delta-1" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup")) nil [44068 45390])
            ("window-min-delta" function (:arguments ("window" "horizontal" "ignore" "trail" "noup" "nodown")) nil [45392 47360])
            ("window--max-delta-1" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup")) nil [47362 48629])
            ("window-max-delta" function (:arguments ("window" "horizontal" "ignore" "trail" "noup" "nodown")) nil [48631 50340])
            ("window--resizable" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "nodown")) nil [50388 52421])
            ("window--resizable-p" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "nodown")) nil [52423 52975])
            ("window-resizable" function (:arguments ("window" "delta" "horizontal" "ignore")) nil [52977 54297])
            ("window-total-size" function (:arguments ("window" "horizontal")) nil [54299 54732])
            ("defalias" code nil nil [54789 54835])
            ("window-full-height-p" function (:arguments ("window")) nil [54868 55302])
            ("window-full-width-p" function (:arguments ("window")) nil [55304 55738])
            ("window-body-size" function (:arguments ("window" "horizontal")) nil [55740 56164])
            ("defalias" code nil nil [56221 56264])
            ("window-current-scroll-bars" function (:arguments ("window")) nil [56266 57186])
            ("walk-windows" function (:arguments ("fun" "minibuf" "all-frames")) nil [57188 59088])
            ("window-at-side-p" function (:arguments ("window" "side")) nil [59090 59655])
            ("window-at-side-list" function (:arguments ("frame" "side")) nil [59657 60175])
            ("window--in-direction-2" function (:arguments ("window" "posn" "horizontal")) nil [60177 60567])
            ("window-in-direction" function (:arguments ("direction" "window" "ignore")) nil [60858 64761])
            ("get-window-with-predicate" function (:arguments ("predicate" "minibuf" "all-frames" "default")) nil [64763 66384])
            ("defalias" code nil nil [66386 66436])
            ("get-lru-window" function (:arguments ("all-frames" "dedicated" "not-selected")) nil [66438 68089])
            ("get-mru-window" function (:arguments ("all-frames" "dedicated" "not-selected")) nil [68091 69361])
            ("get-largest-window" function (:arguments ("all-frames" "dedicated" "not-selected")) nil [69363 70655])
            ("get-buffer-window-list" function (:arguments ("buffer-or-name" "minibuf" "all-frames")) nil [70657 72188])
            ("minibuffer-window-active-p" function (:arguments ("window")) nil [72190 72340])
            ("count-windows" function (:arguments ("minibuf")) nil [72342 72635])
            ("window--resize-reset" function (:arguments ("frame" "horizontal")) nil [72660 73102])
            ("window--resize-reset-1" function (:arguments ("window" "horizontal")) nil [73104 73566])
            ("window--resize-mini-window" function (:arguments ("window" "delta")) nil [73695 74799])
            ("window-resize" function (:arguments ("window" "delta" "horizontal" "ignore")) nil [74801 78076])
            ("window--resize-child-windows-skip-p" function (:arguments ("window")) nil [78078 78255])
            ("window--resize-child-windows-normal" function (:arguments ("parent" "horizontal" "window" "this-delta" "trail" "other-delta")) nil [78257 81775])
            ("window--resize-child-windows" function (:arguments ("parent" "delta" "horizontal" "window" "ignore" "trail" "edge")) nil [81777 88157])
            ("window--resize-siblings" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "edge")) nil [88159 92292])
            ("window--resize-this-window" function (:arguments ("window" "delta" "horizontal" "ignore" "add" "trail" "edge")) nil [92294 94260])
            ("window--resize-root-window" function (:arguments ("window" "delta" "horizontal" "ignore")) nil [94262 94955])
            ("window--resize-root-window-vertically" function (:arguments ("window" "delta")) nil [94957 96573])
            ("adjust-window-trailing-edge" function (:arguments ("window" "delta" "horizontal")) nil [96575 101477])
            ("enlarge-window" function
               (:user-visible-flag t
                :arguments ("delta" "horizontal"))
                nil [101479 102766])
            ("shrink-window" function
               (:user-visible-flag t
                :arguments ("delta" "horizontal"))
                nil [102768 104111])
            ("maximize-window" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [104113 104474])
            ("minimize-window" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [104476 104845])
            ("frame-root-window-p" function (:arguments ("window")) nil [104848 104987])
            ("window--subtree" function (:arguments ("window" "next")) nil [104989 105712])
            ("window-tree" function (:arguments ("frame")) nil [105714 106609])
            ("other-window" function
               (:user-visible-flag t
                :arguments ("count" "all-frames"))
                nil [106612 109243])
            ("one-window-p" function (:arguments ("nomini" "all-frames")) nil [109379 110652])
            ("window-deletable-p" function (:arguments ("window")) nil [110677 111723])
            ("window--in-subtree-p" function (:arguments ("window" "root")) nil [111725 112028])
            ("delete-window" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [112030 115368])
            ("delete-other-windows" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [115370 117821])
            ("delete-other-windows-vertically" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [117823 118449])
            ("record-window-buffer" function (:arguments ("window")) nil [120185 121560])
            ("unrecord-window-buffer" function (:arguments ("window" "buffer")) nil [121562 122061])
            ("set-window-buffer-start-and-point" function (:arguments ("window" "buffer" "start" "point")) nil [122063 122990])
            ("switch-to-visible-buffer" variable (:default-value t) nil [122992 123540])
            ("switch-to-prev-buffer" function
               (:user-visible-flag t
                :arguments ("window" "bury-or-kill"))
                nil [123542 128851])
            ("switch-to-next-buffer" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [128853 132210])
            ("get-next-valid-buffer" function (:arguments ("list" "buffer" "visible-ok" "frame")) nil [132212 133208])
            ("last-buffer" function (:arguments ("buffer" "visible-ok" "frame")) nil [133210 133937])
            ("frame-auto-hide-function" variable (:default-value (function iconify-frame)) nil [133939 134457])
            ("window--delete" function (:arguments ("window" "dedicated-only" "kill")) nil [134459 135299])
            ("bury-buffer" function
               (:user-visible-flag t
                :arguments ("buffer-or-name"))
                nil [135301 136434])
            ("unbury-buffer" function (:user-visible-flag t) nil [136436 136561])
            ("next-buffer" function (:user-visible-flag t) nil [136563 136865])
            ("previous-buffer" function (:user-visible-flag t) nil [136867 137177])
            ("delete-windows-on" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "frame"))
                nil [137179 138933])
            ("replace-buffer-in-windows" function
               (:user-visible-flag t
                :arguments ("buffer-or-name"))
                nil [138935 139967])
            ("quit-restore-window" function (:arguments ("window" "bury-or-kill")) nil [139969 144500])
            ("quit-window" function
               (:user-visible-flag t
                :arguments ("kill" "window"))
                nil [144502 145102])
            ("quit-windows-on" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "kill" "frame"))
                nil [145104 146068])
            ("window-split-min-size" function (:arguments ("horizontal")) nil [146094 146395])
            ("split-window" function
               (:user-visible-flag t
                :arguments ("window" "size" "side"))
                nil [146397 156777])
            ("split-window-keep-point" variable (:default-value t) nil [156854 157228])
            ("split-window-below" function
               (:user-visible-flag t
                :arguments ("size"))
                nil [157230 159485])
            ("defalias" code nil nil [159487 159542])
            ("split-window-right" function
               (:user-visible-flag t
                :arguments ("size"))
                nil [159544 160753])
            ("defalias" code nil nil [160755 160812])
            ("balance-windows-2" function (:arguments ("window" "horizontal")) nil [161315 163870])
            ("balance-windows-1" function (:arguments ("window" "horizontal")) nil [163872 164298])
            ("balance-windows" function
               (:user-visible-flag t
                :arguments ("window-or-frame"))
                nil [164300 165289])
            ("window-fixed-size-p" function (:arguments ("window" "direction")) nil [165291 165721])
            ("window-area-factor" variable (:default-value 1) nil [165768 165937])
            ("make-variable-buffer-local" code nil nil [165938 165986])
            ("balance-windows-area-adjust" function (:arguments ("window" "delta" "horizontal")) nil [165988 166479])
            ("balance-windows-area" function (:user-visible-flag t) nil [166481 170661])
            ("window--state-get-1" function (:arguments ("window" "writable")) nil [170731 173356])
            ("window-state-get" function (:arguments ("window" "writable")) nil [173358 175051])
            ("window-state-put-list" variable nil nil [175053 175131])
            ("window--state-put-1" function (:arguments ("state" "window" "ignore" "totals")) nil [175133 177487])
            ("window--state-put-2" function (:arguments ("ignore")) nil [177489 180633])
            ("window-state-put" function (:arguments ("state" "window" "ignore")) nil [180635 183219])
            ("display-buffer-record-window" function (:arguments ("type" "window" "buffer")) nil [183222 185375])
            ("display-buffer-function" variable nil nil [185377 185933])
            ("make-obsolete-variable" code nil nil [185935 186016])
            ("pop-up-frame-alist" variable nil nil [186197 186813])
            ("pop-up-frame-function" variable (:default-value (lambda nil (make-frame pop-up-frame-alist))) nil [186815 187144])
            ("special-display-buffer-names" variable nil nil [187146 189736])
            ("make-obsolete-variable" code nil nil [189737 189820])
            ("put" code nil nil [189821 189880])
            ("special-display-regexps" variable nil nil [189882 192524])
            ("make-obsolete-variable" code nil nil [192525 192603])
            ("put" code nil nil [192604 192658])
            ("special-display-p" function (:arguments ("buffer-name")) nil [192660 193555])
            ("special-display-frame-alist" variable (:default-value (quote ((height . 14) (width . 80) (unsplittable . t)))) nil [193557 194172])
            ("make-obsolete-variable" code nil nil [194173 194255])
            ("special-display-popup-frame" function (:arguments ("buffer" "args")) nil [194257 196277])
            ("special-display-function" variable (:default-value (quote special-display-popup-frame)) nil [196279 197077])
            ("make-obsolete-variable" code nil nil [197078 197157])
            ("same-window-buffer-names" variable nil nil [197159 197731])
            ("same-window-regexps" variable nil nil [197733 198321])
            ("same-window-p" function (:arguments ("buffer-name")) nil [198323 199294])
            ("pop-up-frames" variable nil nil [199296 199708])
            ("display-buffer-reuse-frames" variable nil nil [199710 199939])
            ("make-obsolete-variable" code nil nil [199941 200069])
            ("pop-up-windows" variable (:default-value t) nil [200071 200195])
            ("split-window-preferred-function" variable (:default-value (quote split-window-sensibly)) nil [200197 201580])
            ("split-height-threshold" variable (:default-value 80) nil [201582 202108])
            ("split-width-threshold" variable (:default-value 160) nil [202110 202498])
            ("window-splittable-p" function (:arguments ("window" "horizontal")) nil [202500 204777])
            ("split-window-sensibly" function (:arguments ("window")) nil [204779 207164])
            ("window--try-to-split-window" function (:arguments ("window" "alist")) nil [207166 208276])
            ("window--frame-usable-p" function (:arguments ("frame")) nil [208278 209220])
            ("even-window-heights" variable (:default-value t) nil [209222 209538])
            ("window--even-window-heights" function (:arguments ("window")) nil [209540 210404])
            ("window--display-buffer" function (:arguments ("buffer" "window" "type" "alist" "dedicated")) nil [210406 212439])
            ("window--maybe-raise-frame" function (:arguments ("frame")) nil [212441 212865])
            ("display-buffer-mark-dedicated" variable nil nil [213195 213404])
            ("display-buffer--action-function-custom-type" variable
               (:constant-flag t
                :default-value (quote (choice :tag "Function" (const :tag "--" ignore) (const display-buffer-reuse-window) (const display-buffer-pop-up-window) (const display-buffer-same-window) (const display-buffer-pop-up-frame) (const display-buffer-use-some-window) (function :tag "Other function"))))
                nil [213406 213836])
            ("display-buffer--action-custom-type" variable
               (:constant-flag t
                :default-value (\` (cons :tag "Action" (choice :tag "Action functions" (\, display-buffer--action-function-custom-type) (repeat :tag "List of functions" (\, display-buffer--action-function-custom-type))) (alist :tag "Action arguments" :key-type symbol :value-type (sexp :tag "Value")))))
                nil [213838 214213])
            ("display-buffer-overriding-action" variable (:default-value (quote (nil))) nil [214215 214550])
            ("put" code nil nil [214551 214614])
            ("display-buffer-alist" variable nil nil [214616 215627])
            ("display-buffer-base-action" variable (:default-value (quote (nil))) nil [215629 216053])
            ("display-buffer-fallback-action" variable
               (:constant-flag t
                :default-value (quote ((display-buffer--maybe-same-window display-buffer-reuse-window display-buffer--maybe-pop-up-frame-or-window display-buffer-use-some-window display-buffer-pop-up-frame))))
                nil [216055 216600])
            ("put" code nil nil [216601 216662])
            ("display-buffer-assq-regexp" function (:arguments ("buffer-name" "alist" "action")) nil [216664 217087])
            ("display-buffer--same-window-action" variable (:default-value (quote (display-buffer-same-window (inhibit-same-window)))) nil [217089 217261])
            ("put" code nil nil [217262 217327])
            ("display-buffer--other-frame-action" variable (:default-value (quote ((display-buffer-reuse-window display-buffer-pop-up-frame) (reusable-frames . 0) (inhibit-same-window . t)))) nil [217329 217559])
            ("put" code nil nil [217560 217625])
            ("display-buffer" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "action" "frame"))
                nil [217627 222897])
            ("display-buffer-other-frame" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [222899 223221])
            ("display-buffer-same-window" function (:arguments ("buffer" "alist")) nil [223263 223748])
            ("display-buffer--maybe-same-window" function (:arguments ("buffer" "alist")) nil [223750 224091])
            ("display-buffer-reuse-window" function (:arguments ("buffer" "alist")) nil [224093 225739])
            ("display-buffer--special-action" function (:arguments ("buffer")) nil [225741 226492])
            ("display-buffer-pop-up-frame" function (:arguments ("buffer" "alist")) nil [226494 227373])
            ("display-buffer-pop-up-window" function (:arguments ("buffer" "alist")) nil [227375 228689])
            ("display-buffer--maybe-pop-up-frame-or-window" function (:arguments ("buffer" "alist")) nil [228691 229277])
            ("display-buffer-below-selected" function (:arguments ("buffer" "alist")) nil [229279 229909])
            ("display-buffer-at-bottom" function (:arguments ("buffer" "alist")) nil [229911 230931])
            ("display-buffer-in-previous-window" function (:arguments ("buffer" "alist")) nil [230933 233226])
            ("display-buffer-use-some-window" function (:arguments ("buffer" "alist")) nil [233228 234493])
            ("pop-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "action" "norecord"))
                nil [234529 236007])
            ("pop-to-buffer-same-window" function (:arguments ("buffer" "norecord")) nil [236009 236815])
            ("read-buffer-to-switch" function (:arguments ("prompt")) nil [236817 237961])
            ("window-normalize-buffer-to-switch-to" function (:arguments ("buffer-or-name")) nil [237963 238519])
            ("switch-to-buffer-preserve-window-point" variable nil nil [238521 239410])
            ("switch-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "norecord" "force-same-window"))
                nil [239412 242163])
            ("switch-to-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "norecord"))
                nil [242165 243197])
            ("switch-to-buffer-other-frame" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "norecord"))
                nil [243199 244211])
            ("set-window-text-height" function (:arguments ("window" "height")) nil [244214 245187])
            ("enlarge-window-horizontally" function
               (:user-visible-flag t
                :arguments ("delta"))
                nil [245189 245404])
            ("shrink-window-horizontally" function
               (:user-visible-flag t
                :arguments ("delta"))
                nil [245406 245625])
            ("count-screen-lines" function (:arguments ("beg" "end" "count-final-newline" "window")) nil [245627 247028])
            ("window-buffer-height" function (:arguments ("window")) nil [247030 247508])
            ("fit-frame-to-buffer" variable nil nil [247562 247896])
            ("fit-frame-to-buffer-bottom-margin" variable (:default-value 4) nil [247898 248422])
            ("fit-frame-to-buffer" function
               (:user-visible-flag t
                :arguments ("frame" "max-height" "min-height"))
                nil [248424 251219])
            ("fit-window-to-buffer" function
               (:user-visible-flag t
                :arguments ("window" "max-height" "min-height"))
                nil [251221 255366])
            ("window-safely-shrinkable-p" function (:arguments ("window")) nil [255368 255749])
            ("shrink-window-if-larger-than-buffer" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [255751 256857])
            ("kill-buffer-and-window" function (:user-visible-flag t) nil [256860 257682])
            ("recenter-last-op" variable nil nil [257686 257838])
            ("recenter-positions" variable (:default-value (quote (middle top bottom))) nil [257840 258700])
            ("recenter-top-bottom" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [258702 259849])
            ("define-key" code nil nil [259851 259903])
            ("move-to-window-line-top-bottom" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [259905 261039])
            ("define-key" code nil nil [261041 261104])
            ("scroll-error-top-bottom" variable nil nil [261274 261718])
            ("scroll-up-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [261720 262783])
            ("put" code nil nil [262785 262827])
            ("scroll-down-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [262829 263896])
            ("put" code nil nil [263898 263942])
            ("scroll-up-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [264012 264295])
            ("put" code nil nil [264297 264336])
            ("scroll-down-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [264338 264623])
            ("put" code nil nil [264625 264666])
            ("scroll-other-window-down" function
               (:user-visible-flag t
                :arguments ("lines"))
                nil [264670 265065])
            ("beginning-of-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [265067 265751])
            ("end-of-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [265753 266256])
            ("mouse-autoselect-window-timer" variable nil nil [266259 266349])
            ("mouse-autoselect-window-position" variable nil nil [266351 266462])
            ("mouse-autoselect-window-window" variable nil nil [266464 266565])
            ("mouse-autoselect-window-state" variable nil nil [266567 266864])
            ("mouse-autoselect-window-cancel" function (:arguments ("force")) nil [266866 267587])
            ("mouse-autoselect-window-start" function (:arguments ("mouse-position" "window" "suspend")) nil [267589 268417])
            ("mouse-autoselect-window-select" function nil nil [268419 271492])
            ("handle-select-window" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [271494 273015])
            ("truncated-partial-width-window-p" function (:arguments ("window")) nil [273017 273695])
            ("define-key" code nil nil [273785 273826])
            ("define-key" code nil nil [273827 273875])
            ("define-key" code nil nil [273876 273922])
            ("define-key" code nil nil [273923 273969])
            ("define-key" code nil nil [273970 274010])
            ("define-key" code nil nil [274011 274053])
            ("define-key" code nil nil [274054 274109])
            ("define-key" code nil nil [274110 274164])
            ("define-key" code nil nil [274165 274228])
            ("define-key" code nil nil [274229 274272])
            ("define-key" code nil nil [274273 274325]))          
    :file "window.el"
    :pointmax 274351
    :fsize 274350
    :lastmodtime '(20806 7946 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "bindings.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("make-mode-line-mouse-map" function (:arguments ("mouse" "function")) nil [912 1247])
            ("mode-line-toggle-read-only" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [1250 1448])
            ("mode-line-toggle-modified" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [1450 1709])
            ("mode-line-widen" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [1711 1901])
            ("mode-line-input-method-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mode-line mouse-2] (lambda (e) (interactive "e") (with-selected-window (posn-window (event-start e)) (toggle-input-method) (force-mode-line-update)))) (define-key map [mode-line mouse-3] (lambda (e) (interactive "e") (with-selected-window (posn-window (event-start e)) (describe-current-input-method)))) (purecopy map))) nil [1903 2348])
            ("mode-line-coding-system-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mode-line mouse-1] (lambda (e) (interactive "e") (with-selected-window (posn-window (event-start e)) (when (and enable-multibyte-characters buffer-file-coding-system) (describe-coding-system buffer-file-coding-system))))) (define-key map [mode-line mouse-3] (lambda (e) (interactive "e") (with-selected-window (posn-window (event-start e)) (call-interactively (quote set-buffer-file-coding-system))))) (purecopy map))) nil [2350 2958])
            ("mode-line-change-eol" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [2960 3310])
            ("mode-line-eol-desc-cache" variable nil nil [3312 3349])
            ("mode-line-eol-desc" function nil nil [3351 4230])
            ("mode-line-default-help-echo" variable (:default-value "mouse-1: Select (drag to resize)
mouse-2: Make current window occupy the whole frame
mouse-3: Remove current window from display") nil [4258 4798])
            ("mode-line-front-space" variable (:default-value (quote (:eval (if (display-graphic-p) " " "-")))) nil [4800 5085])
            ("put" code nil nil [5086 5138])
            ("mode-line-mule-info-help-echo" function (:arguments ("window" "_object" "_point")) nil [5140 5592])
            ("mode-line-mule-info" variable (:default-value (\` ("" (current-input-method (:propertize ("" current-input-method-title) help-echo (concat (\, (purecopy "Current input method: ")) current-input-method (\, (purecopy "
mouse-2: Disable input method
mouse-3: Describe current input method"))) local-map (\, mode-line-input-method-map) mouse-face mode-line-highlight)) (\, (propertize "%z" (quote help-echo) (quote mode-line-mule-info-help-echo) (quote mouse-face) (quote mode-line-highlight) (quote local-map) mode-line-coding-system-map)) (:eval (mode-line-eol-desc))))) nil [5594 6516])
            ("put" code nil nil [6532 6582])
            ("make-variable-buffer-local" code nil nil [6583 6632])
            ("mode-line-client" variable (:default-value (\` ("" (:propertize ("" (:eval (if (frame-parameter nil (quote client)) "@" ""))) help-echo (\, (purecopy "emacsclient frame")))))) nil [6634 6845])
            ("put" code nil nil [6861 6908])
            ("mode-line-read-only-help-echo" function (:arguments ("window" "_object" "_point")) nil [6910 7185])
            ("mode-line-modified-help-echo" function (:arguments ("window" "_object" "_point")) nil [7187 7447])
            ("mode-line-modified" variable (:default-value (list (propertize "%1*" (quote help-echo) (quote mode-line-read-only-help-echo) (quote local-map) (purecopy (make-mode-line-mouse-map (quote mouse-1) (function mode-line-toggle-read-only))) (quote mouse-face) (quote mode-line-highlight)) (propertize "%1+" (quote help-echo) (quote mode-line-modified-help-echo) (quote local-map) (purecopy (make-mode-line-mouse-map (quote mouse-1) (function mode-line-toggle-modified))) (quote mouse-face) (quote mode-line-highlight)))) nil [7449 7967])
            ("put" code nil nil [7983 8032])
            ("make-variable-buffer-local" code nil nil [8033 8081])
            ("mode-line-remote" variable (:default-value (list (propertize "%1@" (quote mouse-face) (quote mode-line-highlight) (quote help-echo) (purecopy (lambda (window _object _point) (format "%s" (with-selected-window window (concat (if (file-remote-p default-directory) "Current directory is remote: " "Current directory is local: ") default-directory)))))))) nil [8083 8511])
            ("put" code nil nil [8527 8574])
            ("make-variable-buffer-local" code nil nil [8575 8621])
            ("mode-line-frame-control" function nil nil [8691 8928])
            ("mode-line-frame-identification" variable (:default-value (quote (:eval (mode-line-frame-control)))) nil [9038 9167])
            ("put" code nil nil [9183 9244])
            ("mode-line-process" variable nil nil [9246 9405])
            ("put" code nil nil [9421 9469])
            ("make-variable-buffer-local" code nil nil [9470 9517])
            ("bindings--define-key" function (:arguments ("map" "key" "item")) nil [9519 10270])
            ("mode-line-mode-menu" variable (:default-value (make-sparse-keymap "Minor Modes")) nil [10272 10381])
            ("mode-line-major-mode-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (bindings--define-key map [mode-line down-mouse-1] (\` (menu-item "Menu Bar" ignore :filter (\, (lambda (_) (mouse-menu-major-mode-map)))))) (define-key map [mode-line mouse-2] (quote describe-mode)) (define-key map [mode-line down-mouse-3] mode-line-mode-menu) map)) nil [10383 10774])
            ("mode-line-minor-mode-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mode-line down-mouse-1] (quote mouse-minor-mode-menu)) (define-key map [mode-line mouse-2] (quote mode-line-minor-mode-help)) (define-key map [mode-line down-mouse-3] mode-line-mode-menu) (define-key map [header-line down-mouse-3] mode-line-mode-menu) map)) nil [10776 11166])
            ("mode-line-modes" variable (:default-value (let ((recursive-edit-help-echo "Recursive edit, type C-M-c to get out")) (list (propertize "%[" (quote help-echo) recursive-edit-help-echo) "(" (\` (:propertize ("" mode-name) help-echo "Major mode
mouse-1: Display major mode menu
mouse-2: Show help for major mode
mouse-3: Toggle minor modes" mouse-face mode-line-highlight local-map (\, mode-line-major-mode-keymap))) (quote ("" mode-line-process)) (\` (:propertize ("" minor-mode-alist) mouse-face mode-line-highlight help-echo "Minor mode
mouse-1: Display minor mode menu
mouse-2: Show help for minor mode
mouse-3: Toggle minor modes" local-map (\, mode-line-minor-mode-keymap))) (propertize "%n" (quote help-echo) "mouse-2: Remove narrowing from buffer" (quote mouse-face) (quote mode-line-highlight) (quote local-map) (make-mode-line-mouse-map (quote mouse-2) (function mode-line-widen))) ")" (propertize "%]" (quote help-echo) recursive-edit-help-echo) " "))) nil [11168 12178])
            ("put" code nil nil [12179 12225])
            ("mode-line-column-line-number-mode-map" variable (:default-value (let ((map (make-sparse-keymap)) (menu-map (make-sparse-keymap "Toggle Line and Column Number Display"))) (bindings--define-key menu-map [line-number-mode] (quote (menu-item "Display Line Numbers" line-number-mode :help "Toggle displaying line numbers in the mode-line" :button (:toggle . line-number-mode)))) (bindings--define-key menu-map [column-number-mode] (quote (menu-item "Display Column Numbers" column-number-mode :help "Toggle displaying column numbers in the mode-line" :button (:toggle . column-number-mode)))) (define-key map [mode-line down-mouse-1] menu-map) map)) nil [12227 12936])
            ("mode-line-position" variable (:default-value (\` ((-3 (\, (propertize "%p" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Size indication mode
mouse-1: Display Line and Column Mode Menu"))) (size-indication-mode (8 (\, (propertize " of %I" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Size indication mode
mouse-1: Display Line and Column Mode Menu")))) (line-number-mode ((column-number-mode (10 (\, (propertize " (%l,%c)" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Line number and Column number
mouse-1: Display Line and Column Mode Menu"))) (6 (\, (propertize " L%l" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Line Number
mouse-1: Display Line and Column Mode Menu"))))) ((column-number-mode (5 (\, (propertize " C%c" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Column number
mouse-1: Display Line and Column Mode Menu"))))))))) nil [12938 14374])
            ("put" code nil nil [14375 14424])
            ("mode-line-buffer-identification-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mode-line mouse-1] (quote mode-line-previous-buffer)) (define-key map [header-line down-mouse-1] (quote ignore)) (define-key map [header-line mouse-1] (quote mode-line-previous-buffer)) (define-key map [mode-line mouse-3] (quote mode-line-next-buffer)) (define-key map [header-line down-mouse-3] (quote ignore)) (define-key map [header-line mouse-3] (quote mode-line-next-buffer)) map)) nil [14426 15159])
            ("propertized-buffer-identification" function (:arguments ("fmt")) nil [15161 15645])
            ("mode-line-buffer-identification" variable (:default-value (propertized-buffer-identification "%12b")) nil [15647 15960])
            ("put" code nil nil [15976 16038])
            ("make-variable-buffer-local" code nil nil [16039 16100])
            ("mode-line-misc-info" variable (:default-value (quote ((which-func-mode ("" which-func-format " ")) (global-mode-string ("" global-mode-string " "))))) nil [16102 16384])
            ("put" code nil nil [16385 16435])
            ("mode-line-end-spaces" variable (:default-value (quote (:eval (unless (display-graphic-p) "-%-")))) nil [16437 16570])
            ("put" code nil nil [16571 16622])
            ("let" code nil nil [16687 17252])
            ("mode-line-unbury-buffer" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [17256 17435])
            ("mode-line-bury-buffer" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [17437 17634])
            ("mode-line-other-buffer" function (:user-visible-flag t) nil [17636 17803])
            ("mode-line-next-buffer" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [17805 18002])
            ("mode-line-previous-buffer" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [18004 18213])
            ("bound-and-true-p" function (:arguments ("var")) nil [18215 18345])
            ("bindings--define-key" code nil nil [18464 18685])
            ("bindings--define-key" code nil nil [18686 18934])
            ("bindings--define-key" code nil nil [18935 19200])
            ("bindings--define-key" code nil nil [19201 19430])
            ("bindings--define-key" code nil nil [19431 19670])
            ("bindings--define-key" code nil nil [19671 19845])
            ("bindings--define-key" code nil nil [19846 20051])
            ("bindings--define-key" code nil nil [20052 20346])
            ("bindings--define-key" code nil nil [20347 20587])
            ("bindings--define-key" code nil nil [20588 20788])
            ("bindings--define-key" code nil nil [20789 20979])
            ("mode-line-minor-mode-help" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [20981 21220])
            ("minor-mode-alist" variable nil nil [21222 21519])
            ("put" code nil nil [21535 21582])
            ("setq" code nil nil [21653 21860])
            ("setq" code nil nil [22145 23407])
            ("setq" code nil nil [23443 23585])
            ("setq" code nil nil [23699 24088])
            ("make-variable-buffer-local" code nil nil [24090 24136])
            ("mapc" code nil nil [24392 24758])
            ("base64" package nil nil [24816 24833])
            ("md5" package nil nil [24834 24848])
            ("sha1" package nil nil [24849 24864])
            ("overlay" package nil nil [24865 24913])
            ("text-properties" package nil nil [24914 24984])
            ("define-key" code nil nil [24986 25028])
            ("complete-symbol" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [25030 25409])
            ("garbage-collect" code nil nil [25527 25544])
            ("setq" code nil nil [25548 25581])
            ("make-variable-buffer-local" code nil nil [25583 25644])
            ("global-set-key" code nil nil [25662 25714])
            ("global-set-key" code nil nil [25715 25769])
            ("global-set-key" code nil nil [25965 26017])
            ("global-set-key" code nil nil [26018 26064])
            ("global-set-key" code nil nil [26065 26116])
            ("put" code nil nil [26202 26237])
            ("right-char" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [26290 26760])
            ("left-char" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [26762 27232])
            ("right-word" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [27234 27848])
            ("left-word" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [27850 28463])
            ("narrow-map" variable (:default-value (make-sparse-keymap)) nil [28465 28540])
            ("define-key" code nil nil [28541 28578])
            ("define-key" code nil nil [28580 28625])
            ("define-key" code nil nil [28626 28660])
            ("define-key" code nil nil [28674 28728])
            ("define-key" code nil nil [28729 28774])
            ("substitute-key-definition" code nil nil [28883 28951])
            ("define-key" code nil nil [28953 29003])
            ("define-key" code nil nil [29004 29043])
            ("define-key" code nil nil [29044 29085])
            ("define-key" code nil nil [29086 29125])
            ("define-key" code nil nil [29126 29171])
            ("define-key" code nil nil [29172 29216])
            ("define-key" code nil nil [29217 29267])
            ("define-key" code nil nil [29268 29313])
            ("define-key" code nil nil [29314 29363])
            ("define-key" code nil nil [29364 29404])
            ("define-key" code nil nil [29405 29442])
            ("define-key" code nil nil [29443 29487])
            ("define-key" code nil nil [29488 29536])
            ("define-key" code nil nil [29537 29578])
            ("define-key" code nil nil [29652 29696])
            ("define-key" code nil nil [29763 29816])
            ("define-key" code nil nil [29850 29903])
            ("define-key" code nil nil [29904 29936])
            ("put" code nil nil [29937 29979])
            ("define-key" code nil nil [30050 30087])
            ("define-key" code nil nil [30088 30124])
            ("define-key" code nil nil [30303 30342])
            ("define-key" code nil nil [30343 30392])
            ("define-key" code nil nil [30393 30438])
            ("define-key" code nil nil [30440 30483])
            ("define-key" code nil nil [30484 30529])
            ("define-key" code nil nil [30530 30580])
            ("define-key" code nil nil [30581 30627])
            ("define-key" code nil nil [30628 30676])
            ("define-key" code nil nil [30677 30728])
            ("let" code nil nil [30730 31617])
            ("define-key" code nil nil [31619 31669])
            ("let" code nil nil [31670 31784])
            ("define-key" code nil nil [31785 31828])
            ("let" code nil nil [31855 31983])
            ("define-key" code nil nil [31984 32034])
            ("let" code nil nil [32066 32191])
            ("define-key" code nil nil [32192 32245])
            ("define-key" code nil nil [32301 32353])
            ("define-key" code nil nil [32354 32397])
            ("define-key" code nil nil [32399 32440])
            ("define-key" code nil nil [32441 32484])
            ("define-key" code nil nil [32485 32525])
            ("define-key" code nil nil [32526 32571])
            ("define-key" code nil nil [32572 32608])
            ("define-key" code nil nil [32609 32643])
            ("define-key" code nil nil [32694 32742])
            ("define-key" code nil nil [32800 32849])
            ("put" code nil nil [32850 32901])
            ("define-key" code nil nil [32903 32957])
            ("define-key" code nil nil [32958 33004])
            ("define-key" code nil nil [33005 33052])
            ("define-key" code nil nil [33054 33095])
            ("define-key" code nil nil [33096 33141])
            ("define-key" code nil nil [33142 33188])
            ("define-key" code nil nil [33189 33243])
            ("define-key" code nil nil [33244 33292])
            ("define-key" code nil nil [33294 33332])
            ("goto-map" variable (:default-value (make-sparse-keymap)) nil [33334 33408])
            ("define-key" code nil nil [33409 33442])
            ("define-key" code nil nil [33444 33483])
            ("define-key" code nil nil [33484 33523])
            ("define-key" code nil nil [33524 33563])
            ("define-key" code nil nil [33564 33604])
            ("define-key" code nil nil [33605 33645])
            ("define-key" code nil nil [33646 33690])
            ("define-key" code nil nil [33691 33735])
            ("define-key" code nil nil [33736 33780])
            ("search-map" variable (:default-value (make-sparse-keymap)) nil [33782 33862])
            ("define-key" code nil nil [33863 33898])
            ("define-key" code nil nil [33900 33935])
            ("define-key" code nil nil [33936 33982])
            ("define-key" code nil nil [33983 34029])
            ("define-key" code nil nil [34030 34091])
            ("define-key" code nil nil [34092 34140])
            ("define-key" code nil nil [34141 34192])
            ("define-key" code nil nil [34193 34257])
            ("define-key" code nil nil [34367 34423])
            ("define-key" code nil nil [34424 34470])
            ("define-key" code nil nil [34667 34724])
            ("define-key" code nil nil [34725 34780])
            ("define-key" code nil nil [34781 34835])
            ("define-key" code nil nil [34836 34903])
            ("define-key" code nil nil [34904 34969])
            ("define-key" code nil nil [34970 35012])
            ("define-key" code nil nil [35013 35057])
            ("define-key" code nil nil [35058 35102])
            ("define-key" code nil nil [35103 35145])
            ("define-key" code nil nil [35146 35199])
            ("define-key" code nil nil [35200 35250])
            ("define-key" code nil nil [35251 35302])
            ("define-key" code nil nil [35303 35355])
            ("define-key" code nil nil [35356 35403])
            ("put" code nil nil [35404 35434])
            ("define-key" code nil nil [35435 35481])
            ("define-key" code nil nil [35482 35536])
            ("define-key" code nil nil [35537 35589])
            ("define-key" code nil nil [35590 35649])
            ("define-key" code nil nil [35650 35708])
            ("define-key" code nil nil [35709 35767])
            ("define-key" code nil nil [35768 35816])
            ("define-key" code nil nil [35817 35864])
            ("define-key" code nil nil [35865 35925])
            ("define-key" code nil nil [35926 35984])
            ("define-key" code nil nil [35985 36038])
            ("define-key" code nil nil [36039 36106])
            ("define-key" code nil nil [36107 36173])
            ("define-key" code nil nil [36285 36344])
            ("define-key" code nil nil [36345 36394])
            ("define-key" code nil nil [36395 36445])
            ("define-key" code nil nil [36446 36486])
            ("define-key" code nil nil [36585 36637])
            ("define-key" code nil nil [36638 36692])
            ("define-key" code nil nil [36693 36737])
            ("define-key" code nil nil [36738 36775])
            ("define-key" code nil nil [36776 36831])
            ("define-key" code nil nil [36832 36888])
            ("define-key" code nil nil [36904 36946])
            ("define-key" code nil nil [37178 37225])
            ("define-key" code nil nil [37226 37273])
            ("define-key" code nil nil [37274 37331])
            ("define-key" code nil nil [41007 41053])
            ("define-key" code nil nil [41054 41100])
            ("define-key" code nil nil [41101 41143])
            ("define-key" code nil nil [41144 41192])
            ("define-key" code nil nil [41193 41239])
            ("define-key" code nil nil [41240 41288])
            ("define-key" code nil nil [41289 41335])
            ("define-key" code nil nil [41336 41386])
            ("define-key" code nil nil [41387 41431])
            ("define-key" code nil nil [41432 41480])
            ("define-key" code nil nil [41481 41531])
            ("define-key" code nil nil [41532 41581])
            ("define-key" code nil nil [41582 41628])
            ("define-key" code nil nil [41629 41678])
            ("define-key" code nil nil [41679 41727])
            ("define-key" code nil nil [41728 41778])
            ("define-key" code nil nil [41779 41829])
            ("define-key" code nil nil [41830 41880])
            ("define-key" code nil nil [41881 41933])
            ("define-key" code nil nil [41934 41984])
            ("define-key" code nil nil [41985 42031])
            ("define-key" code nil nil [42032 42084])
            ("define-key" code nil nil [42085 42137])
            ("define-key" code nil nil [42138 42192])
            ("define-key" code nil nil [42193 42247])
            ("define-key" code nil nil [42248 42302])
            ("define-key" code nil nil [42303 42359])
            ("define-key" code nil nil [42360 42414])
            ("define-key" code nil nil [42415 42465])
            ("define-key" code nil nil [42466 42522])
            ("define-key" code nil nil [43064 43114])
            ("define-key" code nil nil [43115 43166])
            ("define-key" code nil nil [43167 43218])
            ("define-key" code nil nil [43219 43270])
            ("define-key" code nil nil [43271 43323])
            ("define-key" code nil nil [43324 43375])
            ("define-key" code nil nil [43376 43425])
            ("define-key" code nil nil [43426 43478])
            ("define-key" code nil nil [43680 43726])
            ("define-key" code nil nil [43848 43895])
            ("define-key" code nil nil [43897 43945])
            ("define-key" code nil nil [43947 43994])
            ("define-key" code nil nil [43995 44036])
            ("define-key" code nil nil [44037 44081])
            ("define-key" code nil nil [44082 44128])
            ("define-key" code nil nil [44130 44168])
            ("define-key" code nil nil [44169 44218])
            ("define-key" code nil nil [44219 44271])
            ("define-key" code nil nil [44272 44318])
            ("define-key" code nil nil [44319 44362])
            ("define-key" code nil nil [44363 44412])
            ("define-key" code nil nil [44414 44449])
            ("define-key" code nil nil [44450 44488])
            ("define-key" code nil nil [44489 44528])
            ("define-key" code nil nil [44529 44564])
            ("define-key" code nil nil [44565 44612])
            ("define-key" code nil nil [44614 44659])
            ("define-key" code nil nil [44660 44699])
            ("define-key" code nil nil [44700 44745])
            ("define-key" code nil nil [44746 44796])
            ("defalias" code nil nil [44798 44859])
            ("mode-specific-map" variable (:default-value (symbol-function (quote mode-specific-command-prefix))) nil [44860 44975])
            ("define-key" code nil nil [44976 45036])
            ("global-set-key" code nil nil [45038 45077])
            ("define-key" code nil nil [45078 45120])
            ("global-set-key" code nil nil [45121 45159])
            ("define-key" code nil nil [45160 45202])
            ("global-set-key" code nil nil [45279 45318])
            ("global-set-key" code nil nil [45319 45357])
            ("global-set-key" code nil nil [45417 45455])
            ("global-set-key" code nil nil [45456 45506])
            ("global-set-key" code nil nil [45567 45607])
            ("global-set-key" code nil nil [45609 45654])
            ("define-key" code nil nil [45655 45700])
            ("global-set-key" code nil nil [45701 45745])
            ("define-key" code nil nil [45746 45790])
            ("global-set-key" code nil nil [45791 45839])
            ("define-key" code nil nil [45840 45888])
            ("global-set-key" code nil nil [45889 45930])
            ("define-key" code nil nil [45931 45972])
            ("global-set-key" code nil nil [45973 46023])
            ("define-key" code nil nil [46024 46074])
            ("global-set-key" code nil nil [46075 46119])
            ("define-key" code nil nil [46120 46164])
            ("define-key" code nil nil [46166 46207])
            ("define-key" code nil nil [46208 46250])
            ("define-key" code nil nil [46251 46296])
            ("define-key" code nil nil [46297 46335])
            ("define-key" code nil nil [46336 46376])
            ("define-key" code nil nil [46377 46415])
            ("define-key" code nil nil [46416 46454])
            ("define-key" code nil nil [46672 46723])
            ("define-key" code nil nil [46724 46778])
            ("define-key" code nil nil [46779 46820])
            ("define-key" code nil nil [46821 46863])
            ("define-key" code nil nil [46864 46911])
            ("define-key" code nil nil [46912 46953])
            ("define-key" code nil nil [46954 46993])
            ("define-key" code nil nil [46994 47038])
            ("define-key" code nil nil [47039 47083])
            ("define-key" code nil nil [47084 47138])
            ("define-key" code nil nil [47140 47185])
            ("define-key" code nil nil [47187 47227])
            ("define-key" code nil nil [47228 47283])
            ("define-key" code nil nil [47284 47338])
            ("ctl-x-r-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "c" (quote clear-rectangle)) (define-key map "k" (quote kill-rectangle)) (define-key map "d" (quote delete-rectangle)) (define-key map "y" (quote yank-rectangle)) (define-key map "o" (quote open-rectangle)) (define-key map "t" (quote string-rectangle)) (define-key map "N" (quote rectangle-number-lines)) (define-key map "\367" (quote copy-rectangle-as-kill)) (define-key map " " (quote point-to-register)) (define-key map [67108896] (quote point-to-register)) (define-key map " " (quote point-to-register)) (define-key map "j" (quote jump-to-register)) (define-key map "s" (quote copy-to-register)) (define-key map "x" (quote copy-to-register)) (define-key map "i" (quote insert-register)) (define-key map "g" (quote insert-register)) (define-key map "r" (quote copy-rectangle-to-register)) (define-key map "n" (quote number-to-register)) (define-key map "+" (quote increment-register)) (define-key map "w" (quote window-configuration-to-register)) (define-key map "f" (quote frame-configuration-to-register)) map)) nil [47342 48409])
            ("define-key" code nil nil [48410 48448])
            ("define-key" code nil nil [48450 48490])
            ("define-key" code nil nil [48491 48534])
            ("define-key" code nil nil [48537 48581])
            ("define-key" code nil nil [48582 48625])
            ("define-key" code nil nil [48626 48666])
            ("define-key" code nil nil [48667 48710])
            ("define-key" code nil nil [48711 48753])
            ("define-key" code nil nil [48754 48793])
            ("define-key" code nil nil [48794 48847])
            ("define-key" code nil nil [48849 48890])
            ("define-key" code nil nil [48891 48931])
            ("define-key" code nil nil [48932 48972])
            ("define-key" code nil nil [48973 49017])
            ("define-key" code nil nil [49018 49061])
            ("abbrev-map" variable (:default-value (make-sparse-keymap)) nil [49110 49182])
            ("define-key" code nil nil [49183 49220])
            ("define-key" code nil nil [49222 49266])
            ("define-key" code nil nil [49267 49314])
            ("define-key" code nil nil [49315 49361])
            ("define-key" code nil nil [49362 49406])
            ("define-key" code nil nil [49407 49462])
            ("define-key" code nil nil [49463 49516])
            ("define-key" code nil nil [49578 49632])
            ("define-key" code nil nil [49633 49675])
            ("define-key" code nil nil [49676 49718])
            ("define-key" code nil nil [49935 49979])
            ("define-key" code nil nil [49980 50021])
            ("define-key" code nil nil [50022 50065])
            ("define-key" code nil nil [50067 50101])
            ("define-key" code nil nil [50103 50149])
            ("define-key" code nil nil [50151 50214])
            ("define-key" code nil nil [50215 50279])
            ("define-key" code nil nil [50300 50348])
            ("define-key" code nil nil [50349 50397]))          
    :file "bindings.el"
    :pointmax 50529
    :fsize 50528
    :lastmodtime '(20806 7939 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "format.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("put" code nil nil [2957 3001])
            ("put" code nil nil [3002 3056])
            ("format-alist" variable (:default-value (\` ((text/enriched (\, (purecopy "Extended MIME text/enriched format.")) (\, (purecopy "Content-[Tt]ype:[ 	]*text/enriched")) enriched-decode enriched-encode t enriched-mode) (plain (\, (purecopy "ISO 8859-1 standard format, no text properties.")) nil nil nil nil nil) (TeX (\, (purecopy "TeX (encoding)")) nil iso-tex2iso iso-iso2tex t nil) (gtex (\, (purecopy "German TeX (encoding)")) nil iso-gtex2iso iso-iso2gtex t nil) (html (\, (purecopy "HTML/SGML \"ISO 8879:1986//ENTITIES Added Latin 1//EN\" (encoding)")) nil iso-sgml2iso iso-iso2sgml t nil) (rot13 (\, (purecopy "rot13")) nil (\, (purecopy "tr a-mn-z n-za-m")) (\, (purecopy "tr a-mn-z n-za-m")) t nil) (duden (\, (purecopy "Duden Ersatzdarstellung")) nil (\, (purecopy "diac")) iso-iso2duden t nil) (de646 (\, (purecopy "German ASCII (ISO 646)")) nil (\, (purecopy "recode -f iso646-ge:latin1")) (\, (purecopy "recode -f latin1:iso646-ge")) t nil) (denet (\, (purecopy "net German")) nil iso-german iso-cvt-read-only t nil) (esnet (\, (purecopy "net Spanish")) nil iso-spanish iso-cvt-read-only t nil)))) nil [3058 6568])
            ("put" code nil nil [6584 6627])
            ("format-encode-run-method" function (:arguments ("method" "from" "to" "buffer")) nil [6669 7568])
            ("format-decode-run-method" function (:arguments ("method" "from" "to" "_buffer")) nil [7570 8519])
            ("format-annotate-function" function (:arguments ("format" "from" "to" "orig-buf" "format-count")) nil [8521 10854])
            ("format-decode" function (:arguments ("format" "length" "visit-flag")) nil [10856 13246])
            ("format-decode-buffer" function
               (:user-visible-flag t
                :arguments ("format"))
                nil [13298 13719])
            ("format-decode-region" function
               (:user-visible-flag t
                :arguments ("from" "to" "format"))
                nil [13721 14166])
            ("format-encode-buffer" function
               (:user-visible-flag t
                :arguments ("format"))
                nil [14168 14567])
            ("format-encode-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "format"))
                nil [14569 15493])
            ("format-write-file" function
               (:user-visible-flag t
                :arguments ("filename" "format" "confirm"))
                nil [15495 17153])
            ("format-find-file" function
               (:user-visible-flag t
                :arguments ("filename" "format"))
                nil [17155 17661])
            ("format-insert-file" function
               (:user-visible-flag t
                :arguments ("filename" "format" "beg" "end"))
                nil [17663 19502])
            ("format-read" function (:arguments ("prompt")) nil [19504 19922])
            ("format-replace-strings" function (:arguments ("alist" "reverse" "beg" "end")) nil [20054 21127])
            ("format-delq-cons" function (:arguments ("cons" "list")) nil [21181 21691])
            ("format-make-relatively-unique" function (:arguments ("a" "b")) nil [21693 22124])
            ("format-proper-list-p" function (:arguments ("list")) nil [22126 22357])
            ("format-reorder" function (:arguments ("items" "order")) nil [22359 22766])
            ("put" code nil nil [22768 22801])
            ("put" code nil nil [22838 22874])
            ("put" code nil nil [23100 23138])
            ("format-deannotate-region" function (:arguments ("from" "to" "translations" "next-fn")) nil [23162 30830])
            ("format-subtract-regions" function (:arguments ("minu" "subtra")) nil [30832 32317])
            ("format-property-increment-region" function (:arguments ("from" "to" "prop" "delta" "default")) nil [32561 33088])
            ("format-insert-annotations" function (:arguments ("list" "offset")) nil [33112 33771])
            ("format-annotate-value" function (:arguments ("old" "new")) nil [33773 34105])
            ("format-annotate-region" function (:arguments ("from" "to" "translations" "format-fn" "ignore")) nil [34107 38000])
            ("format-annotate-location" function (:arguments ("loc" "all" "ignore" "translations")) nil [38054 39968])
            ("format-annotate-single-property-change" function (:arguments ("prop" "old" "new" "translations")) nil [39970 41640])
            ("format-annotate-atomic-property-change" function (:arguments ("prop-alist" "old" "new")) nil [41642 42982])
            ("format" package nil nil [42984 43001]))          
    :file "format.el"
    :pointmax 43027
    :fsize 43026
    :lastmodtime '(20806 7941 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "version.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("emacs-major-version" variable
               (:constant-flag t
                :default-value (progn (string-match "^[0-9]+" emacs-version) (string-to-number (match-string 0 emacs-version))))
                nil [895 1130])
            ("emacs-minor-version" variable
               (:constant-flag t
                :default-value (progn (string-match "^[0-9]+\\.\\([0-9]+\\)" emacs-version) (string-to-number (match-string 1 emacs-version))))
                nil [1132 1382])
            ("emacs-build-time" variable
               (:constant-flag t
                :default-value (current-time))
                nil [1384 1466])
            ("emacs-build-system" variable
               (:constant-flag t
                :default-value (system-name))
                nil [1468 1560])
            ("motif-version-string" variable nil nil [1562 1591])
            ("gtk-version-string" variable nil nil [1592 1619])
            ("ns-version-string" variable nil nil [1620 1646])
            ("emacs-version" function
               (:user-visible-flag t
                :arguments ("here"))
                nil [1648 2929])
            ("defalias" code nil nil [2988 3022])
            ("emacs-bzr-version" variable nil nil [3090 3351])
            ("emacs-bzr-version-dirstate" function (:arguments ("dir")) nil [3353 3895])
            ("emacs-bzr-version-bzr" function (:arguments ("dir")) nil [3897 4919])
            ("emacs-bzr-get-version" function (:arguments ("dir" "external")) nil [4921 7463])
            ("purecopy" code nil nil [7539 7626]))          
    :file "version.el"
    :pointmax 7653
    :fsize 7652
    :lastmodtime '(20806 7946 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "wdired.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("dired-backup-overwrite" variable nil nil [3047 3078])
            ("dired" include nil nil [3122 3138])
            ("dired-do-create-files-regexp" function (:prototype-flag t) nil [3139 3191])
            ("wdired" customgroup (:user-visible-flag t) nil [3193 3296])
            ("wdired-use-interactive-rename" variable nil nil [3298 3629])
            ("wdired-confirm-overwrite" variable (:default-value t) nil [3631 3844])
            ("wdired-use-dired-vertical-movement" variable nil nil [3846 4441])
            ("wdired-allow-to-redirect-links" variable (:default-value t) nil [4443 4663])
            ("wdired-allow-to-change-permissions" variable nil nil [4665 5652])
            ("wdired-keep-marker-rename" variable (:default-value t) nil [5654 6289])
            ("wdired-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "" (quote wdired-finish-edit)) (define-key map "" (quote wdired-finish-edit)) (define-key map "" (quote wdired-abort-changes)) (define-key map "" (quote wdired-abort-changes)) (define-key map "" (quote wdired-exit)) (define-key map "" (quote ignore)) (define-key map "
" (quote ignore)) (define-key map "" (quote ignore)) (define-key map [up] (quote wdired-previous-line)) (define-key map "" (quote wdired-previous-line)) (define-key map [down] (quote wdired-next-line)) (define-key map "" (quote wdired-next-line)) (define-key map [menu-bar wdired] (cons "WDired" (make-sparse-keymap "WDired"))) (define-key map [menu-bar wdired wdired-customize] (quote ("Options" . wdired-customize))) (define-key map [menu-bar wdired dashes] (quote ("--"))) (define-key map [menu-bar wdired wdired-abort-changes] (quote (menu-item "Abort Changes" wdired-abort-changes :help "Abort changes and return to dired mode"))) (define-key map [menu-bar wdired wdired-finish-edit] (quote ("Commit Changes" . wdired-finish-edit))) (define-key map [remap upcase-word] (quote wdired-upcase-word)) (define-key map [remap capitalize-word] (quote wdired-capitalize-word)) (define-key map [remap downcase-word] (quote wdired-downcase-word)) map)) nil [6291 7660])
            ("wdired-mode-hook" variable nil nil [7662 7735])
            ("wdired-col-perm" variable nil nil [7795 7819])
            ("wdired-old-content" variable nil nil [7862 7889])
            ("wdired-old-point" variable nil nil [7890 7915])
            ("wdired-old-marks" variable nil nil [7916 7941])
            ("wdired-mode" function (:user-visible-flag t) nil [7943 8777])
            ("put" code nil nil [8778 8817])
            ("wdired-change-to-wdired-mode" function (:user-visible-flag t) nil [8835 10737])
            ("wdired-isearch-filter-read-only" function (:arguments ("beg" "end")) nil [10739 10965])
            ("wdired-preprocess-files" function nil nil [11097 11953])
            ("wdired-normalize-filename" function (:arguments ("file")) nil [12012 12488])
            ("wdired-get-filename" function (:arguments ("no-dir" "old")) nil [12490 13640])
            ("wdired-change-to-dired-mode" function nil nil [13643 14244])
            ("wdired-abort-changes" function (:user-visible-flag t) nil [14247 14576])
            ("wdired-finish-edit" function (:user-visible-flag t) nil [14578 17298])
            ("wdired-do-renames" function (:arguments ("renames")) nil [17300 20156])
            ("wdired-exit" function (:user-visible-flag t) nil [20159 20710])
            ("wdired-search-and-rename" function (:arguments ("filename-ori" "filename-new")) nil [20859 21605])
            ("wdired-flag-for-deletion" function (:arguments ("filenames-ori")) nil [21645 21881])
            ("wdired-customize" function (:user-visible-flag t) nil [21883 21995])
            ("wdired-revert" function (:arguments ("_arg" "_noconfirm")) nil [21997 22235])
            ("wdired-check-kill-buffer" function nil nil [22237 22474])
            ("wdired-next-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [22476 22972])
            ("wdired-previous-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [22974 23476])
            ("wdired-preprocess-symlinks" function nil nil [23550 24257])
            ("wdired-get-previous-link" function (:arguments ("old" "move")) nil [24260 24813])
            ("declare-function" code nil nil [24815 24863])
            ("wdired-do-symlink-changes" function nil nil [24924 25804])
            ("wdired-xcase-word" function (:arguments ("command" "arg")) nil [25860 26312])
            ("wdired-downcase-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [26314 26501])
            ("wdired-upcase-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [26503 26684])
            ("wdired-capitalize-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [26686 26879])
            ("wdired-perm-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map " " (quote wdired-toggle-bit)) (define-key map "r" (quote wdired-set-bit)) (define-key map "w" (quote wdired-set-bit)) (define-key map "x" (quote wdired-set-bit)) (define-key map "-" (quote wdired-set-bit)) (define-key map "S" (quote wdired-set-bit)) (define-key map "s" (quote wdired-set-bit)) (define-key map "T" (quote wdired-set-bit)) (define-key map "t" (quote wdired-set-bit)) (define-key map "s" (quote wdired-set-bit)) (define-key map "l" (quote wdired-set-bit)) (define-key map [down-mouse-1] (quote wdired-mouse-toggle-bit)) map)) nil [26975 27564])
            ("wdired-preprocess-perms" function nil nil [27689 28769])
            ("wdired-perm-allowed-in-pos" function (:arguments ("char" "pos")) nil [28771 29095])
            ("wdired-set-bit" function (:user-visible-flag t) nil [29097 29779])
            ("wdired-toggle-bit" function (:user-visible-flag t) nil [29781 30449])
            ("wdired-mouse-toggle-bit" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [30451 30611])
            ("wdired-perms-to-number" function (:arguments ("perms")) nil [30769 31644])
            ("wdired-do-perm-changes" function nil nil [31723 33087])
            ("wdired" package nil nil [33089 33106]))          
    :file "wdired.el"
    :pointmax 33207
    :fsize 33206
    :lastmodtime '(20806 7946 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "dired.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("dired" customgroup (:user-visible-flag t) nil [1244 1343])
            ("dired-mark" customgroup (:user-visible-flag t) nil [1345 1434])
            ("dired-listing-switches" variable (:default-value (purecopy "-al")) nil [1452 1976])
            ("dired-subdir-switches" variable nil nil [1978 2252])
            ("dired-chown-program" variable (:default-value (purecopy (cond ((executable-find "chown") "chown") ((file-executable-p "/usr/sbin/chown") "/usr/sbin/chown") ((file-executable-p "/etc/chown") "/etc/chown") (t "chown")))) nil [2254 2588])
            ("dired-use-ls-dired" variable (:default-value (quote unspecified)) nil [2590 3711])
            ("dired-chmod-program" variable (:default-value "chmod") nil [3713 3827])
            ("dired-touch-program" variable (:default-value "touch") nil [3829 3945])
            ("dired-ls-F-marks-symlinks" variable nil nil [3947 4630])
            ("dired-trivial-filenames" variable (:default-value (purecopy "^\\.\\.?$\\|^#")) nil [4632 4960])
            ("dired-keep-marker-rename" variable (:default-value t) nil [4962 5563])
            ("dired-keep-marker-copy" variable (:default-value 67) nil [5565 5884])
            ("dired-keep-marker-hardlink" variable (:default-value 72) nil [5886 6201])
            ("dired-keep-marker-symlink" variable (:default-value 89) nil [6203 6521])
            ("dired-dwim-target" variable nil nil [6523 6861])
            ("dired-copy-preserve-time" variable (:default-value t) nil [6863 7041])
            ("defvaralias" code nil nil [7162 7231])
            ("defvaralias" code nil nil [7232 7295])
            ("dired-load-hook" variable nil nil [7317 7468])
            ("dired-mode-hook" variable nil nil [7470 7572])
            ("dired-before-readin-hook" variable nil nil [7574 7721])
            ("dired-after-readin-hook" variable nil nil [7723 7960])
            ("dired-dnd-protocol-alist" variable (:default-value (quote (("^file:///" . dired-dnd-handle-local-file) ("^file://" . dired-dnd-handle-file) ("^file:" . dired-dnd-handle-local-file)))) nil [8099 8623])
            ("dired-marker-char" variable (:default-value 42) nil [8648 9183])
            ("dired-del-marker" variable (:default-value 68) nil [9185 9260])
            ("dired-shrink-to-fit" variable (:default-value t) nil [9262 9453])
            ("make-obsolete-variable" code nil nil [9454 9704])
            ("dired-file-version-alist" variable nil nil [9706 9739])
            ("dired-directory" variable nil nil [9756 10059])
            ("dired-safe-switches-p" function (:arguments ("switches")) nil [10106 10381])
            ("dired-actual-switches" variable nil nil [10383 10492])
            ("put" code nil nil [10494 10566])
            ("dired-re-inode-size" variable (:default-value "[0-9 	]*") nil [10568 10683])
            ("dired-re-mark" variable (:default-value "^[^ 
]") nil [10882 10914])
            ("dired-re-maybe-mark" variable (:default-value "^. ") nil [11003 11037])
            ("dired-re-dir" variable (:default-value (concat dired-re-maybe-mark dired-re-inode-size "d[^:]")) nil [11177 11255])
            ("dired-re-sym" variable (:default-value (concat dired-re-maybe-mark dired-re-inode-size "l[^:]")) nil [11256 11334])
            ("dired-re-exe" variable (:default-value (mapconcat (function (lambda (x) (concat dired-re-maybe-mark dired-re-inode-size x))) (quote ("-[-r][-w][xs][-r][-w].[-r][-w]." "-[-r][-w].[-r][-w][xs][-r][-w]." "-[-r][-w].[-r][-w].[-r][-w][xst]")) "\\|")) nil [11335 11645])
            ("dired-re-perms" variable (:default-value "[-bcdlps][-r][-w].[-r][-w].[-r][-w].") nil [11646 11708])
            ("dired-re-dot" variable (:default-value "^.* \\.\\.?/?$") nil [11709 11747])
            ("dired-subdir-alist" variable nil nil [11811 12082])
            ("dired-switches-alist" variable nil nil [12084 12237])
            ("make-variable-buffer-local" code nil nil [12238 12288])
            ("defvaralias" code nil nil [12290 12378])
            ("dired-subdir-regexp" variable (:default-value "^. \\([^
]+\\)\\(:\\)[
]") nil [12380 12726])
            ("dired-faces" customgroup (:user-visible-flag t) nil [12728 12811])
            ("dired-header" variable
               (:default-value (quote ((t (:inherit font-lock-type-face))))
                :type "face")
                nil [12813 12952])
            ("dired-header-face" variable (:default-value (quote dired-header)) nil [12953 13035])
            ("dired-mark" variable
               (:default-value (quote ((t (:inherit font-lock-constant-face))))
                :type "face")
                nil [13037 13172])
            ("dired-mark-face" variable (:default-value (quote dired-mark)) nil [13173 13245])
            ("dired-marked" variable
               (:default-value (quote ((t (:inherit warning))))
                :type "face")
                nil [13247 13369])
            ("dired-marked-face" variable (:default-value (quote dired-marked)) nil [13370 13447])
            ("dired-flagged" variable
               (:default-value (quote ((t (:inherit error))))
                :type "face")
                nil [13449 13584])
            ("dired-flagged-face" variable (:default-value (quote dired-flagged)) nil [13585 13678])
            ("dired-warning" variable
               (:default-value (quote ((t (:inherit font-lock-warning-face))))
                :type "face")
                nil [13680 13977])
            ("dired-warning-face" variable (:default-value (quote dired-warning)) nil [13978 14089])
            ("dired-perm-write" variable
               (:default-value (quote ((((type w32 pc)) :inherit default) (t (:inherit font-lock-comment-delimiter-face))))
                :type "face")
                nil [14091 14487])
            ("dired-perm-write-face" variable (:default-value (quote dired-perm-write)) nil [14488 14607])
            ("dired-directory" variable
               (:default-value (quote ((t (:inherit font-lock-function-name-face))))
                :type "face")
                nil [14609 14757])
            ("dired-directory-face" variable (:default-value (quote dired-directory)) nil [14758 14843])
            ("dired-symlink" variable
               (:default-value (quote ((t (:inherit font-lock-keyword-face))))
                :type "face")
                nil [14845 14985])
            ("dired-symlink-face" variable (:default-value (quote dired-symlink)) nil [14986 15067])
            ("dired-ignored" variable
               (:default-value (quote ((t (:inherit shadow))))
                :type "face")
                nil [15069 15230])
            ("dired-ignored-face" variable (:default-value (quote dired-ignored)) nil [15231 15349])
            ("dired-font-lock-keywords" variable (:default-value (list (list dired-re-mark (quote (0 dired-mark-face))) (list (concat "^[" (char-to-string dired-marker-char) "]") (quote (".+" (dired-move-to-filename) nil (0 dired-marked-face)))) (list (concat "^[" (char-to-string dired-del-marker) "]") (quote (".+" (dired-move-to-filename) nil (0 dired-flagged-face)))) (list (concat dired-re-maybe-mark dired-re-inode-size "[-d]....\\(w\\)....") (quote (1 dired-perm-write-face))) (list (concat dired-re-maybe-mark dired-re-inode-size "[-d].......\\(w\\).") (quote (1 dired-perm-write-face))) (list dired-re-dir (quote (".+" (dired-move-to-filename) nil (0 dired-directory-face)))) (list dired-re-sym (quote (".+" (dired-move-to-filename) nil (0 dired-symlink-face)))) (quote (eval list (concat "\\(" (regexp-opt completion-ignored-extensions) "\\|#\\)$") (quote (".+" (dired-move-to-filename) nil (0 dired-ignored-face))))) (quote (eval list (concat "\\(" (regexp-opt completion-ignored-extensions) "\\|#\\)[*=|]$") (quote (".+" (progn (end-of-line) (unless (get-text-property (1- (point)) (quote mouse-face)) (dired-move-to-filename))) nil (0 dired-ignored-face))))) (list (concat dired-re-maybe-mark dired-re-inode-size dired-re-perms ".*:$") (quote (".+" (dired-move-to-filename) nil (0 (quote default))))) (list dired-subdir-regexp (quote (1 dired-header-face))))) nil [15351 18741])
            ("dnd-protocol-alist" variable nil nil [18743 18770])
            ("dired-mark-if" function (:arguments ("predicate" "msg")) nil [18846 20151])
            ("dired-map-over-marks" function (:arguments ("body" "arg" "show-progress" "distinguish-one-marked")) nil [20153 22965])
            ("dired-get-marked-files" function (:arguments ("localp" "arg" "filter" "distinguish-one-marked")) nil [22967 24322])
            ("dired-read-dir-and-switches" function (:arguments ("str")) nil [24347 25118])
            ("dired-file-name-at-point" function nil nil [27907 28274])
            ("dired" function
               (:user-visible-flag t
                :arguments ("dirname" "switches"))
                nil [28340 29302])
            ("dired-other-window" function
               (:user-visible-flag t
                :arguments ("dirname" "switches"))
                nil [29383 29648])
            ("dired-other-frame" function
               (:user-visible-flag t
                :arguments ("dirname" "switches"))
                nil [29728 29982])
            ("dired-noselect" function (:arguments ("dir-or-list" "switches")) nil [29999 31278])
            ("dired-directory-changed-p" function (:arguments ("dirname")) nil [31485 31721])
            ("dired-buffer-stale-p" function (:arguments ("noconfirm")) nil [31723 32322])
            ("dired-auto-revert-buffer" variable nil nil [32324 33089])
            ("dired-internal-noselect" function (:arguments ("dir-or-list" "switches" "mode")) nil [33091 35907])
            ("dired-buffers" variable nil nil [35909 36156])
            ("dired-find-subdir" variable nil nil [36158 36184])
            ("dired-find-buffer-nocreate" function (:arguments ("dirname" "mode")) nil [36246 38006])
            ("dired-readin" function nil nil [38041 40059])
            ("dired-readin-insert" function nil nil [40093 40964])
            ("dired-align-file" function (:arguments ("beg" "end")) nil [40966 45551])
            ("ls-lisp-use-insert-directory-program" variable nil nil [45554 45599])
            ("dired-switches-escape-p" function (:arguments ("switches")) nil [45601 45853])
            ("dired-insert-directory" function (:arguments ("dir" "switches" "file-list" "wildcard" "hdr")) nil [45855 50150])
            ("dired-insert-set-properties" function (:arguments ("beg" "end")) nil [50152 50644])
            ("dired-revert" function (:arguments ("_arg" "_noconfirm")) nil [50676 52639])
            ("dired-save-positions" function nil nil [52728 53418])
            ("dired-restore-positions" function (:arguments ("positions")) nil [53420 54120])
            ("dired-remember-marks" function (:arguments ("beg" "end")) nil [54122 54602])
            ("dired-mark-remembered" function (:arguments ("alist")) nil [54604 54977])
            ("dired-remember-hidden" function nil nil [54979 55338])
            ("dired-insert-old-subdirs" function (:arguments ("old-subdir-alist")) nil [55340 55806])
            ("dired-uncache" function (:arguments ("dir")) nil [55808 56005])
            ("dired-mode-map" variable (:default-value (let ((map (make-keymap))) (set-keymap-parent map special-mode-map) (define-key map [mouse-2] (quote dired-mouse-find-file-other-window)) (define-key map [follow-link] (quote mouse-face)) (define-key map "#" (quote dired-flag-auto-save-files)) (define-key map "." (quote dired-clean-directory)) (define-key map "~" (quote dired-flag-backup-files)) (define-key map "A" (quote dired-do-search)) (define-key map "C" (quote dired-do-copy)) (define-key map "B" (quote dired-do-byte-compile)) (define-key map "D" (quote dired-do-delete)) (define-key map "G" (quote dired-do-chgrp)) (define-key map "H" (quote dired-do-hardlink)) (define-key map "L" (quote dired-do-load)) (define-key map "M" (quote dired-do-chmod)) (define-key map "O" (quote dired-do-chown)) (define-key map "P" (quote dired-do-print)) (define-key map "Q" (quote dired-do-query-replace-regexp)) (define-key map "R" (quote dired-do-rename)) (define-key map "S" (quote dired-do-symlink)) (define-key map "T" (quote dired-do-touch)) (define-key map "X" (quote dired-do-shell-command)) (define-key map "Z" (quote dired-do-compress)) (define-key map "!" (quote dired-do-shell-command)) (define-key map "&" (quote dired-do-async-shell-command)) (define-key map "=" (quote dired-diff)) (define-key map "\377" (quote dired-unmark-all-files)) (define-key map "\204" (quote dired-tree-down)) (define-key map "\225" (quote dired-tree-up)) (define-key map "\216" (quote dired-next-subdir)) (define-key map "\220" (quote dired-prev-subdir)) (define-key map "\373" (quote dired-prev-marked-file)) (define-key map "\375" (quote dired-next-marked-file)) (define-key map "%" nil) (define-key map "%u" (quote dired-upcase)) (define-key map "%l" (quote dired-downcase)) (define-key map "%d" (quote dired-flag-files-regexp)) (define-key map "%g" (quote dired-mark-files-containing-regexp)) (define-key map "%m" (quote dired-mark-files-regexp)) (define-key map "%r" (quote dired-do-rename-regexp)) (define-key map "%C" (quote dired-do-copy-regexp)) (define-key map "%H" (quote dired-do-hardlink-regexp)) (define-key map "%R" (quote dired-do-rename-regexp)) (define-key map "%S" (quote dired-do-symlink-regexp)) (define-key map "%&" (quote dired-flag-garbage-files)) (define-key map "*" nil) (define-key map "**" (quote dired-mark-executables)) (define-key map "*/" (quote dired-mark-directories)) (define-key map "*@" (quote dired-mark-symlinks)) (define-key map "*%" (quote dired-mark-files-regexp)) (define-key map "*c" (quote dired-change-marks)) (define-key map "*s" (quote dired-mark-subdir-files)) (define-key map "*m" (quote dired-mark)) (define-key map "*u" (quote dired-unmark)) (define-key map "*?" (quote dired-unmark-all-files)) (define-key map "*!" (quote dired-unmark-all-marks)) (define-key map "U" (quote dired-unmark-all-marks)) (define-key map "*" (quote dired-unmark-backward)) (define-key map "*" (quote dired-next-marked-file)) (define-key map "*" (quote dired-prev-marked-file)) (define-key map "*t" (quote dired-toggle-marks)) (define-key map "a" (quote dired-find-alternate-file)) (define-key map "d" (quote dired-flag-file-deletion)) (define-key map "e" (quote dired-find-file)) (define-key map "f" (quote dired-find-file)) (define-key map "" (quote dired-find-file)) (put (quote dired-find-file) :advertised-binding "") (define-key map "g" (quote revert-buffer)) (define-key map "i" (quote dired-maybe-insert-subdir)) (define-key map "j" (quote dired-goto-file)) (define-key map "k" (quote dired-do-kill-lines)) (define-key map "l" (quote dired-do-redisplay)) (define-key map "m" (quote dired-mark)) (define-key map "n" (quote dired-next-line)) (define-key map "o" (quote dired-find-file-other-window)) (define-key map "" (quote dired-display-file)) (define-key map "p" (quote dired-previous-line)) (define-key map "s" (quote dired-sort-toggle-or-edit)) (define-key map "t" (quote dired-toggle-marks)) (define-key map "u" (quote dired-unmark)) (define-key map "v" (quote dired-view-file)) (define-key map "w" (quote dired-copy-filename-as-kill)) (define-key map "x" (quote dired-do-flagged-delete)) (define-key map "y" (quote dired-show-file-type)) (define-key map "+" (quote dired-create-directory)) (define-key map "<" (quote dired-prev-dirline)) (define-key map ">" (quote dired-next-dirline)) (define-key map "^" (quote dired-up-directory)) (define-key map " " (quote dired-next-line)) (define-key map [remap next-line] (quote dired-next-line)) (define-key map [remap previous-line] (quote dired-previous-line)) (define-key map "$" (quote dired-hide-subdir)) (define-key map "\244" (quote dired-hide-all)) (define-key map (kbd "M-s a C-s") (quote dired-do-isearch)) (define-key map (kbd "M-s a M-C-s") (quote dired-do-isearch-regexp)) (define-key map (kbd "M-s f C-s") (quote dired-isearch-filenames)) (define-key map (kbd "M-s f M-C-s") (quote dired-isearch-filenames-regexp)) (define-key map [remap read-only-mode] (quote dired-toggle-read-only)) (define-key map [remap toggle-read-only] (quote dired-toggle-read-only)) (define-key map "?" (quote dired-summary)) (define-key map "" (quote dired-unmark-backward)) (define-key map [remap undo] (quote dired-undo)) (define-key map [remap advertised-undo] (quote dired-undo)) (define-key map "d" (quote image-dired-display-thumbs)) (define-key map "t" (quote image-dired-tag-files)) (define-key map "r" (quote image-dired-delete-tag)) (define-key map "j" (quote image-dired-jump-thumbnail-buffer)) (define-key map "i" (quote image-dired-dired-display-image)) (define-key map "x" (quote image-dired-dired-display-external)) (define-key map "a" (quote image-dired-display-thumbs-append)) (define-key map "." (quote image-dired-display-thumb)) (define-key map "c" (quote image-dired-dired-comment-files)) (define-key map "f" (quote image-dired-mark-tagged-files)) (define-key map "" (quote image-dired-dired-toggle-marked-thumbs)) (define-key map "e" (quote image-dired-dired-edit-comment-and-tags)) (define-key map ":d" (quote epa-dired-do-decrypt)) (define-key map ":v" (quote epa-dired-do-verify)) (define-key map ":s" (quote epa-dired-do-sign)) (define-key map ":e" (quote epa-dired-do-encrypt)) (define-key map [menu-bar subdir] (cons "Subdir" (make-sparse-keymap "Subdir"))) (define-key map [menu-bar subdir hide-all] (quote (menu-item "Hide All" dired-hide-all :help "Hide all subdirectories, leave only header lines"))) (define-key map [menu-bar subdir hide-subdir] (quote (menu-item "Hide/UnHide Subdir" dired-hide-subdir :help "Hide or unhide current directory listing"))) (define-key map [menu-bar subdir tree-down] (quote (menu-item "Tree Down" dired-tree-down :help "Go to first subdirectory header down the tree"))) (define-key map [menu-bar subdir tree-up] (quote (menu-item "Tree Up" dired-tree-up :help "Go to first subdirectory header up the tree"))) (define-key map [menu-bar subdir up] (quote (menu-item "Up Directory" dired-up-directory :help "Edit the parent directory"))) (define-key map [menu-bar subdir prev-subdir] (quote (menu-item "Prev Subdir" dired-prev-subdir :help "Go to previous subdirectory header line"))) (define-key map [menu-bar subdir next-subdir] (quote (menu-item "Next Subdir" dired-next-subdir :help "Go to next subdirectory header line"))) (define-key map [menu-bar subdir prev-dirline] (quote (menu-item "Prev Dirline" dired-prev-dirline :help "Move to next directory-file line"))) (define-key map [menu-bar subdir next-dirline] (quote (menu-item "Next Dirline" dired-next-dirline :help "Move to previous directory-file line"))) (define-key map [menu-bar subdir insert] (quote (menu-item "Insert This Subdir" dired-maybe-insert-subdir :help "Insert contents of subdirectory" :enable (let ((f (dired-get-filename nil t))) (and f (file-directory-p f)))))) (define-key map [menu-bar immediate] (cons "Immediate" (make-sparse-keymap "Immediate"))) (define-key map [menu-bar immediate image-dired-dired-display-external] (quote (menu-item "Display Image Externally" image-dired-dired-display-external :help "Display image in external viewer"))) (define-key map [menu-bar immediate image-dired-dired-display-image] (quote (menu-item "Display Image" image-dired-dired-display-image :help "Display sized image in a separate window"))) (define-key map [menu-bar immediate image-dired-dired-toggle-marked-thumbs] (quote (menu-item "Toggle Image Thumbnails in This Buffer" image-dired-dired-toggle-marked-thumbs :help "Add or remove image thumbnails in front of marked file names"))) (define-key map [menu-bar immediate revert-buffer] (quote (menu-item "Refresh" revert-buffer :help "Update contents of shown directories"))) (define-key map [menu-bar immediate dashes] (quote ("--"))) (define-key map [menu-bar immediate isearch-filenames-regexp] (quote (menu-item "Isearch Regexp in File Names..." dired-isearch-filenames-regexp :help "Incrementally search for regexp in file names only"))) (define-key map [menu-bar immediate isearch-filenames] (quote (menu-item "Isearch in File Names..." dired-isearch-filenames :help "Incrementally search for string in file names only."))) (define-key map [menu-bar immediate compare-directories] (quote (menu-item "Compare Directories..." dired-compare-directories :help "Mark files with different attributes in two dired buffers"))) (define-key map [menu-bar immediate backup-diff] (quote (menu-item "Compare with Backup" dired-backup-diff :help "Diff file at cursor with its latest backup"))) (define-key map [menu-bar immediate diff] (quote (menu-item "Diff..." dired-diff :help "Compare file at cursor with another file"))) (define-key map [menu-bar immediate view] (quote (menu-item "View This File" dired-view-file :help "Examine file at cursor in read-only mode"))) (define-key map [menu-bar immediate display] (quote (menu-item "Display in Other Window" dired-display-file :help "Display file at cursor in other window"))) (define-key map [menu-bar immediate find-file-other-window] (quote (menu-item "Find in Other Window" dired-find-file-other-window :help "Edit file at cursor in other window"))) (define-key map [menu-bar immediate find-file] (quote (menu-item "Find This File" dired-find-file :help "Edit file at cursor"))) (define-key map [menu-bar immediate create-directory] (quote (menu-item "Create Directory..." dired-create-directory :help "Create a directory"))) (define-key map [menu-bar immediate wdired-mode] (quote (menu-item "Edit File Names" wdired-change-to-wdired-mode :help "Put a dired buffer in a mode in which filenames are editable" :keys "C-x C-q" :filter (lambda (x) (if (eq major-mode (quote dired-mode)) x))))) (define-key map [menu-bar regexp] (cons "Regexp" (make-sparse-keymap "Regexp"))) (define-key map [menu-bar regexp image-dired-mark-tagged-files] (quote (menu-item "Mark From Image Tag..." image-dired-mark-tagged-files :help "Mark files whose image tags matches regexp"))) (define-key map [menu-bar regexp dashes-1] (quote ("--"))) (define-key map [menu-bar regexp downcase] (quote (menu-item "Downcase" dired-downcase :enable (or (not (fboundp (quote msdos-long-file-names))) (msdos-long-file-names)) :help "Rename marked files to lower-case name"))) (define-key map [menu-bar regexp upcase] (quote (menu-item "Upcase" dired-upcase :enable (or (not (fboundp (quote msdos-long-file-names))) (msdos-long-file-names)) :help "Rename marked files to upper-case name"))) (define-key map [menu-bar regexp hardlink] (quote (menu-item "Hardlink..." dired-do-hardlink-regexp :help "Make hard links for files matching regexp"))) (define-key map [menu-bar regexp symlink] (quote (menu-item "Symlink..." dired-do-symlink-regexp :visible (fboundp (quote make-symbolic-link)) :help "Make symbolic links for files matching regexp"))) (define-key map [menu-bar regexp rename] (quote (menu-item "Rename..." dired-do-rename-regexp :help "Rename marked files matching regexp"))) (define-key map [menu-bar regexp copy] (quote (menu-item "Copy..." dired-do-copy-regexp :help "Copy marked files matching regexp"))) (define-key map [menu-bar regexp flag] (quote (menu-item "Flag..." dired-flag-files-regexp :help "Flag files matching regexp for deletion"))) (define-key map [menu-bar regexp mark] (quote (menu-item "Mark..." dired-mark-files-regexp :help "Mark files matching regexp for future operations"))) (define-key map [menu-bar regexp mark-cont] (quote (menu-item "Mark Containing..." dired-mark-files-containing-regexp :help "Mark files whose contents matches regexp"))) (define-key map [menu-bar mark] (cons "Mark" (make-sparse-keymap "Mark"))) (define-key map [menu-bar mark prev] (quote (menu-item "Previous Marked" dired-prev-marked-file :help "Move to previous marked file"))) (define-key map [menu-bar mark next] (quote (menu-item "Next Marked" dired-next-marked-file :help "Move to next marked file"))) (define-key map [menu-bar mark marks] (quote (menu-item "Change Marks..." dired-change-marks :help "Replace marker with another character"))) (define-key map [menu-bar mark unmark-all] (quote (menu-item "Unmark All" dired-unmark-all-marks))) (define-key map [menu-bar mark symlinks] (quote (menu-item "Mark Symlinks" dired-mark-symlinks :visible (fboundp (quote make-symbolic-link)) :help "Mark all symbolic links"))) (define-key map [menu-bar mark directories] (quote (menu-item "Mark Directories" dired-mark-directories :help "Mark all directories except `.' and `..'"))) (define-key map [menu-bar mark directory] (quote (menu-item "Mark Old Backups" dired-clean-directory :help "Flag old numbered backups for deletion"))) (define-key map [menu-bar mark executables] (quote (menu-item "Mark Executables" dired-mark-executables :help "Mark all executable files"))) (define-key map [menu-bar mark garbage-files] (quote (menu-item "Flag Garbage Files" dired-flag-garbage-files :help "Flag unneeded files for deletion"))) (define-key map [menu-bar mark backup-files] (quote (menu-item "Flag Backup Files" dired-flag-backup-files :help "Flag all backup files for deletion"))) (define-key map [menu-bar mark auto-save-files] (quote (menu-item "Flag Auto-save Files" dired-flag-auto-save-files :help "Flag auto-save files for deletion"))) (define-key map [menu-bar mark deletion] (quote (menu-item "Flag" dired-flag-file-deletion :help "Flag current line's file for deletion"))) (define-key map [menu-bar mark unmark] (quote (menu-item "Unmark" dired-unmark :help "Unmark or unflag current line's file"))) (define-key map [menu-bar mark mark] (quote (menu-item "Mark" dired-mark :help "Mark current line's file for future operations"))) (define-key map [menu-bar mark toggle-marks] (quote (menu-item "Toggle Marks" dired-toggle-marks :help "Mark unmarked files, unmark marked ones"))) (define-key map [menu-bar operate] (cons "Operate" (make-sparse-keymap "Operate"))) (define-key map [menu-bar operate image-dired-delete-tag] (quote (menu-item "Delete Image Tag..." image-dired-delete-tag :help "Delete image tag from current or marked files"))) (define-key map [menu-bar operate image-dired-tag-files] (quote (menu-item "Add Image Tags..." image-dired-tag-files :help "Add image tags to current or marked files"))) (define-key map [menu-bar operate image-dired-dired-comment-files] (quote (menu-item "Add Image Comment..." image-dired-dired-comment-files :help "Add image comment to current or marked files"))) (define-key map [menu-bar operate image-dired-display-thumbs] (quote (menu-item "Display Image Thumbnails" image-dired-display-thumbs :help "Display image thumbnails for current or marked image files"))) (define-key map [menu-bar operate dashes-4] (quote ("--"))) (define-key map [menu-bar operate epa-dired-do-decrypt] (quote (menu-item "Decrypt..." epa-dired-do-decrypt :help "Decrypt file at cursor"))) (define-key map [menu-bar operate epa-dired-do-verify] (quote (menu-item "Verify" epa-dired-do-verify :help "Verify digital signature of file at cursor"))) (define-key map [menu-bar operate epa-dired-do-sign] (quote (menu-item "Sign..." epa-dired-do-sign :help "Create digital signature of file at cursor"))) (define-key map [menu-bar operate epa-dired-do-encrypt] (quote (menu-item "Encrypt..." epa-dired-do-encrypt :help "Encrypt file at cursor"))) (define-key map [menu-bar operate dashes-3] (quote ("--"))) (define-key map [menu-bar operate query-replace] (quote (menu-item "Query Replace in Files..." dired-do-query-replace-regexp :help "Replace regexp in marked files"))) (define-key map [menu-bar operate search] (quote (menu-item "Search Files..." dired-do-search :help "Search marked files for regexp"))) (define-key map [menu-bar operate isearch-regexp] (quote (menu-item "Isearch Regexp Files..." dired-do-isearch-regexp :help "Incrementally search marked files for regexp"))) (define-key map [menu-bar operate isearch] (quote (menu-item "Isearch Files..." dired-do-isearch :help "Incrementally search marked files for string"))) (define-key map [menu-bar operate chown] (quote (menu-item "Change Owner..." dired-do-chown :visible (not (memq system-type (quote (ms-dos windows-nt)))) :help "Change the owner of marked files"))) (define-key map [menu-bar operate chgrp] (quote (menu-item "Change Group..." dired-do-chgrp :visible (not (memq system-type (quote (ms-dos windows-nt)))) :help "Change the group of marked files"))) (define-key map [menu-bar operate chmod] (quote (menu-item "Change Mode..." dired-do-chmod :help "Change mode (attributes) of marked files"))) (define-key map [menu-bar operate touch] (quote (menu-item "Change Timestamp..." dired-do-touch :help "Change timestamp of marked files"))) (define-key map [menu-bar operate load] (quote (menu-item "Load" dired-do-load :help "Load marked Emacs Lisp files"))) (define-key map [menu-bar operate compile] (quote (menu-item "Byte-compile" dired-do-byte-compile :help "Byte-compile marked Emacs Lisp files"))) (define-key map [menu-bar operate compress] (quote (menu-item "Compress" dired-do-compress :help "Compress/uncompress marked files"))) (define-key map [menu-bar operate print] (quote (menu-item "Print..." dired-do-print :help "Ask for print command and print marked files"))) (define-key map [menu-bar operate hardlink] (quote (menu-item "Hardlink to..." dired-do-hardlink :help "Make hard links for current or marked files"))) (define-key map [menu-bar operate symlink] (quote (menu-item "Symlink to..." dired-do-symlink :visible (fboundp (quote make-symbolic-link)) :help "Make symbolic links for current or marked files"))) (define-key map [menu-bar operate async-command] (quote (menu-item "Asynchronous Shell Command..." dired-do-async-shell-command :help "Run a shell command asynchronously on current or marked files"))) (define-key map [menu-bar operate command] (quote (menu-item "Shell Command..." dired-do-shell-command :help "Run a shell command on current or marked files"))) (define-key map [menu-bar operate delete] (quote (menu-item "Delete" dired-do-delete :help "Delete current file or all marked files"))) (define-key map [menu-bar operate rename] (quote (menu-item "Rename to..." dired-do-rename :help "Rename current file or move marked files"))) (define-key map [menu-bar operate copy] (quote (menu-item "Copy to..." dired-do-copy :help "Copy current file or all marked files"))) map)) nil [56055 77035])
            ("put" code nil nil [77099 77137])
            ("dired-mode" function (:arguments ("dirname" "switches")) nil [77194 81972])
            ("dired-summary" function (:user-visible-flag t) nil [82036 82334])
            ("dired-undo" function (:user-visible-flag t) nil [82336 82705])
            ("dired-toggle-read-only" function (:user-visible-flag t) nil [82707 83076])
            ("dired-next-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [83078 83292])
            ("dired-previous-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [83294 83514])
            ("dired-next-dirline" function
               (:user-visible-flag t
                :arguments ("arg" "opoint"))
                nil [83516 83920])
            ("dired-prev-dirline" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [83922 84051])
            ("dired-up-directory" function
               (:user-visible-flag t
                :arguments ("other-window"))
                nil [84053 84656])
            ("dired-get-file-for-visit" function (:user-visible-flag t) nil [84658 85224])
            ("define-obsolete-function-alias" code nil nil [85290 85374])
            ("dired-find-file" function (:user-visible-flag t) nil [85375 85674])
            ("dired-find-alternate-file" function (:user-visible-flag t) nil [85676 85881])
            ("dired-mouse-find-file-other-window" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [85986 86694])
            ("dired-view-file" function (:user-visible-flag t) nil [86696 87103])
            ("dired-find-file-other-window" function (:user-visible-flag t) nil [87105 87276])
            ("dired-display-file" function (:user-visible-flag t) nil [87278 87454])
            ("dired-get-filename" function (:arguments ("localp" "no-error-if-not-filep")) nil [87533 91597])
            ("dired-string-replace-match" function (:arguments ("regexp" "string" "newtext" "literal" "global")) nil [91599 92309])
            ("dired-make-absolute" function (:arguments ("file" "dir")) nil [92311 92739])
            ("dired-make-relative" function (:arguments ("file" "dir")) nil [92741 93298])
            ("dired-permission-flags-regexp" variable (:default-value "\\([^ ]\\)[-r][-w]\\([^ ]\\)[-r][-w]\\([^ ]\\)[-r][-w]\\([^ ]\\)") nil [93366 93538])
            ("dired-move-to-filename" function (:arguments ("raise-error" "eol")) nil [93653 94587])
            ("dired-move-to-end-of-filename" function (:arguments ("no-error")) nil [94589 97042])
            ("dired-copy-filename-as-kill" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [97094 98393])
            ("dired-buffers-for-dir" function (:arguments ("dir" "file")) nil [98471 99557])
            ("dired-glob-regexp" function (:arguments ("pattern")) nil [99559 100752])
            ("dired-advertise" function nil nil [100756 101196])
            ("dired-unadvertise" function (:arguments ("dir")) nil [101198 101588])
            ("dired-in-this-tree" function (:arguments ("file" "dir")) nil [101629 101807])
            ("dired-normalize-subdir" function (:arguments ("dir")) nil [101809 102128])
            ("dired-get-subdir" function nil nil [102130 102529])
            ("defalias" code nil nil [102610 102647])
            ("dired-get-subdir-max" function (:arguments ("elt")) nil [102649 102768])
            ("dired-clear-alist" function nil nil [102770 102951])
            ("dired-subdir-index" function (:arguments ("dir")) nil [102953 103289])
            ("dired-next-subdir" function
               (:user-visible-flag t
                :arguments ("arg" "no-error-if-not-found" "no-skip"))
                nil [103291 104099])
            ("dired-build-subdir-alist" function
               (:user-visible-flag t
                :arguments ("switches"))
                nil [104101 106814])
            ("dired-alist-add-1" function (:arguments ("dir" "new-marker")) nil [106816 107012])
            ("dired-goto-next-nontrivial-file" function nil nil [107014 107406])
            ("dired-goto-next-file" function nil nil [107408 107567])
            ("dired-goto-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [107569 109011])
            ("dired-goto-file-1" function (:arguments ("file" "full-name" "limit")) nil [109013 110441])
            ("dired-find-subdir" variable nil nil [110443 110469])
            ("dired-initial-position" function (:arguments ("dirname")) nil [110516 110820])
            ("dired-current-directory" function (:arguments ("localp")) nil [111256 111983])
            ("dired-subdir-max" function nil nil [112123 112274])
            ("dired-recursive-deletes" variable (:default-value (quote top)) nil [112296 112980])
            ("dired-re-no-dot" variable (:default-value "^\\([^.]\\|\\.\\([^.]\\|\\..\\)\\).*") nil [113018 113081])
            ("dired-delete-file" function (:arguments ("file" "recursive" "trash")) nil [113278 114283])
            ("dired-do-flagged-delete" function
               (:user-visible-flag t
                :arguments ("nomessage"))
                nil [114285 114986])
            ("dired-do-delete" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [114988 115431])
            ("dired-deletion-confirmer" variable (:default-value (quote yes-or-no-p)) nil [115433 115479])
            ("dired-internal-do-deletions" function (:arguments ("l" "arg" "trash")) nil [115496 117566])
            ("dired-fun-in-all-buffers" function (:arguments ("directory" "file" "fun" "args")) nil [117568 118176])
            ("dired-delete-entry" function (:arguments ("file")) nil [118212 118471])
            ("dired-clean-up-buffers-too" variable nil nil [118473 118508])
            ("dired-clean-up-after-deletion" function (:arguments ("fn")) nil [118510 119585])
            ("dired-marker-regexp" function nil nil [119606 119701])
            ("dired-plural-s" function (:arguments ("count")) nil [119703 119759])
            ("dired-mark-prompt" function (:arguments ("arg" "files")) nil [119761 120552])
            ("dired-pop-to-buffer" function (:arguments ("buf")) nil [120554 121430])
            ("dired-no-confirm" variable nil nil [121432 122097])
            ("dired-mark-pop-up" function (:arguments ("buffer-or-name" "op-symbol" "files" "function" "args")) nil [122099 124029])
            ("dired-format-columns-of-files" function (:arguments ("files")) nil [124031 124191])
            ("dired-repeat-over-lines" function (:arguments ("arg" "function")) nil [124256 125129])
            ("dired-between-files" function nil nil [125131 125393])
            ("dired-next-marked-file" function
               (:user-visible-flag t
                :arguments ("arg" "wrap" "opoint"))
                nil [125395 126036])
            ("dired-prev-marked-file" function
               (:user-visible-flag t
                :arguments ("arg" "wrap"))
                nil [126038 126229])
            ("dired-file-marker" function (:arguments ("file")) nil [126231 126467])
            ("dired-mark-files-in-region" function (:arguments ("start" "end")) nil [126469 126994])
            ("dired-mark" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [126996 128093])
            ("dired-unmark" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [128095 128583])
            ("dired-flag-file-deletion" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [128585 129098])
            ("dired-unmark-backward" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [129100 129416])
            ("dired-toggle-marks" function (:user-visible-flag t) nil [129418 130307])
            ("dired-regexp-history" variable nil nil [130387 130484])
            ("dired-read-regexp" function (:arguments ("prompt" "default" "history")) nil [130486 130612])
            ("dired-mark-files-regexp" function
               (:user-visible-flag t
                :arguments ("regexp" "marker-char"))
                nil [130614 131366])
            ("dired-mark-files-containing-regexp" function
               (:user-visible-flag t
                :arguments ("regexp" "marker-char"))
                nil [131368 132499])
            ("dired-flag-files-regexp" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [132501 132906])
            ("dired-mark-symlinks" function
               (:user-visible-flag t
                :arguments ("unflag-p"))
                nil [132908 133181])
            ("dired-mark-directories" function
               (:user-visible-flag t
                :arguments ("unflag-p"))
                nil [133183 133532])
            ("dired-mark-executables" function
               (:user-visible-flag t
                :arguments ("unflag-p"))
                nil [133534 133814])
            ("dired-flag-auto-save-files" function
               (:user-visible-flag t
                :arguments ("unflag-p"))
                nil [133925 135107])
            ("dired-garbage-files-regexp" variable (:default-value (concat (regexp-opt (quote (".log" ".toc" ".dvi" ".bak" ".orig" ".rej" ".aux"))) "\\'")) nil [135109 135459])
            ("dired-flag-garbage-files" function (:user-visible-flag t) nil [135461 135640])
            ("dired-flag-backup-files" function
               (:user-visible-flag t
                :arguments ("unflag-p"))
                nil [135642 136572])
            ("dired-change-marks" function
               (:user-visible-flag t
                :arguments ("old" "new"))
                nil [136574 137302])
            ("dired-unmark-all-marks" function (:user-visible-flag t) nil [137304 137441])
            ("dired-unmark-all-files" function
               (:user-visible-flag t
                :arguments ("mark" "arg"))
                nil [137443 138529])
            ("dired-log-buffer" variable (:default-value "*Dired log*") nil [138598 138637])
            ("dired-why" function (:user-visible-flag t) nil [138639 139192])
            ("dired-log" function (:arguments ("log" "args")) nil [139194 140113])
            ("dired-log-summary" function (:arguments ("string" "failures")) nil [140115 140821])
            ("dired-ls-sorting-switches" variable (:default-value "SXU") nil [141046 141488])
            ("dired-sort-by-date-regexp" variable (:default-value (concat "\\(\\`\\| \\)-[^- ]*t" "[^ " dired-ls-sorting-switches "]*" "\\(\\(\\`\\| +\\)\\(--[^ ]+\\|-[^- t" dired-ls-sorting-switches "]+\\)\\)* *$")) nil [141490 141796])
            ("dired-sort-by-name-regexp" variable (:default-value (concat "\\`\\(\\(\\`\\| +\\)\\(--[^ ]+\\|" "-[^- t" dired-ls-sorting-switches "]+\\)\\)* *$")) nil [141798 141986])
            ("dired-sort-inhibit" variable nil nil [141988 142138])
            ("dired-sort-set-mode-line" function nil nil [142140 142769])
            ("define-obsolete-function-alias" code nil nil [142771 142863])
            ("dired-sort-toggle-or-edit" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [142865 143268])
            ("dired-sort-toggle" function nil nil [143270 144623])
            ("dired-replace-in-string" function (:arguments ("regexp" "newtext" "string")) nil [144732 145199])
            ("dired-sort-other" function (:arguments ("switches" "no-revert")) nil [145201 145669])
            ("dired-subdir-alist-pre-R" variable nil nil [145671 145766])
            ("make-variable-buffer-local" code nil nil [145767 145821])
            ("dired-sort-R-check" function (:arguments ("switches")) nil [145823 147026])
            ("dired-recursive-copies" variable (:default-value (quote top)) nil [147059 147586])
            ("dired-dnd-popup-notice" function nil nil [147588 147733])
            ("declare-function" code nil nil [147735 147791])
            ("dired-dnd-do-ask-action" function (:arguments ("uri")) nil [147793 148219])
            ("declare-function" code nil nil [148221 148277])
            ("declare-function" code nil nil [148278 148326])
            ("declare-function" code nil nil [148363 148438])
            ("declare-function" code nil nil [148439 148492])
            ("dired-overwrite-confirmed" variable nil nil [148494 148528])
            ("dired-dnd-handle-local-file" function (:arguments ("uri" "action")) nil [148558 150364])
            ("dired-dnd-handle-file" function (:arguments ("uri" "action")) nil [150366 150810])
            ("desktop" include nil nil [150856 150874])
            ("dired-desktop-buffer-misc-data" function (:arguments ("dirname")) nil [150877 151495])
            ("dired-restore-desktop-buffer" function (:arguments ("_file-name" "_buffer-name" "misc-data")) nil [151497 152406])
            ("add-to-list" code nil nil [152408 152502])
            ("dired-diff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [153829 154463])
            ("dired-backup-diff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [154465 154836])
            ("dired-compare-directories" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [154838 156043])
            ("dired-do-chmod" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [156045 156283])
            ("dired-do-chgrp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [156285 156485])
            ("dired-do-chown" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [156487 156687])
            ("dired-do-touch" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [156689 156911])
            ("dired-do-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [156913 157110])
            ("dired-clean-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [157112 157532])
            ("dired-do-async-shell-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [157534 158298])
            ("dired-do-shell-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [158300 160599])
            ("dired-run-shell-command" function (:prototype-flag t) nil [160601 160676])
            ("dired-do-kill-lines" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [160678 161317])
            ("dired-compress-file" function (:prototype-flag t) nil [161319 161387])
            ("dired-query" function (:prototype-flag t) nil [161389 161895])
            ("dired-do-compress" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [161897 162020])
            ("dired-do-byte-compile" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [162022 162150])
            ("dired-do-load" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [162152 162268])
            ("dired-do-redisplay" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [162270 162994])
            ("dired-add-file" function (:prototype-flag t) nil [162996 163085])
            ("dired-remove-file" function (:prototype-flag t) nil [163087 163153])
            ("dired-relist-file" function (:prototype-flag t) nil [163155 163296])
            ("dired-copy-file" function (:prototype-flag t) nil [163298 163373])
            ("dired-rename-file" function (:prototype-flag t) nil [163375 163470])
            ("dired-create-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [163472 163628])
            ("dired-do-copy" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [163630 164466])
            ("dired-do-symlink" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [164468 165003])
            ("dired-do-hardlink" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [165005 165484])
            ("dired-do-rename" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [165486 165909])
            ("dired-do-rename-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [165911 166639])
            ("dired-do-copy-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [166641 166852])
            ("dired-do-hardlink-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [166854 167073])
            ("dired-do-symlink-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [167075 167292])
            ("dired-upcase" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [167294 167414])
            ("dired-downcase" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [167416 167538])
            ("dired-maybe-insert-subdir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [167540 168544])
            ("dired-insert-subdir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [168546 169068])
            ("dired-prev-subdir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [169070 169300])
            ("dired-goto-subdir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [169302 169528])
            ("dired-mark-subdir-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [169530 169776])
            ("dired-kill-subdir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [169778 169932])
            ("dired-tree-up" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [169934 170028])
            ("dired-tree-down" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [170030 170113])
            ("dired-hide-subdir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [170115 170337])
            ("dired-hide-all" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [170339 170604])
            ("dired-isearch-filenames-setup" function (:prototype-flag t) nil [170606 170769])
            ("dired-isearch-filenames" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [170771 170909])
            ("dired-isearch-filenames-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [170911 171056])
            ("dired-do-isearch" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [171058 171175])
            ("dired-do-isearch-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [171177 171301])
            ("dired-do-search" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [171303 171525])
            ("dired-do-query-replace-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [171527 171882])
            ("dired-show-file-type" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [171884 172163])
            ("dired-jump" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [172357 172869])
            ("dired-jump-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [172871 173009])
            ("dired-do-relsymlink" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [173011 173409])
            ("dired" package nil nil [173467 173483])
            ("run-hooks" code nil nil [173485 173513]))          
    :file "dired.el"
    :pointmax 173565
    :fsize 173564
    :lastmodtime '(20806 7940 0 0)
    :unmatched-syntax '((close-paren 150874 . 150875) (symbol 150838 . 150855) (open-paren 150837 . 150838))
    )
   (semanticdb-table "desktop.el"
    :file "desktop.el"
    :fsize 50454
    :lastmodtime '(20806 7940 0 0)
    )
   (semanticdb-table "find-dired.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("dired" include nil nil [970 986])
            ("find-dired" customgroup (:user-visible-flag t) nil [988 1094])
            ("find-exec-terminator" variable (:default-value (if (eq 0 (ignore-errors (process-file find-program nil nil nil null-device "-exec" "echo" "{}" "+"))) "+" (shell-quote-argument ";"))) nil [1205 1653])
            ("find-ls-option" variable (:default-value (if (eq 0 (ignore-errors (process-file find-program nil nil nil null-device "-ls"))) (cons "-ls" (if (eq system-type (quote berkeley-unix)) "-gilsb" "-dilsb")) (cons (format "-exec ls -ld {} %s" find-exec-terminator) "-ld"))) nil [1762 2870])
            ("find-ls-subdir-switches" variable (:default-value (if (string-match "-[a-z]*b" (cdr find-ls-option)) "-alb" "-al")) nil [2872 3251])
            ("find-grep-options" variable (:default-value (if (or (eq system-type (quote berkeley-unix)) (string-match "solaris2\\|irix" system-configuration)) "-s" "-q")) nil [3253 3621])
            ("find-name-arg" variable (:default-value (if read-file-name-completion-ignore-case "-iname" "-name")) nil [3669 3998])
            ("find-args" variable nil nil [4000 4076])
            ("find-args-history" variable nil nil [4136 4166])
            ("dired-sort-inhibit" variable nil nil [4168 4195])
            ("find-dired" function
               (:user-visible-flag t
                :arguments ("dir" "args"))
                nil [4212 7866])
            ("kill-find" function (:user-visible-flag t) nil [7868 8190])
            ("find-name-dired" function
               (:user-visible-flag t
                :arguments ("dir" "pattern"))
                nil [8207 8658])
            ("defalias" code nil nil [8858 8900])
            ("find-grep-dired" function
               (:user-visible-flag t
                :arguments ("dir" "regexp"))
                nil [8916 10075])
            ("find-dired-filter" function (:arguments ("proc" "string")) nil [10077 11884])
            ("find-dired-sentinel" function (:arguments ("proc" "state")) nil [11886 12741])
            ("find-dired" package nil nil [12745 12766]))          
    :file "find-dired.el"
    :pointmax 12796
    :fsize 12795
    :lastmodtime '(20806 7941 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "view.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("view" customgroup (:user-visible-flag t) nil [1737 1895])
            ("view-highlight-face" variable (:default-value (quote highlight)) nil [1897 2043])
            ("view-scroll-auto-exit" variable nil nil [2045 2309])
            ("view-try-extend-at-buffer-end" variable nil nil [2311 2641])
            ("view-remove-frame-by-deleting" variable (:default-value t) nil [2658 2879])
            ("view-exits-all-viewing-windows" variable nil nil [2881 3254])
            ("view-inhibit-help-message" variable nil nil [3256 3416])
            ("view-mode" variable nil nil [3433 3606])
            ("make-variable-buffer-local" code nil nil [3622 3661])
            ("view-mode-hook" variable nil nil [3663 3782])
            ("view-old-buffer-read-only" variable nil nil [3785 3823])
            ("make-variable-buffer-local" code nil nil [3824 3879])
            ("view-old-Helper-return-blurb" variable nil nil [3881 3918])
            ("make-variable-buffer-local" code nil nil [3919 3977])
            ("view-page-size" variable nil nil [3979 4106])
            ("make-variable-buffer-local" code nil nil [4107 4151])
            ("view-half-page-size" variable nil nil [4153 4295])
            ("make-variable-buffer-local" code nil nil [4296 4345])
            ("view-last-regexp" variable nil nil [4347 4376])
            ("make-variable-buffer-local" code nil nil [4377 4423])
            ("view-return-to-alist" variable nil nil [4447 4844])
            ("make-obsolete-variable" code nil nil [4845 4932])
            ("make-variable-buffer-local" code nil nil [4933 4983])
            ("put" code nil nil [4984 5030])
            ("view-exit-action" variable nil nil [5032 5353])
            ("make-variable-buffer-local" code nil nil [5354 5400])
            ("view-no-disable-on-exit" variable nil nil [5402 5683])
            ("view-overlay" variable nil nil [5685 5827])
            ("make-variable-buffer-local" code nil nil [5828 5870])
            ("view-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "C" (quote View-kill-and-leave)) (define-key map "c" (quote View-leave)) (define-key map "Q" (quote View-quit-all)) (define-key map "E" (quote View-exit-and-edit)) (define-key map "e" (quote View-exit)) (define-key map "q" (quote View-quit)) (define-key map "p" (quote View-search-last-regexp-backward)) (define-key map "n" (quote View-search-last-regexp-forward)) (define-key map "\\" (quote View-search-regexp-backward)) (define-key map "/" (quote View-search-regexp-forward)) (define-key map "r" (quote isearch-backward)) (define-key map "s" (quote isearch-forward)) (define-key map "m" (quote point-to-register)) (define-key map "'" (quote register-to-point)) (define-key map "x" (quote exchange-point-and-mark)) (define-key map "@" (quote View-back-to-mark)) (define-key map "." (quote set-mark-command)) (define-key map "%" (quote View-goto-percent)) (define-key map "g" (quote View-goto-line)) (define-key map "=" (quote what-line)) (define-key map "F" (quote View-revert-buffer-scroll-page-forward)) (define-key map "y" (quote View-scroll-line-backward)) (define-key map "
" (quote View-scroll-line-forward)) (define-key map "" (quote View-scroll-line-forward)) (define-key map "u" (quote View-scroll-half-page-backward)) (define-key map "d" (quote View-scroll-half-page-forward)) (define-key map "z" (quote View-scroll-page-forward-set-page-size)) (define-key map "w" (quote View-scroll-page-backward-set-page-size)) (define-key map "" (quote View-scroll-page-backward)) (define-key map " " (quote View-scroll-page-forward)) (define-key map "o" (quote View-scroll-to-buffer-end)) (define-key map ">" (quote end-of-buffer)) (define-key map "<" (quote beginning-of-buffer)) (define-key map "-" (quote negative-argument)) (define-key map "9" (quote digit-argument)) (define-key map "8" (quote digit-argument)) (define-key map "7" (quote digit-argument)) (define-key map "6" (quote digit-argument)) (define-key map "5" (quote digit-argument)) (define-key map "4" (quote digit-argument)) (define-key map "3" (quote digit-argument)) (define-key map "2" (quote digit-argument)) (define-key map "1" (quote digit-argument)) (define-key map "0" (quote digit-argument)) (define-key map "H" (quote describe-mode)) (define-key map "?" (quote describe-mode)) (define-key map "h" (quote describe-mode)) map)) nil [6013 8741])
            ("kill-buffer-if-not-modified" function (:arguments ("buf")) nil [9056 9262])
            ("view-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [9279 9960])
            ("view-file-other-window" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [9977 10844])
            ("view-file-other-frame" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [10861 11740])
            ("view-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "exit-action"))
                nil [11758 13047])
            ("view-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("buffer" "not-return" "exit-action"))
                nil [13064 14199])
            ("view-buffer-other-frame" function
               (:user-visible-flag t
                :arguments ("buffer" "not-return" "exit-action"))
                nil [14216 15348])
            ("define-minor-mode" code nil nil [15366 20503])
            ("view-mode-enable" function nil nil [20506 21241])
            ("view-mode-disable" function nil nil [21243 22073])
            ("view-return-to-alist-update" function (:arguments ("buffer" "item")) nil [22090 23342])
            ("view-mode-enter" function (:arguments ("quit-restore" "exit-action")) nil [23359 24477])
            ("view-mode-exit" function (:arguments ("exit-only" "exit-action" "all-windows")) nil [24590 25796])
            ("View-exit" function (:user-visible-flag t) nil [25799 25903])
            ("View-exit-and-edit" function (:user-visible-flag t) nil [25920 26118])
            ("View-leave" function (:user-visible-flag t) nil [26120 26249])
            ("View-quit" function (:user-visible-flag t) nil [26251 26513])
            ("View-quit-all" function (:user-visible-flag t) nil [26515 26799])
            ("View-kill-and-leave" function (:user-visible-flag t) nil [26801 26978])
            ("view-window-size" function nil nil [27007 27378])
            ("view-recenter" function nil nil [27853 27949])
            ("view-page-size-default" function (:arguments ("lines")) nil [27951 28270])
            ("view-set-half-page-size-default" function (:arguments ("lines")) nil [28272 28592])
            ("View-goto-percent" function
               (:user-visible-flag t
                :arguments ("percent"))
                nil [28642 29053])
            ("View-goto-line" function
               (:user-visible-flag t
                :arguments ("line"))
                nil [29414 29692])
            ("View-back-to-mark" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [29694 30028])
            ("view-scroll-lines" function (:arguments ("lines" "backward" "default" "maxdefault")) nil [30031 30925])
            ("view-really-at-end" function nil nil [30927 31666])
            ("view-end-message" function nil nil [31668 32008])
            ("View-scroll-to-buffer-end" function (:user-visible-flag t) nil [32011 32277])
            ("View-scroll-page-forward" function
               (:user-visible-flag t
                :arguments ("lines"))
                nil [32279 32791])
            ("View-scroll-page-backward" function
               (:user-visible-flag t
                :arguments ("lines"))
                nil [32793 33045])
            ("View-scroll-page-forward-set-page-size" function
               (:user-visible-flag t
                :arguments ("lines"))
                nil [33047 33680])
            ("View-scroll-page-backward-set-page-size" function
               (:user-visible-flag t
                :arguments ("lines"))
                nil [33682 33999])
            ("View-scroll-line-forward" function
               (:user-visible-flag t
                :arguments ("lines"))
                nil [34001 34286])
            ("View-scroll-line-backward" function
               (:user-visible-flag t
                :arguments ("lines"))
                nil [34288 34497])
            ("View-scroll-half-page-forward" function
               (:user-visible-flag t
                :arguments ("lines"))
                nil [34499 34898])
            ("View-scroll-half-page-backward" function
               (:user-visible-flag t
                :arguments ("lines"))
                nil [34900 35164])
            ("View-revert-buffer-scroll-page-forward" function
               (:user-visible-flag t
                :arguments ("lines"))
                nil [35166 35925])
            ("View-search-regexp-forward" function
               (:user-visible-flag t
                :arguments ("n" "regexp"))
                nil [35928 36782])
            ("View-search-regexp-backward" function
               (:user-visible-flag t
                :arguments ("n" "regexp"))
                nil [36784 37639])
            ("View-search-last-regexp-forward" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [37641 38013])
            ("View-search-last-regexp-backward" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [38015 38393])
            ("view-search" function (:arguments ("times" "regexp")) nil [38395 40319])
            ("view-search-no-match-lines" function (:arguments ("times" "regexp")) nil [40573 41290])
            ("view" package nil nil [41292 41307]))          
    :file "view.el"
    :pointmax 41331
    :fsize 41330
    :lastmodtime '(20806 7946 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "ido.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("recentf-list" variable nil nil [13416 13437])
            ("ido-fractionp" function (:arguments ("n")) nil [13513 13579])
            ("ido" customgroup (:user-visible-flag t) nil [13581 13819])
            ("ido-mode" variable nil nil [13836 14906])
            ("ido-case-fold" variable (:default-value case-fold-search) nil [14908 15051])
            ("ido-ignore-buffers" variable (:default-value (quote ("\\` "))) nil [15053 15408])
            ("ido-ignore-files" variable (:default-value (quote ("\\`CVS/" "\\`#" "\\`.#" "\\`\\.\\./" "\\`\\./"))) nil [15410 15793])
            ("ido-ignore-extensions" variable (:default-value t) nil [15795 15933])
            ("ido-show-dot-for-dired" variable nil nil [15935 16149])
            ("ido-file-extensions-order" variable nil nil [16151 16535])
            ("ido-ignore-directories" variable (:default-value (quote ("\\`CVS/" "\\`\\.\\./" "\\`\\./"))) nil [16537 16739])
            ("ido-ignore-directories-merge" variable nil nil [16741 17036])
            ("ido-default-file-method" variable (:default-value (quote raise-frame)) nil [17419 18452])
            ("ido-default-buffer-method" variable (:default-value (quote raise-frame)) nil [18454 18993])
            ("ido-enable-flex-matching" variable nil nil [18995 19282])
            ("ido-enable-regexp" variable nil nil [19285 19464])
            ("ido-enable-prefix" variable nil nil [19466 19780])
            ("ido-enable-dot-prefix" variable nil nil [19782 20014])
            ("ido-buffer-disable-smart-matches" variable (:default-value t) nil [20066 20400])
            ("ido-confirm-unique-completion" variable nil nil [20402 20676])
            ("ido-cannot-complete-command" variable (:default-value (quote ido-completion-help)) nil [20678 21004])
            ("ido-record-commands" variable (:default-value t) nil [21007 21195])
            ("ido-max-prospects" variable (:default-value 12) nil [21197 21498])
            ("ido-max-file-prompt-width" variable (:default-value 0.35) nil [21500 21891])
            ("ido-max-window-height" variable nil nil [21893 22226])
            ("ido-enable-last-directory-history" variable (:default-value t) nil [22228 22448])
            ("ido-max-work-directory-list" variable (:default-value 50) nil [22450 22718])
            ("ido-work-directory-list-ignore-regexps" variable nil nil [22720 22999])
            ("ido-use-filename-at-point" variable nil nil [23002 23383])
            ("ido-use-url-at-point" variable nil nil [23386 23560])
            ("ido-enable-tramp-completion" variable (:default-value t) nil [23563 23790])
            ("ido-record-ftp-work-directories" variable (:default-value t) nil [23792 23936])
            ("ido-merge-ftp-work-directories" variable nil nil [23938 24086])
            ("ido-cache-ftp-work-directory-time" variable (:default-value 1.0) nil [24088 24310])
            ("ido-slow-ftp-hosts" variable nil nil [24312 24593])
            ("ido-slow-ftp-host-regexps" variable nil nil [24595 24747])
            ("ido-unc-hosts-cache" variable (:default-value t) nil [24749 24827])
            ("ido-unc-hosts" variable nil nil [24829 25304])
            ("ido-downcase-unc-hosts" variable (:default-value t) nil [25306 25424])
            ("ido-ignore-unc-host-regexps" variable nil nil [25426 25610])
            ("ido-cache-unc-host-shares-time" variable (:default-value 8.0) nil [25612 25824])
            ("ido-max-work-file-list" variable (:default-value 10) nil [25826 26110])
            ("ido-work-directory-match-only" variable (:default-value t) nil [26112 26445])
            ("ido-auto-merge-work-directories-length" variable nil nil [26447 26817])
            ("ido-auto-merge-delay-time" variable (:default-value 0.7) nil [26819 26960])
            ("ido-auto-merge-inhibit-characters-regexp" variable (:default-value "[][*?~]") nil [26962 27195])
            ("ido-merged-indicator" variable (:default-value "^") nil [27197 27341])
            ("ido-max-dir-file-cache" variable (:default-value 100) nil [27343 27926])
            ("ido-max-directory-size" variable nil nil [27928 28272])
            ("ido-rotate-file-list-default" variable nil nil [28274 28432])
            ("ido-enter-matching-directory" variable (:default-value (quote only)) nil [28434 29064])
            ("ido-create-new-buffer" variable (:default-value (quote prompt)) nil [29066 29408])
            ("ido-setup-hook" variable nil nil [29410 29730])
            ("ido-separator" variable nil nil [29732 29940])
            ("ido-decorations" variable (:default-value (quote ("{" "}" " | " " | ..." "[" "]" " [No match]" " [Matched]" " [Not readable]" " [Too big]" " [Confirm]"))) nil [29942 30923])
            ("ido-use-virtual-buffers" variable nil nil [30925 31781])
            ("ido-use-faces" variable (:default-value t) nil [31783 31946])
            ("ido-first-match" variable
               (:default-value (quote ((t :weight bold)))
                :type "face")
                nil [31948 32059])
            ("ido-only-match" variable
               (:default-value (quote ((((class color)) :foreground "ForestGreen") (t :slant italic)))
                :type "face")
                nil [32061 32228])
            ("ido-subdir" variable
               (:default-value (quote ((((min-colors 88) (class color)) :foreground "red1") (((class color)) :foreground "red") (t :underline t)))
                :type "face")
                nil [32230 32465])
            ("ido-virtual" variable
               (:default-value (quote ((t :inherit font-lock-builtin-face)))
                :type "face")
                nil [32467 32615])
            ("ido-indicator" variable
               (:default-value (quote ((((min-colors 88) (class color)) :foreground "yellow1" :background "red1" :width condensed) (((class color)) :foreground "yellow" :background "red" :width condensed) (t :inverse-video t)))
                :type "face")
                nil [32617 32916])
            ("ido-incomplete-regexp" variable
               (:default-value (quote ((t :inherit font-lock-warning-face)))
                :type "face")
                nil [32918 33052])
            ("ido-make-file-list-hook" variable nil nil [33054 33330])
            ("ido-make-dir-list-hook" variable nil nil [33332 33619])
            ("ido-make-buffer-list-hook" variable nil nil [33621 33908])
            ("ido-rewrite-file-prompt-functions" variable nil nil [33910 34758])
            ("ido-rewrite-file-prompt-rules" variable nil nil [34760 35300])
            ("ido-completion-buffer" variable (:default-value "*Ido Completions*") nil [35302 35481])
            ("ido-completion-buffer-all-completions" variable nil nil [35483 35685])
            ("ido-all-frames" variable (:default-value (quote visible)) nil [35687 36049])
            ("ido-minibuffer-setup-hook" variable nil nil [36051 36638])
            ("ido-save-directory-list-file" variable (:default-value (convert-standard-filename "~/.ido.last")) nil [36640 36976])
            ("ido-read-file-name-as-directory-commands" variable (:default-value (quote nil)) nil [36978 37265])
            ("ido-read-file-name-non-ido" variable (:default-value (quote nil)) nil [37267 37535])
            ("ido-before-fallback-functions" variable (:default-value (quote nil)) nil [37537 37739])
            ("ido-completion-map" variable nil nil [37790 37867])
            ("ido-common-completion-map" variable nil nil [37869 37940])
            ("ido-file-completion-map" variable nil nil [37942 38012])
            ("ido-file-dir-completion-map" variable nil nil [38014 38102])
            ("ido-buffer-completion-map" variable nil nil [38104 38178])
            ("ido-file-history" variable nil nil [38180 38263])
            ("ido-buffer-history" variable nil nil [38265 38356])
            ("ido-last-directory-list" variable nil nil [38358 38490])
            ("ido-work-directory-list" variable nil nil [38492 38691])
            ("ido-work-file-list" variable nil nil [38693 38914])
            ("ido-dir-file-cache" variable nil nil [38916 39059])
            ("ido-ignore-item-temp-list" variable nil nil [39061 39252])
            ("ido-eoinput" variable (:default-value 1) nil [39276 39397])
            ("make-variable-buffer-local" code nil nil [39398 39439])
            ("ido-common-match-string" variable nil nil [39441 39538])
            ("ido-rescan" variable nil nil [39540 39631])
            ("ido-rotate" variable nil nil [39633 39707])
            ("ido-text" variable nil nil [39709 39777])
            ("ido-text-init" variable nil nil [39779 39865])
            ("ido-input-stack" variable nil nil [39867 39948])
            ("ido-matches" variable nil nil [39950 40023])
            ("ido-report-no-match" variable (:default-value t) nil [40025 40117])
            ("ido-exit" variable nil nil [40119 40264])
            ("ido-current-directory" variable nil nil [40266 40343])
            ("ido-auto-merge-timer" variable nil nil [40345 40410])
            ("ido-use-mycompletion-depth" variable nil nil [40412 40615])
            ("ido-incomplete-regexp" variable nil nil [40617 40699])
            ("ido-initial-position" variable nil nil [40701 40862])
            ("ido-virtual-buffers" variable nil nil [40864 41074])
            ("ido-cur-item" variable nil nil [41235 41256])
            ("ido-default-item" variable nil nil [41294 41319])
            ("ido-cur-list" variable nil nil [41591 41612])
            ("ido-choice-list" variable nil nil [41664 41688])
            ("ido-ignored-list" variable nil nil [41798 41823])
            ("ido-directory-nonreadable" variable nil nil [41904 41938])
            ("ido-directory-too-big" variable nil nil [42020 42050])
            ("ido-keep-item-list" variable nil nil [42090 42117])
            ("ido-process-ignore-lists" variable nil nil [42150 42183])
            ("ido-process-ignore-lists-inhibit" variable nil nil [42226 42267])
            ("ido-entry-buffer" variable nil nil [42307 42332])
            ("ido-require-match" variable nil nil [42380 42406])
            ("ido-show-confirm-message" variable nil nil [42456 42489])
            ("ido-temp-list" variable nil nil [42553 42575])
            ("ido-rotate-temp" variable nil nil [42642 42666])
            ("ido-work-directory-index" variable nil nil [42720 42753])
            ("ido-work-file-index" variable nil nil [42802 42830])
            ("ido-use-merged-list" variable nil nil [42882 42910])
            ("ido-try-merged-list" variable nil nil [42966 42994])
            ("ido-pre-merge-state" variable nil nil [43112 43140])
            ("ido-saved-vc-hb" variable nil nil [43209 43233])
            ("ido-find-literal" variable nil nil [43283 43308])
            ("ido-context-switch-command" variable nil nil [43382 43417])
            ("ido-completing-read" variable nil nil [43462 43490])
            ("ido-active" function (:arguments ("merge")) nil [43507 43704])
            ("ido-trace-enable" variable nil nil [43706 43735])
            ("ido-trace" function (:arguments ("p" "s" "retval")) nil [43737 44023])
            ("ido-toggle-trace" function (:arguments ("arg")) nil [44025 44337])
            ("ido-local-file-exists-p" function (:arguments ("file")) nil [44339 44469])
            ("ido-unc-hosts" function (:arguments ("query")) nil [44471 45553])
            ("ido-unc-hosts-net-view" function nil nil [45555 45879])
            ("ido-is-tramp-root" function (:arguments ("dir")) nil [45881 46037])
            ("ido-is-unc-root" function (:arguments ("dir")) nil [46039 46167])
            ("ido-is-unc-host" function (:arguments ("dir")) nil [46169 46309])
            ("ido-is-root-directory" function (:arguments ("dir")) nil [46311 46638])
            ("ido-is-ftp-directory" function (:arguments ("dir")) nil [46640 46902])
            ("ido-is-slow-ftp-host" function (:arguments ("dir")) nil [46904 47524])
            ("ido-time-stamp" function (:arguments ("time")) nil [47526 47720])
            ("ido-cache-ftp-valid" function (:arguments ("time")) nil [47722 47956])
            ("ido-cache-unc-valid" function (:arguments ("time")) nil [47958 48183])
            ("ido-may-cache-directory" function (:arguments ("dir")) nil [48185 48576])
            ("ido-pp" function (:arguments ("list" "sep")) nil [48578 49105])
            ("ido-save-history" function (:user-visible-flag t) nil [49107 49877])
            ("ido-load-history" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [49879 50742])
            ("ido-wash-history" function (:user-visible-flag t) nil [50744 53873])
            ("ido-kill-emacs-hook" function nil nil [53876 53952])
            ("ido-common-initialization" function nil nil [53954 54156])
            ("define-minor-mode" code nil nil [54158 55065])
            ("ido-minor-mode-map-entry" variable nil nil [55067 55104])
            ("ido-mode" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [55121 57686])
            ("ido-init-completion-maps" function nil nil [57704 61285])
            ("ido-setup-completion-map" function nil nil [61288 62455])
            ("ido-final-slash" function (:arguments ("dir" "fix-it")) nil [62457 62754])
            ("ido-no-final-slash" function (:arguments ("s")) nil [62756 62932])
            ("ido-nonreadable-directory-p" function (:arguments ("dir")) nil [62934 63345])
            ("ido-directory-too-big-p" function (:arguments ("dir")) nil [63347 63837])
            ("ido-set-current-directory" function (:arguments ("dir" "subdir" "no-merge")) nil [63839 65039])
            ("ido-set-current-home" function (:arguments ("dir")) nil [65041 65206])
            ("ido-record-command" function (:arguments ("command" "arg")) nil [65208 65514])
            ("ido-make-prompt" function (:arguments ("item" "prompt")) nil [65516 66854])
            ("ido-read-internal" function (:arguments ("item" "prompt" "hist" "default" "require-match" "initial")) nil [68468 79754])
            ("ido-edit-input" function (:user-visible-flag t) nil [79756 80105])
            ("ido-buffer-internal" function (:arguments ("method" "fallback" "prompt" "default" "initial" "switch-cmd")) nil [80126 82830])
            ("ido-record-work-directory" function (:arguments ("dir")) nil [82832 83497])
            ("ido-forget-work-directory" function nil nil [83499 83931])
            ("ido-record-work-file" function (:arguments ("name")) nil [83933 84369])
            ("ido-expand-directory" function (:arguments ("dir")) nil [84371 84600])
            ("ido-file-internal" function (:arguments ("method" "fallback" "default" "prompt" "item" "initial" "switch-cmd")) nil [84602 90460])
            ("ido-existing-item-p" function nil nil [90462 90567])
            ("ido-set-common-completion" function nil nil [90590 91059])
            ("ido-complete" function (:user-visible-flag t) nil [91061 93152])
            ("ido-complete-space" function (:user-visible-flag t) nil [93154 93787])
            ("ido-undo-merge-work-directory" function
               (:user-visible-flag t
                :arguments ("text" "try" "refresh"))
                nil [93789 94650])
            ("ido-magic-forward-char" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [94667 95369])
            ("ido-magic-backward-char" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [95386 96245])
            ("ido-magic-delete-char" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [96262 96702])
            ("ido-toggle-case" function (:user-visible-flag t) nil [96727 96912])
            ("ido-toggle-regexp" function (:user-visible-flag t) nil [96914 97113])
            ("ido-toggle-prefix" function (:user-visible-flag t) nil [97115 97314])
            ("ido-toggle-ignore" function (:user-visible-flag t) nil [97316 97791])
            ("ido-toggle-vc" function (:user-visible-flag t) nil [97793 98089])
            ("ido-toggle-literal" function (:user-visible-flag t) nil [98091 98358])
            ("ido-toggle-virtual-buffers" function (:user-visible-flag t) nil [98360 98717])
            ("ido-reread-directory" function (:user-visible-flag t) nil [98719 99200])
            ("ido-exit-minibuffer" function (:user-visible-flag t) nil [99202 99671])
            ("ido-select-text" function (:user-visible-flag t) nil [99673 99897])
            ("ido-fallback-command" function (:user-visible-flag t) nil [99899 100165])
            ("ido-enter-find-file" function (:user-visible-flag t) nil [100167 100311])
            ("ido-enter-switch-buffer" function (:user-visible-flag t) nil [100313 100474])
            ("ido-enter-dired" function (:user-visible-flag t) nil [100476 100606])
            ("ido-enter-insert-buffer" function (:user-visible-flag t) nil [100608 100759])
            ("ido-enter-insert-file" function (:user-visible-flag t) nil [100761 100908])
            ("ido-up-directory" function
               (:user-visible-flag t
                :arguments ("clear"))
                nil [100911 101123])
            ("ido-delete-backward-updir" function
               (:user-visible-flag t
                :arguments ("count"))
                nil [101125 101776])
            ("ido-delete-backward-word-updir" function
               (:user-visible-flag t
                :arguments ("count"))
                nil [101778 102192])
            ("ido-get-work-directory" function (:arguments ("incr" "must-match")) nil [102194 102995])
            ("ido-prev-work-directory" function (:user-visible-flag t) nil [102997 103341])
            ("ido-next-work-directory" function (:user-visible-flag t) nil [103343 103692])
            ("ido-merge-work-directories" function (:user-visible-flag t) nil [103694 103991])
            ("ido-wide-find-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [103993 104526])
            ("ido-wide-find-dir" function
               (:user-visible-flag t
                :arguments ("dir"))
                nil [104528 105079])
            ("ido-wide-find-dir-or-delete-dir" function
               (:user-visible-flag t
                :arguments ("_dir"))
                nil [105081 105384])
            ("ido-take-first-match" function (:user-visible-flag t) nil [105386 105602])
            ("ido-push-dir" function (:user-visible-flag t) nil [105604 105761])
            ("ido-push-dir-first" function (:user-visible-flag t) nil [105763 105994])
            ("ido-pop-dir" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [105996 106228])
            ("ido-wide-find-file-or-pop-dir" function (:arguments ("arg")) nil [106230 106365])
            ("ido-make-directory" function
               (:user-visible-flag t
                :arguments ("dir"))
                nil [106367 106926])
            ("ido-get-work-file" function (:arguments ("incr")) nil [106928 107208])
            ("ido-prev-work-file" function (:user-visible-flag t) nil [107210 107443])
            ("ido-next-work-file" function (:user-visible-flag t) nil [107445 107683])
            ("ido-copy-current-file-name" function
               (:user-visible-flag t
                :arguments ("all"))
                nil [107685 108340])
            ("ido-copy-current-word" function
               (:user-visible-flag t
                :arguments ("_all"))
                nil [108342 109476])
            ("ido-next-match" function (:user-visible-flag t) nil [109478 109762])
            ("ido-prev-match" function (:user-visible-flag t) nil [109764 110055])
            ("ido-next-match-dir" function (:user-visible-flag t) nil [110057 110670])
            ("ido-prev-match-dir" function (:user-visible-flag t) nil [110672 111300])
            ("ido-restrict-to-matches" function (:user-visible-flag t) nil [111302 111545])
            ("ido-chop" function (:arguments ("items" "elem")) nil [111547 111906])
            ("ido-name" function (:arguments ("item")) nil [111908 112070])
            ("ido-all-completions" function nil nil [112111 112560])
            ("ido-file-lessp" function (:arguments ("a" "b")) nil [112585 112712])
            ("ido-file-extension-lessp" function (:arguments ("a" "b")) nil [112715 113228])
            ("ido-file-extension-aux" function (:arguments ("a" "b" "n" "lessp")) nil [113230 113545])
            ("ido-file-extension-order" function (:arguments ("s" "n")) nil [113547 113868])
            ("ido-sort-merged-list" function (:arguments ("items" "promote")) nil [113871 114454])
            ("ido-wide-find-dirs-or-files" function (:arguments ("dir" "file" "prefix" "finddir")) nil [114456 115204])
            ("ido-flatten-merged-list" function (:arguments ("items")) nil [115206 115552])
            ("ido-make-merged-file-list-1" function (:arguments ("text" "auto" "wide")) nil [115555 117707])
            ("ido-make-merged-file-list" function (:arguments ("text" "auto" "wide")) nil [117709 118423])
            ("ido-make-buffer-list-1" function (:arguments ("frame" "visible")) nil [118425 118717])
            ("ido-make-buffer-list" function (:arguments ("default")) nil [118719 119634])
            ("ido-add-virtual-buffers-to-list" function nil nil [119636 120751])
            ("ido-make-choice-list" function (:arguments ("default")) nil [120753 121186])
            ("ido-to-end" function (:arguments ("items")) nil [121188 121453])
            ("ido-file-name-all-completions-1" function (:arguments ("dir")) nil [121455 122581])
            ("ido-file-name-all-completions" function (:arguments ("dir")) nil [122583 124276])
            ("ido-remove-cached-dir" function (:arguments ("dir")) nil [124278 124553])
            ("ido-make-file-list-1" function (:arguments ("dir" "merged")) nil [124556 124990])
            ("ido-make-file-list" function (:arguments ("default")) nil [124992 126750])
            ("ido-make-dir-list-1" function (:arguments ("dir" "merged")) nil [126752 127192])
            ("ido-make-dir-list" function (:arguments ("default")) nil [127194 128387])
            ("ido-bufs-in-frame" variable nil nil [128440 128466])
            ("ido-get-buffers-in-frames" function (:arguments ("current")) nil [128468 128900])
            ("ido-get-bufname" function (:arguments ("win")) nil [128902 129340])
            ("ido-set-matches-1" function (:arguments ("items" "do-full")) nil [129367 132530])
            ("ido-set-matches" function nil nil [132533 132740])
            ("ido-ignore-item-p" function (:arguments ("name" "re-list" "ignore-ext")) nil [132742 133933])
            ("ido-change-word-sub" variable nil nil [133994 134022])
            ("ido-find-common-substring" function (:arguments ("items" "subs")) nil [134024 134704])
            ("ido-word-matching-substring" function (:arguments ("word")) nil [134706 135083])
            ("ido-makealist" function (:arguments ("res")) nil [135085 135162])
            ("ido-choose-completion-string" function (:arguments ("choice" "ignored")) nil [135164 135782])
            ("ido-completion-help" function (:user-visible-flag t) nil [135784 137842])
            ("ido-kill-buffer-at-head" function (:user-visible-flag t) nil [137868 139090])
            ("ido-delete-file-at-head" function (:user-visible-flag t) nil [139116 139930])
            ("ido-visit-buffer" function (:arguments ("buffer" "method" "record")) nil [139957 141175])
            ("ido-buffer-window-other-frame" function (:arguments ("buffer")) nil [141178 141606])
            ("ido-switch-buffer" function (:user-visible-flag t) nil [141673 143413])
            ("ido-switch-buffer-other-window" function (:user-visible-flag t) nil [143430 143734])
            ("ido-display-buffer" function (:user-visible-flag t) nil [143751 144043])
            ("ido-kill-buffer" function (:user-visible-flag t) nil [144060 144341])
            ("ido-insert-buffer" function (:user-visible-flag t) nil [144358 144679])
            ("ido-switch-buffer-other-frame" function (:user-visible-flag t) nil [144696 145041])
            ("ido-find-file-in-dir" function
               (:user-visible-flag t
                :arguments ("dir"))
                nil [145058 145279])
            ("ido-find-file" function (:user-visible-flag t) nil [145296 147705])
            ("ido-find-file-other-window" function (:user-visible-flag t) nil [147722 148005])
            ("ido-find-alternate-file" function (:user-visible-flag t) nil [148022 148323])
            ("ido-find-file-read-only" function (:user-visible-flag t) nil [148340 148643])
            ("ido-find-file-read-only-other-window" function (:user-visible-flag t) nil [148660 149018])
            ("ido-find-file-read-only-other-frame" function (:user-visible-flag t) nil [149035 149389])
            ("ido-display-file" function (:user-visible-flag t) nil [149406 149678])
            ("ido-find-file-other-frame" function (:user-visible-flag t) nil [149695 149974])
            ("ido-write-file" function (:user-visible-flag t) nil [149991 150495])
            ("ido-insert-file" function (:user-visible-flag t) nil [150512 150809])
            ("ido-dired" function (:user-visible-flag t) nil [150826 151142])
            ("ido-list-directory" function (:user-visible-flag t) nil [151144 151505])
            ("ido-initiate-auto-merge" function (:arguments ("buffer")) nil [152044 152570])
            ("ido-exhibit" function nil nil [152572 159756])
            ("ido-completions" function (:arguments ("name")) nil [159758 163100])
            ("ido-minibuffer-setup" function nil nil [163102 163606])
            ("ido-tidy" function nil nil [163608 164339])
            ("ido-summary-buffers-to-end" function nil nil [164341 164839])
            ("put" code nil nil [164882 164917])
            ("put" code nil nil [164918 164958])
            ("put" code nil nil [164959 164994])
            ("ido-read-buffer" function (:arguments ("prompt" "default" "require-match")) nil [165011 165789])
            ("ido-read-file-name" function (:arguments ("prompt" "dir" "default-filename" "mustmatch" "initial" "predicate")) nil [165806 167894])
            ("ido-read-directory-name" function (:arguments ("prompt" "dir" "default-dirname" "mustmatch" "initial")) nil [167911 168866])
            ("ido-completing-read" function (:arguments ("prompt" "choices" "_predicate" "require-match" "initial-input" "hist" "def" "_inherit-input-method")) nil [168883 170187])
            ("ido-unload-function" function nil nil [170189 170381])
            ("ido" package nil nil [170383 170397]))          
    :file "ido.el"
    :pointmax 170420
    :fsize 170419
    :lastmodtime '(20806 7942 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "dired-x.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("dired" include nil nil [2089 2105])
            ("dired-x" customgroup (:user-visible-flag t) nil [2136 2216])
            ("dired-keys" customgroup (:user-visible-flag t) nil [2218 2311])
            ("dired-bind-vm" variable nil nil [2313 2708])
            ("dired-bind-jump" variable (:default-value t) nil [2710 3378])
            ("dired-bind-man" variable (:default-value t) nil [3380 3838])
            ("dired-bind-info" variable (:default-value t) nil [3840 4302])
            ("dired-vm-read-only-folders" variable nil nil [4304 4658])
            ("dired-omit-size-limit" variable (:default-value 30000) nil [4660 4854])
            ("define-obsolete-variable-alias" code nil nil [4886 4962])
            ("define-minor-mode" code nil nil [4963 5834])
            ("put" code nil nil [5836 5889])
            ("dired-omit-files" variable (:default-value "^\\.?#\\|^\\.$\\|^\\.\\.$") nil [5891 6263])
            ("dired-omit-verbose" variable (:default-value t) nil [6265 6434])
            ("dired-find-subdir" variable nil nil [6436 6963])
            ("dired-enable-local-variables" variable (:default-value t) nil [6965 7389])
            ("make-obsolete-variable" code nil nil [7391 7520])
            ("dired-guess-shell-gnutar" variable (:default-value (catch (quote found) (dolist (exe (quote ("tar" "gtar"))) (if (with-temp-buffer (ignore-errors (call-process exe nil t nil "--version")) (and (re-search-backward "GNU tar" nil t) t)) (throw (quote found) exe))))) nil [7522 8257])
            ("dired-guess-shell-gzip-quiet" variable (:default-value t) nil [8259 8406])
            ("dired-guess-shell-znew-switches" variable nil nil [8408 8618])
            ("dired-clean-up-buffers-too" variable (:default-value t) nil [8620 8777])
            ("define-key" code nil nil [8798 8849])
            ("define-key" code nil nil [8850 8902])
            ("define-key" code nil nil [8903 8954])
            ("define-key" code nil nil [8955 9004])
            ("define-key" code nil nil [9005 9059])
            ("define-key" code nil nil [9060 9121])
            ("define-key" code nil nil [9122 9175])
            ("define-key" code nil nil [9176 9235])
            ("define-key" code nil nil [9236 9289])
            ("define-key" code nil nil [9290 9350])
            ("define-key" code nil nil [9351 9401])
            ("easymenu" include nil nil [9422 9441])
            ("let" code nil nil [9443 11236])
            ("add-hook" code nil nil [11276 11324])
            ("add-hook" code nil nil [11325 11380])
            ("dired-extra-startup" function (:user-visible-flag t) nil [11382 12187])
            ("dired-mark-extension" function
               (:user-visible-flag t
                :arguments ("extension" "marker-char"))
                nil [12260 12876])
            ("dired-flag-extension" function
               (:user-visible-flag t
                :arguments ("extension"))
                nil [12878 13140])
            ("dired-patch-unclean-extensions" variable (:default-value (quote (".rej" ".orig"))) nil [13218 13353])
            ("dired-tex-unclean-extensions" variable (:default-value (quote (".toc" ".log" ".aux"))) nil [13355 13531])
            ("dired-latex-unclean-extensions" variable (:default-value (quote (".idx" ".lof" ".lot" ".glo"))) nil [13533 13667])
            ("dired-bibtex-unclean-extensions" variable (:default-value (quote (".blg" ".bbl"))) nil [13669 13791])
            ("dired-texinfo-unclean-extensions" variable (:default-value (quote (".cp" ".cps" ".fn" ".fns" ".ky" ".kys" ".pg" ".pgs" ".tp" ".tps" ".vr" ".vrs"))) nil [13793 13985])
            ("dired-clean-patch" function (:user-visible-flag t) nil [13987 14192])
            ("dired-clean-tex" function (:user-visible-flag t) nil [14194 14710])
            ("dired-very-clean-tex" function (:user-visible-flag t) nil [14712 15293])
            ("dired-jump" function
               (:user-visible-flag t
                :arguments ("other-window" "file-name"))
                nil [15322 16832])
            ("dired-jump-other-window" function
               (:user-visible-flag t
                :arguments ("file-name"))
                nil [16849 17087])
            ("dired-omit-localp" variable (:default-value (quote no-dir)) nil [17279 17564])
            ("dired-omit-marker-char" variable (:default-value 15) nil [17639 17779])
            ("dired-omit-startup" function nil nil [17781 18020])
            ("dired-mark-omitted" function (:user-visible-flag t) nil [18022 18285])
            ("dired-omit-extensions" variable (:default-value (append completion-ignored-extensions dired-latex-unclean-extensions dired-bibtex-unclean-extensions dired-texinfo-unclean-extensions)) nil [18287 18898])
            ("dired-omit-expunge" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [18900 20848])
            ("dired-omit-regexp" function nil nil [20850 21269])
            ("dired-mark-unmarked-files" function
               (:user-visible-flag t
                :arguments ("regexp" "msg" "unflag-p" "localp"))
                nil [21321 22057])
            ("defalias" code nil nil [22146 22186])
            ("dired-virtual" function
               (:user-visible-flag t
                :arguments ("dirname" "switches"))
                nil [22187 24861])
            ("dired-virtual-guess-dir" function nil nil [24863 26053])
            ("dired-virtual-revert" function (:arguments ("_arg" "_noconfirm")) nil [26056 26361])
            ("dired-virtual-mode" function (:user-visible-flag t) nil [26403 26850])
            ("define-obsolete-variable-alias" code nil nil [27414 27511])
            ("dired-default-directory-alist" variable
               (:constant-flag t
                :default-value (quote ((dired-mode if (fboundp (quote dired-current-directory)) (dired-current-directory) default-directory))))
                nil [27628 28023])
            ("put" code nil nil [28025 28085])
            ("make-obsolete-variable" code nil nil [28100 28223])
            ("dired-default-directory" function nil nil [28225 28700])
            ("dired-smart-shell-command" function
               (:user-visible-flag t
                :arguments ("command" "output-buffer" "error-buffer"))
                nil [28702 29365])
            ("dired-local-variables-file" variable (:default-value (convert-standard-filename ".dired")) nil [30135 30564])
            ("make-obsolete-variable" code nil nil [30566 30642])
            ("dired-hack-local-variables" function nil nil [30644 31751])
            ("dired-omit-here-always" function nil nil [31845 32722])
            ("dired-shell-command-history" variable nil nil [33748 33850])
            ("Man-support-local-filenames" function (:prototype-flag t) nil [33999 34044])
            ("dired-guess-shell-alist-default" variable (:default-value (list (list "\\.tar\\'" (quote (if dired-guess-shell-gnutar (concat dired-guess-shell-gnutar " xvf") "tar xvf")) (quote (if dired-guess-shell-gnutar (concat "mkdir " (file-name-sans-extension file) "; " dired-guess-shell-gnutar " -C " (file-name-sans-extension file) " -xvf") (concat "mkdir " (file-name-sans-extension file) "; tar -C " (file-name-sans-extension file) " -xvf"))) (quote (if dired-guess-shell-gnutar (concat dired-guess-shell-gnutar " tvf") "tar tvf"))) (list "\\.tar\\.Z\\'" (quote (if dired-guess-shell-gnutar (concat dired-guess-shell-gnutar " zxvf") (concat "zcat * | tar xvf -"))) (quote (concat "znew" (if dired-guess-shell-gzip-quiet " -q") " " dired-guess-shell-znew-switches))) (list "\\.t\\(ar\\.\\)?gz\\'" (quote (if dired-guess-shell-gnutar (concat dired-guess-shell-gnutar " zxvf") (concat "gunzip -qc * | tar xvf -"))) (quote (if dired-guess-shell-gnutar (concat "mkdir " (file-name-sans-extension file) "; " dired-guess-shell-gnutar " -C " (file-name-sans-extension file) " -zxvf") (concat "mkdir " (file-name-sans-extension file) "; gunzip -qc * | tar -C " (file-name-sans-extension file) " -xvf -"))) (quote (concat "gunzip" (if dired-guess-shell-gzip-quiet " -q" ""))) (quote (if dired-guess-shell-gnutar (concat dired-guess-shell-gnutar " ztvf") (concat "gunzip -qc * | tar tvf -")))) (list "\\.t\\(ar\\.bz2\\|bz\\)\\'" "bunzip2 -c * | tar xvf -" (quote (concat "mkdir " (file-name-sans-extension file) "; bunzip2 -c * | tar -C " (file-name-sans-extension file) " -xvf -")) "bunzip2") (list "\\.t\\(ar\\.\\)?xz\\'" "unxz -c * | tar xvf -" (quote (concat "mkdir " (file-name-sans-extension file) "; unxz -c * | tar -C " (file-name-sans-extension file) " -xvf -")) "unxz") (quote ("\\.shar\\.Z\\'" "zcat * | unshar")) (quote ("\\.shar\\.g?z\\'" "gunzip -qc * | unshar")) (quote ("\\.e?ps\\'" "ghostview" "xloadimage" "lpr")) (list "\\.e?ps\\.g?z\\'" "gunzip -qc * | ghostview -" (quote (concat "gunzip" (if dired-guess-shell-gzip-quiet " -q")))) (list "\\.e?ps\\.Z\\'" "zcat * | ghostview -" (quote (concat "znew" (if dired-guess-shell-gzip-quiet " -q") " " dired-guess-shell-znew-switches))) (quote ("\\.patch\\'" "cat * | patch")) (list "\\.patch\\.g?z\\'" "gunzip -qc * | patch" (quote (concat "gunzip" (if dired-guess-shell-gzip-quiet " -q")))) (list "\\.patch\\.Z\\'" "zcat * | patch" (quote (concat "znew" (if dired-guess-shell-gzip-quiet " -q") " " dired-guess-shell-znew-switches))) (list "\\.\\(?:[0-9]\\|man\\)\\'" (quote (let ((loc (Man-support-local-filenames))) (cond ((eq loc (quote man-db)) "man -l") ((eq loc (quote man)) "man ./") (t "cat * | tbl | nroff -man -h | col -b"))))) (list "\\.\\(?:[0-9]\\|man\\)\\.g?z\\'" (quote (let ((loc (Man-support-local-filenames))) (cond ((eq loc (quote man-db)) "man -l") ((eq loc (quote man)) "man ./") (t "gunzip -qc * | tbl | nroff -man -h | col -b")))) (quote (concat "gunzip" (if dired-guess-shell-gzip-quiet " -q")))) (list "\\.[0-9]\\.Z\\'" (quote (let ((loc (Man-support-local-filenames))) (cond ((eq loc (quote man-db)) "man -l") ((eq loc (quote man)) "man ./") (t "zcat * | tbl | nroff -man -h | col -b")))) (quote (concat "znew" (if dired-guess-shell-gzip-quiet " -q") " " dired-guess-shell-znew-switches))) (quote ("\\.pod\\'" "perldoc" "pod2man * | nroff -man")) (quote ("\\.dvi\\'" "xdvi" "dvips")) (quote ("\\.au\\'" "play")) (quote ("\\.mpe?g\\'\\|\\.avi\\'" "xine -p")) (quote ("\\.ogg\\'" "ogg123")) (quote ("\\.mp3\\'" "mpg123")) (quote ("\\.wav\\'" "play")) (quote ("\\.uu\\'" "uudecode")) (quote ("\\.hqx\\'" "mcvert")) (quote ("\\.sh\\'" "sh")) (quote ("\\.xbm\\'" "bitmap")) (quote ("\\.gp\\'" "gnuplot")) (quote ("\\.p[bgpn]m\\'" "xloadimage")) (quote ("\\.gif\\'" "xloadimage")) (quote ("\\.tif\\'" "xloadimage")) (quote ("\\.png\\'" "display")) (quote ("\\.jpe?g\\'" "xloadimage")) (quote ("\\.fig\\'" "xfig")) (quote ("\\.out\\'" "xgraph")) (quote ("\\.tex\\'" "latex" "tex")) (quote ("\\.texi\\(nfo\\)?\\'" "makeinfo" "texi2dvi")) (quote ("\\.pdf\\'" "xpdf")) (quote ("\\.doc\\'" "antiword" "strings")) (quote ("\\.rpm\\'" "rpm -qilp" "rpm -ivh")) (quote ("\\.dia\\'" "dia")) (quote ("\\.mgp\\'" "mgp")) (list "\\.zip\\'" "unzip" "unzip -l" (quote (concat "unzip" (if dired-guess-shell-gzip-quiet " -q") " -d " (file-name-sans-extension file)))) (quote ("\\.zoo\\'" "zoo x//")) (quote ("\\.lzh\\'" "lharc x")) (quote ("\\.arc\\'" "arc x")) (quote ("\\.shar\\'" "unshar")) (quote ("\\.rar\\'" "unrar x")) (quote ("\\.7z\\'" "7z x")) (list "\\.g?z\\'" (quote (concat "gunzip" (if dired-guess-shell-gzip-quiet " -q")))) (list "\\.dz\\'" "dictunzip") (list "\\.bz2\\'" "bunzip2") (list "\\.xz\\'" "unxz") (list "\\.Z\\'" "uncompress" (quote (concat "znew" (if dired-guess-shell-gzip-quiet " -q") " " dired-guess-shell-znew-switches))) (quote ("\\.sign?\\'" "gpg --verify")))) nil [34046 40514])
            ("dired-guess-shell-alist-user" variable nil nil [40516 41584])
            ("dired-guess-shell-case-fold-search" variable (:default-value t) nil [41586 41786])
            ("dired-guess-default" function (:arguments ("files")) nil [41788 43093])
            ("dired-guess-shell-command" function (:arguments ("prompt" "files")) nil [43113 44203])
            ("declare-function" code nil nil [44237 44285])
            ("dired-keep-marker-relsymlink" variable (:default-value 83) nil [44287 44370])
            ("dired-make-relative-symlink" function
               (:user-visible-flag t
                :arguments ("file1" "file2" "ok-if-already-exists"))
                nil [44372 46457])
            ("dired-do-create-files" function (:prototype-flag t) nil [46459 46504])
            ("dired-do-relsymlink" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [46521 47056])
            ("dired-mark-read-regexp" function (:prototype-flag t) nil [47058 47104])
            ("dired-do-create-files-regexp" function (:prototype-flag t) nil [47105 47157])
            ("dired-do-relsymlink-regexp" function
               (:user-visible-flag t
                :arguments ("regexp" "newname" "arg" "whole-name"))
                nil [47159 47572])
            ("dired-do-find-marked-files" function
               (:user-visible-flag t
                :arguments ("noselect"))
                nil [48528 49179])
            ("dired-simultaneous-find-file" function (:arguments ("file-list" "noselect")) nil [49181 50554])
            ("declare-function" code nil nil [50609 50667])
            ("manual-program" variable nil nil [50669 50692])
            ("dired-man" function (:user-visible-flag t) nil [50708 51152])
            ("dired-info" function (:user-visible-flag t) nil [51177 51273])
            ("declare-function" code nil nil [51305 51377])
            ("vm-folder-directory" variable nil nil [51378 51406])
            ("dired-vm" function
               (:user-visible-flag t
                :arguments ("read-only"))
                nil [51408 52048])
            ("dired-rmail" function (:user-visible-flag t) nil [52050 52147])
            ("dired-do-run-mail" function (:user-visible-flag t) nil [52149 52399])
            ("dired-buffer-more-recently-used-p" function (:arguments ("buffer1" "buffer2")) nil [52470 52792])
            ("with-no-warnings" code nil nil [53998 54434])
            ("dired-mark-sexp" function
               (:user-visible-flag t
                :arguments ("predicate" "unflag-p"))
                nil [54436 58803])
            ("dired-x-hands-off-my-keys" variable (:default-value t) nil [58832 59306])
            ("dired-x-bind-find-file" function (:user-visible-flag t) nil [59308 59969])
            ("dired-x-bind-find-file" code nil nil [60162 60186])
            ("dired-x-find-file" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [60188 60469])
            ("dired-x-find-file-other-window" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [60471 60815])
            ("dired-filename-at-point" function nil nil [60902 62148])
            ("dired-x-read-filename-at-point" function (:arguments ("prompt")) nil [62150 62614])
            ("define-obsolete-function-alias" code nil nil [62616 62713])
            ("define-obsolete-function-alias" code nil nil [62756 62836])
            ("dired-x" package nil nil [62896 62914]))          
    :file "dired-x.el"
    :pointmax 63036
    :fsize 63035
    :lastmodtime '(20806 7940 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "ibuffer.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("cl-lib" include nil nil [1155 1172])
            ("ibuf-macs" include nil nil [1175 1195])
            ("dired" include nil nil [1198 1214])
            ("font-core" include nil nil [1217 1237])
            ("ibuffer-auto-mode" variable nil nil [1369 1395])
            ("ibuffer-cached-filter-formats" variable nil nil [1396 1434])
            ("ibuffer-compiled-filter-formats" variable nil nil [1435 1475])
            ("ibuffer-filter-format-alist" variable nil nil [1476 1512])
            ("ibuffer-filter-group-kill-ring" variable nil nil [1513 1552])
            ("ibuffer-filter-groups" variable nil nil [1553 1583])
            ("ibuffer-filtering-qualifiers" variable nil nil [1584 1621])
            ("ibuffer-header-line-format" variable nil nil [1622 1657])
            ("ibuffer-hidden-filter-groups" variable nil nil [1658 1695])
            ("ibuffer-inline-columns" variable nil nil [1696 1727])
            ("ibuffer-show-empty-filter-groups" variable nil nil [1728 1769])
            ("ibuffer-tmp-hide-regexps" variable nil nil [1770 1803])
            ("ibuffer-tmp-show-regexps" variable nil nil [1804 1837])
            ("declare-function" code nil nil [1839 1946])
            ("declare-function" code nil nil [1947 2051])
            ("declare-function" code nil nil [2052 2123])
            ("ibuffer" customgroup (:user-visible-flag t) nil [2125 2392])
            ("ibuffer-formats" variable (:default-value (quote ((mark modified read-only " " (name 18 18 :left :elide) " " (size 9 -1 :right) " " (mode 16 16 :left :elide) " " filename-and-process) (mark " " (name 16 -1) " " filename)))) nil [2394 5517])
            ("ibuffer-always-compile-formats" variable (:default-value (featurep (quote bytecomp))) nil [5519 5779])
            ("ibuffer-fontification-alist" variable (:default-value (\` ((10 buffer-read-only font-lock-constant-face) (15 (and buffer-file-name (string-match ibuffer-compressed-file-name-regexp buffer-file-name)) font-lock-doc-face) (20 (string-match "^*" (buffer-name)) font-lock-keyword-face) (25 (and (string-match "^ " (buffer-name)) (null buffer-file-name)) italic) (30 (memq major-mode ibuffer-help-buffer-modes) font-lock-comment-face) (35 (eq major-mode (quote dired-mode)) font-lock-function-name-face)))) nil [5781 6882])
            ("ibuffer-use-other-window" variable nil nil [6884 7021])
            ("ibuffer-default-shrink-to-minimum-size" variable nil nil [7023 7180])
            ("ibuffer-shrink-to-minimum-size" variable nil nil [7181 7224])
            ("ibuffer-display-summary" variable (:default-value t) nil [7226 7341])
            ("ibuffer-truncate-lines" variable (:default-value t) nil [7343 7465])
            ("ibuffer-case-fold-search" variable (:default-value case-fold-search) nil [7467 7599])
            ("ibuffer-default-sorting-mode" variable (:default-value (quote recency)) nil [7601 8128])
            ("ibuffer-sorting-mode" variable nil nil [8129 8162])
            ("ibuffer-last-sorting-mode" variable nil nil [8163 8201])
            ("ibuffer-default-sorting-reversep" variable nil nil [8203 8337])
            ("ibuffer-sorting-reversep" variable nil nil [8338 8375])
            ("ibuffer-elide-long-columns" variable nil nil [8377 8527])
            ("make-obsolete-variable" code nil nil [8528 8683])
            ("ibuffer-eliding-string" variable (:default-value "...") nil [8685 8807])
            ("ibuffer-maybe-show-predicates" variable (:default-value (\` ((\, (lambda (buf) (and (string-match "^ " (buffer-name buf)) (null buffer-file-name))))))) nil [8809 9576])
            ("ibuffer-default-display-maybe-show-predicates" variable nil nil [9578 9749])
            ("ibuffer-display-maybe-show-predicates" variable nil nil [9751 9801])
            ("ibuffer-current-format" variable nil nil [9803 9838])
            ("ibuffer-movement-cycle" variable (:default-value t) nil [9840 9979])
            ("ibuffer-modified-char" variable (:default-value 42) nil [9981 10105])
            ("ibuffer-read-only-char" variable (:default-value 37) nil [10107 10233])
            ("ibuffer-marked-char" variable (:default-value 62) nil [10235 10355])
            ("ibuffer-deletion-char" variable (:default-value 68) nil [10357 10492])
            ("ibuffer-expert" variable nil nil [10494 10631])
            ("ibuffer-view-ibuffer" variable nil nil [10633 10915])
            ("ibuffer-always-show-last-buffer" variable nil nil [10917 11265])
            ("ibuffer-jump-offer-only-visible-buffers" variable nil nil [11267 11483])
            ("ibuffer-use-header-line" variable (:default-value (boundp (quote header-line-format))) nil [11485 11650])
            ("ibuffer-default-directory" variable nil nil [11652 11998])
            ("ibuffer-help-buffer-modes" variable (:default-value (quote (help-mode apropos-mode Info-mode Info-edit-mode))) nil [12000 12169])
            ("ibuffer-compressed-file-name-regexp" variable (:default-value "\\.\\(arj\\|bgz\\|bz2\\|gz\\|lzh\\|taz\\|tgz\\|xz\\|zip\\|z\\)$") nil [12171 12414])
            ("define-obsolete-variable-alias" code nil nil [12416 12484])
            ("ibuffer-hook" variable nil nil [12486 12585])
            ("define-obsolete-variable-alias" code nil nil [12587 12665])
            ("ibuffer-mode-hook" variable nil nil [12667 12777])
            ("ibuffer-load-hook" variable nil nil [12779 12881])
            ("ibuffer-marked-face" variable (:default-value (quote warning)) nil [12883 13000])
            ("ibuffer-deletion-face" variable (:default-value (quote error)) nil [13002 13132])
            ("ibuffer-title-face" variable (:default-value (quote font-lock-type-face)) nil [13134 13253])
            ("ibuffer-filter-group-name-face" variable (:default-value (quote bold)) nil [13255 13387])
            ("ibuffer-directory-abbrev-alist" variable nil nil [13389 13646])
            ("ibuffer-mode-groups-popup" variable (:default-value (let ((groups-map (make-sparse-keymap "Filter Groups"))) (define-key-after groups-map [filters-to-filter-group] (quote (menu-item "Create filter group from current filters..." ibuffer-filters-to-filter-group :enable (and (featurep (quote ibuf-ext)) ibuffer-filtering-qualifiers)))) (define-key-after groups-map [forward-filter-group] (quote (menu-item "Move point to the next filter group" ibuffer-forward-filter-group))) (define-key-after groups-map [backward-filter-group] (quote (menu-item "Move point to the previous filter group" ibuffer-backward-filter-group))) (define-key-after groups-map [jump-to-filter-group] (quote (menu-item "Move point to a specific filter group..." ibuffer-jump-to-filter-group))) (define-key-after groups-map [kill-filter-group] (quote (menu-item "Kill filter group named..." ibuffer-kill-filter-group :enable (and (featurep (quote ibuf-ext)) ibuffer-filter-groups)))) (define-key-after groups-map [yank-filter-group] (quote (menu-item "Yank last killed filter group before..." ibuffer-yank-filter-group :enable (and (featurep (quote ibuf-ext)) ibuffer-filter-group-kill-ring)))) (define-key-after groups-map [pop-filter-group] (quote (menu-item "Remove top filter group" ibuffer-pop-filter-group :enable (and (featurep (quote ibuf-ext)) ibuffer-filter-groups)))) (define-key-after groups-map [clear-filter-groups] (quote (menu-item "Remove all filter groups" ibuffer-clear-filter-groups :enable (and (featurep (quote ibuf-ext)) ibuffer-filter-groups)))) (define-key-after groups-map [pop-filter-group] (quote (menu-item "Decompose filter group..." ibuffer-pop-filter-group :help "\"Unmake\" a filter group" :enable (and (featurep (quote ibuf-ext)) ibuffer-filter-groups)))) (define-key-after groups-map [save-filter-groups] (quote (menu-item "Save current filter groups permanently..." ibuffer-save-filter-groups :enable (and (featurep (quote ibuf-ext)) ibuffer-filter-groups) :help "Use a mnemonic name to store current filter groups"))) (define-key-after groups-map [switch-to-saved-filter-groups] (quote (menu-item "Restore permanently saved filters..." ibuffer-switch-to-saved-filter-groups :enable (and (featurep (quote ibuf-ext)) ibuffer-saved-filter-groups) :help "Replace current filters with a saved stack"))) (define-key-after groups-map [delete-saved-filter-groups] (quote (menu-item "Delete permanently saved filter groups..." ibuffer-delete-saved-filter-groups :enable (and (featurep (quote ibuf-ext)) ibuffer-saved-filter-groups)))) (define-key-after groups-map [set-filter-groups-by-mode] (quote (menu-item "Set current filter groups to filter by mode" ibuffer-set-filter-groups-by-mode))) groups-map)) nil [13648 16538])
            ("ibuffer-mode-map" variable (:default-value (let ((map (make-keymap))) (define-key map (kbd "0") (quote digit-argument)) (define-key map (kbd "1") (quote digit-argument)) (define-key map (kbd "2") (quote digit-argument)) (define-key map (kbd "3") (quote digit-argument)) (define-key map (kbd "4") (quote digit-argument)) (define-key map (kbd "5") (quote digit-argument)) (define-key map (kbd "6") (quote digit-argument)) (define-key map (kbd "7") (quote digit-argument)) (define-key map (kbd "8") (quote digit-argument)) (define-key map (kbd "9") (quote digit-argument)) (define-key map (kbd "m") (quote ibuffer-mark-forward)) (define-key map (kbd "t") (quote ibuffer-toggle-marks)) (define-key map (kbd "u") (quote ibuffer-unmark-forward)) (define-key map (kbd "=") (quote ibuffer-diff-with-file)) (define-key map (kbd "j") (quote ibuffer-jump-to-buffer)) (define-key map (kbd "M-g") (quote ibuffer-jump-to-buffer)) (define-key map (kbd "M-s a C-s") (quote ibuffer-do-isearch)) (define-key map (kbd "M-s a M-C-s") (quote ibuffer-do-isearch-regexp)) (define-key map (kbd "DEL") (quote ibuffer-unmark-backward)) (define-key map (kbd "M-DEL") (quote ibuffer-unmark-all)) (define-key map (kbd "* *") (quote ibuffer-unmark-all)) (define-key map (kbd "* M") (quote ibuffer-mark-by-mode)) (define-key map (kbd "* m") (quote ibuffer-mark-modified-buffers)) (define-key map (kbd "* u") (quote ibuffer-mark-unsaved-buffers)) (define-key map (kbd "* s") (quote ibuffer-mark-special-buffers)) (define-key map (kbd "* r") (quote ibuffer-mark-read-only-buffers)) (define-key map (kbd "* /") (quote ibuffer-mark-dired-buffers)) (define-key map (kbd "* e") (quote ibuffer-mark-dissociated-buffers)) (define-key map (kbd "* h") (quote ibuffer-mark-help-buffers)) (define-key map (kbd "* z") (quote ibuffer-mark-compressed-file-buffers)) (define-key map (kbd ".") (quote ibuffer-mark-old-buffers)) (define-key map (kbd "d") (quote ibuffer-mark-for-delete)) (define-key map (kbd "C-d") (quote ibuffer-mark-for-delete-backwards)) (define-key map (kbd "k") (quote ibuffer-mark-for-delete)) (define-key map (kbd "x") (quote ibuffer-do-kill-on-deletion-marks)) (define-key map (kbd "n") (quote ibuffer-forward-line)) (define-key map (kbd "SPC") (quote forward-line)) (define-key map (kbd "p") (quote ibuffer-backward-line)) (define-key map (kbd "M-}") (quote ibuffer-forward-next-marked)) (define-key map (kbd "M-{") (quote ibuffer-backwards-next-marked)) (define-key map (kbd "l") (quote ibuffer-redisplay)) (define-key map (kbd "g") (quote ibuffer-update)) (define-key map "`" (quote ibuffer-switch-format)) (define-key map "-" (quote ibuffer-add-to-tmp-hide)) (define-key map "+" (quote ibuffer-add-to-tmp-show)) (define-key map "b" (quote ibuffer-bury-buffer)) (define-key map (kbd ",") (quote ibuffer-toggle-sorting-mode)) (define-key map (kbd "s i") (quote ibuffer-invert-sorting)) (define-key map (kbd "s a") (quote ibuffer-do-sort-by-alphabetic)) (define-key map (kbd "s v") (quote ibuffer-do-sort-by-recency)) (define-key map (kbd "s s") (quote ibuffer-do-sort-by-size)) (define-key map (kbd "s f") (quote ibuffer-do-sort-by-filename/process)) (define-key map (kbd "s m") (quote ibuffer-do-sort-by-major-mode)) (define-key map (kbd "/ m") (quote ibuffer-filter-by-used-mode)) (define-key map (kbd "/ M") (quote ibuffer-filter-by-derived-mode)) (define-key map (kbd "/ n") (quote ibuffer-filter-by-name)) (define-key map (kbd "/ c") (quote ibuffer-filter-by-content)) (define-key map (kbd "/ e") (quote ibuffer-filter-by-predicate)) (define-key map (kbd "/ f") (quote ibuffer-filter-by-filename)) (define-key map (kbd "/ >") (quote ibuffer-filter-by-size-gt)) (define-key map (kbd "/ <") (quote ibuffer-filter-by-size-lt)) (define-key map (kbd "/ r") (quote ibuffer-switch-to-saved-filters)) (define-key map (kbd "/ a") (quote ibuffer-add-saved-filters)) (define-key map (kbd "/ x") (quote ibuffer-delete-saved-filters)) (define-key map (kbd "/ d") (quote ibuffer-decompose-filter)) (define-key map (kbd "/ s") (quote ibuffer-save-filters)) (define-key map (kbd "/ p") (quote ibuffer-pop-filter)) (define-key map (kbd "/ !") (quote ibuffer-negate-filter)) (define-key map (kbd "/ t") (quote ibuffer-exchange-filters)) (define-key map (kbd "/ TAB") (quote ibuffer-exchange-filters)) (define-key map (kbd "/ o") (quote ibuffer-or-filter)) (define-key map (kbd "/ g") (quote ibuffer-filters-to-filter-group)) (define-key map (kbd "/ P") (quote ibuffer-pop-filter-group)) (define-key map (kbd "/ D") (quote ibuffer-decompose-filter-group)) (define-key map (kbd "/ /") (quote ibuffer-filter-disable)) (define-key map (kbd "M-n") (quote ibuffer-forward-filter-group)) (define-key map "	" (quote ibuffer-forward-filter-group)) (define-key map (kbd "M-p") (quote ibuffer-backward-filter-group)) (define-key map [backtab] (quote ibuffer-backward-filter-group)) (define-key map (kbd "M-j") (quote ibuffer-jump-to-filter-group)) (define-key map (kbd "C-k") (quote ibuffer-kill-line)) (define-key map (kbd "C-y") (quote ibuffer-yank)) (define-key map (kbd "/ S") (quote ibuffer-save-filter-groups)) (define-key map (kbd "/ R") (quote ibuffer-switch-to-saved-filter-groups)) (define-key map (kbd "/ X") (quote ibuffer-delete-saved-filter-groups)) (define-key map (kbd "/ \\") (quote ibuffer-clear-filter-groups)) (define-key map (kbd "q") (quote ibuffer-quit)) (define-key map (kbd "h") (quote describe-mode)) (define-key map (kbd "?") (quote describe-mode)) (define-key map (kbd "% n") (quote ibuffer-mark-by-name-regexp)) (define-key map (kbd "% m") (quote ibuffer-mark-by-mode-regexp)) (define-key map (kbd "% f") (quote ibuffer-mark-by-file-name-regexp)) (define-key map (kbd "C-t") (quote ibuffer-visit-tags-table)) (define-key map (kbd "|") (quote ibuffer-do-shell-command-pipe)) (define-key map (kbd "!") (quote ibuffer-do-shell-command-file)) (define-key map (kbd "~") (quote ibuffer-do-toggle-modified)) (define-key map (kbd "A") (quote ibuffer-do-view)) (define-key map (kbd "D") (quote ibuffer-do-delete)) (define-key map (kbd "E") (quote ibuffer-do-eval)) (define-key map (kbd "F") (quote ibuffer-do-shell-command-file)) (define-key map (kbd "I") (quote ibuffer-do-query-replace-regexp)) (define-key map (kbd "H") (quote ibuffer-do-view-other-frame)) (define-key map (kbd "N") (quote ibuffer-do-shell-command-pipe-replace)) (define-key map (kbd "M") (quote ibuffer-do-toggle-modified)) (define-key map (kbd "O") (quote ibuffer-do-occur)) (define-key map (kbd "P") (quote ibuffer-do-print)) (define-key map (kbd "Q") (quote ibuffer-do-query-replace)) (define-key map (kbd "R") (quote ibuffer-do-rename-uniquely)) (define-key map (kbd "S") (quote ibuffer-do-save)) (define-key map (kbd "T") (quote ibuffer-do-toggle-read-only)) (define-key map (kbd "U") (quote ibuffer-do-replace-regexp)) (define-key map (kbd "V") (quote ibuffer-do-revert)) (define-key map (kbd "W") (quote ibuffer-do-view-and-eval)) (define-key map (kbd "X") (quote ibuffer-do-shell-command-pipe)) (define-key map (kbd "k") (quote ibuffer-do-kill-lines)) (define-key map (kbd "w") (quote ibuffer-copy-filename-as-kill)) (define-key map (kbd "RET") (quote ibuffer-visit-buffer)) (define-key map (kbd "e") (quote ibuffer-visit-buffer)) (define-key map (kbd "f") (quote ibuffer-visit-buffer)) (define-key map (kbd "C-x C-f") (quote ibuffer-find-file)) (define-key map (kbd "o") (quote ibuffer-visit-buffer-other-window)) (define-key map (kbd "C-o") (quote ibuffer-visit-buffer-other-window-noselect)) (define-key map (kbd "M-o") (quote ibuffer-visit-buffer-1-window)) (define-key map (kbd "v") (quote ibuffer-do-view)) (define-key map (kbd "C-x v") (quote ibuffer-do-view-horizontally)) (define-key map (kbd "C-c C-a") (quote ibuffer-auto-mode)) (define-key map (kbd "C-x 4 RET") (quote ibuffer-visit-buffer-other-window)) (define-key map (kbd "C-x 5 RET") (quote ibuffer-visit-buffer-other-frame)) (define-key map [menu-bar view] (cons "View" (make-sparse-keymap "View"))) (define-key-after map [menu-bar view visit-buffer] (quote (menu-item "View this buffer" ibuffer-visit-buffer))) (define-key-after map [menu-bar view visit-buffer-other-window] (quote (menu-item "View (other window)" ibuffer-visit-buffer-other-window))) (define-key-after map [menu-bar view visit-buffer-other-frame] (quote (menu-item "View (other frame)" ibuffer-visit-buffer-other-frame))) (define-key-after map [menu-bar view ibuffer-update] (quote (menu-item "Update" ibuffer-update :help "Regenerate the list of buffers"))) (define-key-after map [menu-bar view switch-format] (quote (menu-item "Switch display format" ibuffer-switch-format :help "Toggle between available values of `ibuffer-formats'"))) (define-key-after map [menu-bar view dashes] (quote ("--"))) (define-key-after map [menu-bar view sort] (cons "Sort" (make-sparse-keymap "Sort"))) (define-key-after map [menu-bar view sort do-sort-by-major-mode] (quote (menu-item "Sort by major mode" ibuffer-do-sort-by-major-mode))) (define-key-after map [menu-bar view sort do-sort-by-size] (quote (menu-item "Sort by buffer size" ibuffer-do-sort-by-size))) (define-key-after map [menu-bar view sort do-sort-by-alphabetic] (quote (menu-item "Sort lexicographically" ibuffer-do-sort-by-alphabetic :help "Sort by the alphabetic order of buffer name"))) (define-key-after map [menu-bar view sort do-sort-by-recency] (quote (menu-item "Sort by view time" ibuffer-do-sort-by-recency :help "Sort by the last time the buffer was displayed"))) (define-key-after map [menu-bar view sort dashes] (quote ("--"))) (define-key-after map [menu-bar view sort invert-sorting] (quote (menu-item "Reverse sorting order" ibuffer-invert-sorting))) (define-key-after map [menu-bar view sort toggle-sorting-mode] (quote (menu-item "Switch sorting mode" ibuffer-toggle-sorting-mode :help "Switch between the various sorting criteria"))) (define-key-after map [menu-bar view filter] (cons "Filter" (make-sparse-keymap "Filter"))) (define-key-after map [menu-bar view filter filter-disable] (quote (menu-item "Disable all filtering" ibuffer-filter-disable :enable (and (featurep (quote ibuf-ext)) ibuffer-filtering-qualifiers)))) (define-key-after map [menu-bar view filter filter-by-mode] (quote (menu-item "Add filter by any major mode..." ibuffer-filter-by-mode))) (define-key-after map [menu-bar view filter filter-by-used-mode] (quote (menu-item "Add filter by a major mode in use..." ibuffer-filter-by-used-mode))) (define-key-after map [menu-bar view filter filter-by-derived-mode] (quote (menu-item "Add filter by derived mode..." ibuffer-filter-by-derived-mode))) (define-key-after map [menu-bar view filter filter-by-name] (quote (menu-item "Add filter by buffer name..." ibuffer-filter-by-name))) (define-key-after map [menu-bar view filter filter-by-filename] (quote (menu-item "Add filter by filename..." ibuffer-filter-by-filename))) (define-key-after map [menu-bar view filter filter-by-size-lt] (quote (menu-item "Add filter by size less than..." ibuffer-filter-by-size-lt))) (define-key-after map [menu-bar view filter filter-by-size-gt] (quote (menu-item "Add filter by size greater than..." ibuffer-filter-by-size-gt))) (define-key-after map [menu-bar view filter filter-by-content] (quote (menu-item "Add filter by content (regexp)..." ibuffer-filter-by-content))) (define-key-after map [menu-bar view filter filter-by-predicate] (quote (menu-item "Add filter by Lisp predicate..." ibuffer-filter-by-predicate))) (define-key-after map [menu-bar view filter pop-filter] (quote (menu-item "Remove top filter" ibuffer-pop-filter :enable (and (featurep (quote ibuf-ext)) ibuffer-filtering-qualifiers)))) (define-key-after map [menu-bar view filter or-filter] (quote (menu-item "OR top two filters" ibuffer-or-filter :enable (and (featurep (quote ibuf-ext)) ibuffer-filtering-qualifiers (cdr ibuffer-filtering-qualifiers)) :help "Create a new filter which is the logical OR of the top two filters"))) (define-key-after map [menu-bar view filter negate-filter] (quote (menu-item "Negate top filter" ibuffer-negate-filter :enable (and (featurep (quote ibuf-ext)) ibuffer-filtering-qualifiers)))) (define-key-after map [menu-bar view filter decompose-filter] (quote (menu-item "Decompose top filter" ibuffer-decompose-filter :enable (and (featurep (quote ibuf-ext)) (memq (car ibuffer-filtering-qualifiers) (quote (or saved not)))) :help "Break down a complex filter like OR or NOT"))) (define-key-after map [menu-bar view filter exchange-filters] (quote (menu-item "Swap top two filters" ibuffer-exchange-filters :enable (and (featurep (quote ibuf-ext)) ibuffer-filtering-qualifiers (cdr ibuffer-filtering-qualifiers))))) (define-key-after map [menu-bar view filter save-filters] (quote (menu-item "Save current filters permanently..." ibuffer-save-filters :enable (and (featurep (quote ibuf-ext)) ibuffer-filtering-qualifiers) :help "Use a mnemonic name to store current filter stack"))) (define-key-after map [menu-bar view filter switch-to-saved-filters] (quote (menu-item "Restore permanently saved filters..." ibuffer-switch-to-saved-filters :enable (and (featurep (quote ibuf-ext)) ibuffer-saved-filters) :help "Replace current filters with a saved stack"))) (define-key-after map [menu-bar view filter add-saved-filters] (quote (menu-item "Add to permanently saved filters..." ibuffer-add-saved-filters :enable (and (featurep (quote ibuf-ext)) ibuffer-filtering-qualifiers) :help "Include already saved stack with current filters"))) (define-key-after map [menu-bar view filter delete-saved-filters] (quote (menu-item "Delete permanently saved filters..." ibuffer-delete-saved-filters :enable (and (featurep (quote ibuf-ext)) ibuffer-saved-filters)))) (define-key-after map [menu-bar view filter-groups] (cons "Filter Groups" ibuffer-mode-groups-popup)) (define-key-after map [menu-bar view dashes2] (quote ("--"))) (define-key-after map [menu-bar view diff-with-file] (quote (menu-item "Diff with file" ibuffer-diff-with-file :help "View the differences between this buffer and its file"))) (define-key-after map [menu-bar view auto-mode] (quote (menu-item "Toggle Auto Mode" ibuffer-auto-mode :help "Attempt to automatically update the Ibuffer buffer"))) (define-key-after map [menu-bar view customize] (quote (menu-item "Customize Ibuffer" ibuffer-customize :help "Use Custom to customize Ibuffer"))) (define-key-after map [menu-bar mark] (cons "Mark" (make-sparse-keymap "Mark"))) (define-key-after map [menu-bar mark toggle-marks] (quote (menu-item "Toggle marks" ibuffer-toggle-marks :help "Unmark marked buffers, and mark unmarked buffers"))) (define-key-after map [menu-bar mark mark-forward] (quote (menu-item "Mark" ibuffer-mark-forward :help "Mark the buffer at point"))) (define-key-after map [menu-bar mark unmark-forward] (quote (menu-item "Unmark" ibuffer-unmark-forward :help "Unmark the buffer at point"))) (define-key-after map [menu-bar mark mark-by-mode] (quote (menu-item "Mark by mode..." ibuffer-mark-by-mode :help "Mark all buffers in a particular major mode"))) (define-key-after map [menu-bar mark mark-modified-buffers] (quote (menu-item "Mark modified buffers" ibuffer-mark-modified-buffers :help "Mark all buffers which have been modified"))) (define-key-after map [menu-bar mark mark-unsaved-buffers] (quote (menu-item "Mark unsaved buffers" ibuffer-mark-unsaved-buffers :help "Mark all buffers which have a file and are modified"))) (define-key-after map [menu-bar mark mark-read-only-buffers] (quote (menu-item "Mark read-only buffers" ibuffer-mark-read-only-buffers :help "Mark all buffers which are read-only"))) (define-key-after map [menu-bar mark mark-special-buffers] (quote (menu-item "Mark special buffers" ibuffer-mark-special-buffers :help "Mark all buffers whose name begins with a *"))) (define-key-after map [menu-bar mark mark-dired-buffers] (quote (menu-item "Mark dired buffers" ibuffer-mark-dired-buffers :help "Mark buffers in dired-mode"))) (define-key-after map [menu-bar mark mark-dissociated-buffers] (quote (menu-item "Mark dissociated buffers" ibuffer-mark-dissociated-buffers :help "Mark buffers with a non-existent associated file"))) (define-key-after map [menu-bar mark mark-help-buffers] (quote (menu-item "Mark help buffers" ibuffer-mark-help-buffers :help "Mark buffers in help-mode"))) (define-key-after map [menu-bar mark mark-compressed-file-buffers] (quote (menu-item "Mark compressed file buffers" ibuffer-mark-compressed-file-buffers :help "Mark buffers which have a file that is compressed"))) (define-key-after map [menu-bar mark mark-old-buffers] (quote (menu-item "Mark old buffers" ibuffer-mark-old-buffers :help "Mark buffers which have not been viewed recently"))) (define-key-after map [menu-bar mark unmark-all] (quote (menu-item "Unmark All" ibuffer-unmark-all))) (define-key-after map [menu-bar mark dashes] (quote ("--"))) (define-key-after map [menu-bar mark mark-by-name-regexp] (quote (menu-item "Mark by buffer name (regexp)..." ibuffer-mark-by-name-regexp :help "Mark buffers whose name matches a regexp"))) (define-key-after map [menu-bar mark mark-by-mode-regexp] (quote (menu-item "Mark by major mode (regexp)..." ibuffer-mark-by-mode-regexp :help "Mark buffers whose major mode name matches a regexp"))) (define-key-after map [menu-bar mark mark-by-file-name-regexp] (quote (menu-item "Mark by file name (regexp)..." ibuffer-mark-by-file-name-regexp :help "Mark buffers whose file name matches a regexp"))) map)) nil [16540 34210])
            ("ibuffer-mode-operate-map" variable (:default-value (let ((operate-map (make-sparse-keymap "Operate"))) (define-key-after operate-map [do-view] (quote (menu-item "View" ibuffer-do-view))) (define-key-after operate-map [do-view-other-frame] (quote (menu-item "View (separate frame)" ibuffer-do-view-other-frame))) (define-key-after operate-map [do-save] (quote (menu-item "Save" ibuffer-do-save))) (define-key-after operate-map [do-replace-regexp] (quote (menu-item "Replace (regexp)..." ibuffer-do-replace-regexp :help "Replace text inside marked buffers"))) (define-key-after operate-map [do-query-replace] (quote (menu-item "Query Replace..." ibuffer-do-query-replace :help "Replace text in marked buffers, asking each time"))) (define-key-after operate-map [do-query-replace-regexp] (quote (menu-item "Query Replace (regexp)..." ibuffer-do-query-replace-regexp :help "Replace text in marked buffers by regexp, asking each time"))) (define-key-after operate-map [do-print] (quote (menu-item "Print" ibuffer-do-print))) (define-key-after operate-map [do-toggle-modified] (quote (menu-item "Toggle modification flag" ibuffer-do-toggle-modified))) (define-key-after operate-map [do-revert] (quote (menu-item "Revert" ibuffer-do-revert :help "Revert marked buffers to their associated file"))) (define-key-after operate-map [do-rename-uniquely] (quote (menu-item "Rename Uniquely" ibuffer-do-rename-uniquely :help "Rename marked buffers to a new, unique name"))) (define-key-after operate-map [do-delete] (quote (menu-item "Kill" ibuffer-do-delete))) (define-key-after operate-map [do-occur] (quote (menu-item "List lines matching..." ibuffer-do-occur :help "View all lines in marked buffers matching a regexp"))) (define-key-after operate-map [do-shell-command-pipe] (quote (menu-item "Pipe to shell command..." ibuffer-do-shell-command-pipe :help "For each marked buffer, send its contents to a shell command"))) (define-key-after operate-map [do-shell-command-pipe-replace] (quote (menu-item "Pipe to shell command (replace)..." ibuffer-do-shell-command-pipe-replace :help "For each marked buffer, replace its contents with output of shell command"))) (define-key-after operate-map [do-shell-command-file] (quote (menu-item "Shell command on buffer's file..." ibuffer-do-shell-command-file :help "For each marked buffer, run a shell command with its file as argument"))) (define-key-after operate-map [do-eval] (quote (menu-item "Eval..." ibuffer-do-eval :help "Evaluate a Lisp form in each marked buffer"))) (define-key-after operate-map [do-view-and-eval] (quote (menu-item "Eval (viewing buffer)..." ibuffer-do-view-and-eval :help "Evaluate a Lisp form in each marked buffer while viewing it"))) operate-map)) nil [34212 37052])
            ("define-key" code nil nil [37054 37242])
            ("define-key" code nil nil [37243 37447])
            ("ibuffer-name-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [(mouse-1)] (quote ibuffer-mouse-toggle-mark)) (define-key map [(mouse-2)] (quote ibuffer-mouse-visit-buffer)) (define-key map [down-mouse-3] (quote ibuffer-mouse-popup-menu)) map)) nil [37449 37702])
            ("ibuffer-filename/process-header-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [(mouse-1)] (quote ibuffer-do-sort-by-filename/process)) map)) nil [37704 37863])
            ("ibuffer-mode-name-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [(mouse-2)] (quote ibuffer-mouse-filter-by-mode)) (define-key map (kbd "RET") (quote ibuffer-interactive-filter-by-mode)) map)) nil [37865 38072])
            ("ibuffer-name-header-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [(mouse-1)] (quote ibuffer-do-sort-by-alphabetic)) map)) nil [38074 38215])
            ("ibuffer-size-header-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [(mouse-1)] (quote ibuffer-do-sort-by-size)) map)) nil [38217 38352])
            ("ibuffer-mode-header-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [(mouse-1)] (quote ibuffer-do-sort-by-major-mode)) map)) nil [38354 38495])
            ("ibuffer-mode-filter-group-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [(mouse-1)] (quote ibuffer-mouse-toggle-mark)) (define-key map [(mouse-2)] (quote ibuffer-mouse-toggle-filter-group)) (define-key map (kbd "RET") (quote ibuffer-toggle-filter-group)) (define-key map [down-mouse-3] (quote ibuffer-mouse-popup-menu)) map)) nil [38497 38832])
            ("ibuffer-restore-window-config-on-quit" variable nil nil [38834 38962])
            ("ibuffer-prev-window-config" variable nil nil [38964 39053])
            ("ibuffer-did-modification" variable nil nil [39055 39092])
            ("ibuffer-compiled-formats" variable nil nil [39094 39131])
            ("ibuffer-cached-formats" variable nil nil [39132 39167])
            ("ibuffer-cached-eliding-string" variable nil nil [39168 39210])
            ("ibuffer-cached-elide-long-columns" variable nil nil [39211 39255])
            ("ibuffer-sorting-functions-alist" variable nil nil [39257 39757])
            ("ibuffer-columnize-and-insert-list" function (:arguments ("list" "pad-width")) nil [39781 40468])
            ("ibuffer-current-mark" function nil nil [40470 40585])
            ("ibuffer-mouse-toggle-mark" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [40587 41143])
            ("ibuffer-find-file" function
               (:user-visible-flag t
                :arguments ("file" "wildcards"))
                nil [41145 41568])
            ("ibuffer-mouse-visit-buffer" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [41570 41778])
            ("ibuffer-mouse-popup-menu" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [41780 42499])
            ("ibuffer-skip-properties" function (:arguments ("props" "direction")) nil [42501 42748])
            ("ibuffer-customize" function (:user-visible-flag t) nil [42750 42868])
            ("ibuffer-backward-line" function
               (:user-visible-flag t
                :arguments ("arg" "skip-group-names"))
                nil [42870 43657])
            ("ibuffer-forward-line" function
               (:user-visible-flag t
                :arguments ("arg" "skip-group-names"))
                nil [43659 44702])
            ("ibuffer-visit-buffer" function
               (:user-visible-flag t
                :arguments ("single"))
                nil [44704 45006])
            ("ibuffer-visit-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("noselect"))
                nil [45008 45362])
            ("ibuffer-visit-buffer-other-window-noselect" function (:user-visible-flag t) nil [45364 45547])
            ("ibuffer-visit-buffer-other-frame" function (:user-visible-flag t) nil [45549 45777])
            ("ibuffer-visit-buffer-1-window" function (:user-visible-flag t) nil [45779 45923])
            ("ibuffer-bury-buffer" function (:user-visible-flag t) nil [45925 46192])
            ("ibuffer-visit-tags-table" function (:user-visible-flag t) nil [46194 46470])
            ("ibuffer-do-view" function
               (:user-visible-flag t
                :arguments ("other-frame"))
                nil [46472 46844])
            ("ibuffer-do-view-horizontally" function
               (:user-visible-flag t
                :arguments ("other-frame"))
                nil [46846 47046])
            ("ibuffer-do-view-1" function (:arguments ("type")) nil [47048 47985])
            ("ibuffer-do-view-other-frame" function (:user-visible-flag t) nil [47987 48120])
            ("ibuffer-map-marked-lines" function (:arguments ("func")) nil [48122 48247])
            ("ibuffer-shrink-to-fit" function (:arguments ("owin")) nil [48249 48554])
            ("ibuffer-confirm-operation-on" function (:arguments ("operation" "names")) nil [48556 50023])
            ("ibuffer-map-lines-nomodify" function (:arguments ("function")) nil [50025 50171])
            ("ibuffer-buffer-names-with-mark" function (:arguments ("mark")) nil [50173 50478])
            ("ibuffer-marked-buffer-names" function nil nil [50480 50576])
            ("ibuffer-deletion-marked-buffer-names" function nil nil [50578 50685])
            ("ibuffer-count-marked-lines" function (:arguments ("all")) nil [50687 50945])
            ("ibuffer-count-deletion-lines" function nil nil [50947 51089])
            ("ibuffer-map-deletion-lines" function (:arguments ("func")) nil [51091 51186])
            ("ibuffer-assert-ibuffer-mode" function nil nil [51188 51274])
            ("ibuffer-buffer-file-name" function nil nil [51276 51572])
            ("define-ibuffer-op" code nil nil [51574 51996])
            ("define-ibuffer-op" code nil nil [51998 52203])
            ("define-ibuffer-op" code nil nil [52205 52486])
            ("define-ibuffer-op" code nil nil [52488 52722])
            ("define-ibuffer-op" code nil nil [52724 53006])
            ("ibuffer-unmark-all" function
               (:user-visible-flag t
                :arguments ("mark"))
                nil [53008 53683])
            ("ibuffer-toggle-marks" function
               (:user-visible-flag t
                :arguments ("group"))
                nil [53685 54347])
            ("ibuffer-mark-forward" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [54349 54587])
            ("ibuffer-unmark-forward" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [54589 54815])
            ("ibuffer-unmark-backward" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [54817 55046])
            ("ibuffer-mark-interactive" function (:arguments ("arg" "mark" "movement")) nil [55048 55504])
            ("ibuffer-set-mark" function (:arguments ("mark")) nil [55506 55725])
            ("ibuffer-set-mark-1" function (:arguments ("mark")) nil [55727 55935])
            ("ibuffer-mark-for-delete" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [55937 56174])
            ("ibuffer-mark-for-delete-backwards" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [56176 56425])
            ("ibuffer-current-buffer" function (:arguments ("must-be-live")) nil [56427 56814])
            ("ibuffer-active-formats-name" function nil nil [56816 57147])
            ("ibuffer-current-formats" function (:arguments ("uncompiledp")) nil [57149 57493])
            ("ibuffer-current-format" function (:arguments ("uncompiledp")) nil [57495 57686])
            ("ibuffer-expand-format-entry" function (:arguments ("form")) nil [57688 58316])
            ("ibuffer-compile-make-eliding-form" function (:arguments ("strvar" "elide" "from-end-p")) nil [58318 58772])
            ("ibuffer-compile-make-substring-form" function (:arguments ("strvar" "maxvar" "from-end-p")) nil [58774 58943])
            ("ibuffer-compile-make-format-form" function (:arguments ("strvar" "widthform" "alignment")) nil [58945 59367])
            ("ibuffer-compile-format" function (:arguments ("format")) nil [59369 64278])
            ("ibuffer-recompile-formats" function (:user-visible-flag t) nil [64280 64727])
            ("ibuffer-clear-summary-columns" function (:arguments ("format")) nil [64729 64937])
            ("ibuffer-check-formats" function nil nil [64939 66103])
            ("ibuffer-inline-columns" variable nil nil [66105 66140])
            ("define-ibuffer-column" code nil nil [66142 66208])
            ("define-ibuffer-column" code nil nil [66210 66335])
            ("define-ibuffer-column" code nil nil [66337 66463])
            ("define-ibuffer-column" code nil nil [66465 67109])
            ("define-ibuffer-column" code nil nil [67111 67461])
            ("define-ibuffer-column" code nil nil [67463 67720])
            ("define-ibuffer-column" code nil nil [67722 68057])
            ("define-ibuffer-column" code nil nil [68059 68418])
            ("define-ibuffer-column" code nil nil [68420 69445])
            ("ibuffer-format-column" function (:arguments ("str" "width" "alignment")) nil [69447 69729])
            ("ibuffer-buffer-name-face" function (:arguments ("buf" "mark")) nil [69731 70146])
            ("ibuffer-insert-buffer-line" function (:arguments ("buffer" "mark" "format")) nil [70148 70442])
            ("ibuffer-redisplay-current" function nil nil [70552 71143])
            ("ibuffer-map-on-mark" function (:arguments ("mark" "func")) nil [71145 71295])
            ("ibuffer-map-lines" function (:arguments ("function" "nomodify" "group")) nil [71297 73516])
            ("ibuffer-get-marked-buffers" function nil nil [73518 73734])
            ("ibuffer-current-state-list" function (:arguments ("pos")) nil [73736 74497])
            ("ibuffer-current-buffers-with-marks" function (:arguments ("curbufs")) nil [74499 74767])
            ("ibuffer-buf-matches-predicates" function (:arguments ("buf" "predicates")) nil [74769 75009])
            ("ibuffer-filter-buffers" function (:arguments ("ibuffer-buf" "last" "bmarklist" "all")) nil [75011 75506])
            ("ibuffer-visible-p" function (:arguments ("buf" "all" "ibuffer-buf")) nil [75508 75748])
            ("ibuffer-do-sort-by-recency" function (:user-visible-flag t) nil [75834 76151])
            ("ibuffer-update-format" function nil nil [76153 76333])
            ("ibuffer-switch-format" function (:user-visible-flag t) nil [76335 76728])
            ("ibuffer-update-title-and-summary" function (:arguments ("format")) nil [76730 79702])
            ("ibuffer-redisplay" function
               (:user-visible-flag t
                :arguments ("silent"))
                nil [79705 80419])
            ("ibuffer-update" function
               (:user-visible-flag t
                :arguments ("arg" "silent"))
                nil [80421 82029])
            ("ibuffer-sort-bufferlist" function (:arguments ("bmarklist")) nil [82031 82544])
            ("ibuffer-insert-filter-group" function (:arguments ("name" "display-name" "filter-string" "format" "bmarklist")) nil [82546 83448])
            ("ibuffer-redisplay-engine" function (:arguments ("bmarklist" "_ignore")) nil [83450 85047])
            ("ibuffer-quit" function (:user-visible-flag t) nil [85049 85406])
            ("ibuffer-list-buffers" function
               (:user-visible-flag t
                :arguments ("files-only"))
                nil [85423 85709])
            ("ibuffer-other-window" function
               (:user-visible-flag t
                :arguments ("files-only"))
                nil [85726 86024])
            ("ibuffer" function
               (:user-visible-flag t
                :arguments ("other-window-p" "name" "qualifiers" "noselect" "shrink" "filter-groups" "formats"))
                nil [86041 88214])
            ("put" code nil nil [88216 88256])
            ("ibuffer-mode" function nil nil [88257 101143])
            ("ibuffer-auto-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [102996 103296])
            ("ibuffer-mouse-filter-by-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [103298 103436])
            ("ibuffer-interactive-filter-by-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [103438 103583])
            ("ibuffer-mouse-toggle-filter-group" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [103585 103733])
            ("ibuffer-toggle-filter-group" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [103735 103862])
            ("ibuffer-forward-filter-group" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [103864 103995])
            ("ibuffer-backward-filter-group" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [103997 104130])
            ("ibuffer-do-shell-command-pipe" function (:prototype-flag t) nil [104132 104184])
            ("ibuffer-do-shell-command-pipe-replace" function (:prototype-flag t) nil [104186 104246])
            ("ibuffer-do-shell-command-file" function (:prototype-flag t) nil [104248 104300])
            ("ibuffer-do-eval" function (:prototype-flag t) nil [104302 104340])
            ("ibuffer-do-view-and-eval" function (:prototype-flag t) nil [104342 104389])
            ("ibuffer-do-rename-uniquely" function (:prototype-flag t) nil [104391 104440])
            ("ibuffer-do-revert" function (:prototype-flag t) nil [104442 104482])
            ("ibuffer-do-isearch" function (:prototype-flag t) nil [104484 104525])
            ("ibuffer-do-isearch-regexp" function (:prototype-flag t) nil [104527 104575])
            ("ibuffer-do-replace-regexp" function (:prototype-flag t) nil [104577 104625])
            ("ibuffer-do-query-replace" function (:prototype-flag t) nil [104627 104674])
            ("ibuffer-do-query-replace-regexp" function (:prototype-flag t) nil [104676 104730])
            ("ibuffer-do-print" function (:prototype-flag t) nil [104732 104771])
            ("ibuffer-included-in-filters-p" function (:prototype-flag t) nil [104773 104857])
            ("ibuffer-filters-to-filter-group" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [104859 104984])
            ("ibuffer-set-filter-groups-by-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [104986 105108])
            ("ibuffer-pop-filter-group" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [105110 105205])
            ("ibuffer-decompose-filter-group" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [105207 105337])
            ("ibuffer-clear-filter-groups" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [105339 105432])
            ("ibuffer-jump-to-filter-group" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [105434 105558])
            ("ibuffer-kill-filter-group" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [105560 105725])
            ("ibuffer-kill-line" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [105727 105882])
            ("ibuffer-yank" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [105884 105993])
            ("ibuffer-yank-filter-group" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [105995 106124])
            ("ibuffer-save-filter-groups" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [106126 106361])
            ("ibuffer-delete-saved-filter-groups" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [106363 106533])
            ("ibuffer-switch-to-saved-filter-groups" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [106535 106731])
            ("ibuffer-filter-disable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [106733 107009])
            ("ibuffer-pop-filter" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [107011 107107])
            ("ibuffer-decompose-filter" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [107109 107448])
            ("ibuffer-exchange-filters" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [107450 107572])
            ("ibuffer-negate-filter" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [107574 107693])
            ("ibuffer-or-filter" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [107695 107921])
            ("ibuffer-save-filters" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [107923 108128])
            ("ibuffer-delete-saved-filters" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [108130 108264])
            ("ibuffer-add-saved-filters" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [108266 108409])
            ("ibuffer-switch-to-saved-filters" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [108411 108564])
            ("ibuffer-filter-by-mode" function (:prototype-flag t) nil [108566 108611])
            ("ibuffer-filter-by-used-mode" function (:prototype-flag t) nil [108613 108663])
            ("ibuffer-filter-by-derived-mode" function (:prototype-flag t) nil [108665 108718])
            ("ibuffer-filter-by-name" function (:prototype-flag t) nil [108720 108765])
            ("ibuffer-filter-by-filename" function (:prototype-flag t) nil [108767 108816])
            ("ibuffer-filter-by-size-gt" function (:prototype-flag t) nil [108818 108867])
            ("ibuffer-filter-by-size-lt" function (:prototype-flag t) nil [108869 108918])
            ("ibuffer-filter-by-content" function (:prototype-flag t) nil [108920 108968])
            ("ibuffer-filter-by-predicate" function (:prototype-flag t) nil [108970 109020])
            ("ibuffer-toggle-sorting-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [109022 109313])
            ("ibuffer-invert-sorting" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [109315 109428])
            ("ibuffer-do-sort-by-major-mode" function (:prototype-flag t) nil [109430 109482])
            ("ibuffer-do-sort-by-mode-name" function (:prototype-flag t) nil [109484 109535])
            ("ibuffer-do-sort-by-alphabetic" function (:prototype-flag t) nil [109537 109589])
            ("ibuffer-do-sort-by-size" function (:prototype-flag t) nil [109591 109637])
            ("ibuffer-do-sort-by-filename/process" function (:prototype-flag t) nil [109639 109697])
            ("ibuffer-bs-show" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [109699 109796])
            ("ibuffer-add-to-tmp-hide" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [109798 110004])
            ("ibuffer-add-to-tmp-show" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [110006 110215])
            ("ibuffer-forward-next-marked" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [110217 110620])
            ("ibuffer-backwards-next-marked" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [110622 110887])
            ("ibuffer-do-kill-lines" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [110889 110990])
            ("ibuffer-jump-to-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [110992 111457])
            ("ibuffer-diff-with-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [111459 111711])
            ("ibuffer-copy-filename-as-kill" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [111713 112297])
            ("ibuffer-mark-by-name-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [112299 112417])
            ("ibuffer-mark-by-mode-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [112419 112543])
            ("ibuffer-mark-by-file-name-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [112545 112673])
            ("ibuffer-mark-by-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [112675 112787])
            ("ibuffer-mark-modified-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [112789 112885])
            ("ibuffer-mark-unsaved-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [112887 113011])
            ("ibuffer-mark-dissociated-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [113013 113140])
            ("ibuffer-mark-help-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [113142 113252])
            ("ibuffer-mark-compressed-file-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [113254 113380])
            ("ibuffer-mark-old-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [113382 113515])
            ("ibuffer-mark-special-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [113517 113639])
            ("ibuffer-mark-read-only-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [113641 113739])
            ("ibuffer-mark-dired-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [113741 113833])
            ("ibuffer-do-occur" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [113835 114056])
            ("ibuffer" package nil nil [114115 114133])
            ("run-hooks" code nil nil [114135 114165]))          
    :file "ibuffer.el"
    :pointmax 114243
    :fsize 114242
    :lastmodtime '(20806 7942 0 0)
    :unmatched-syntax '((close-paren 1214 . 1215) (symbol 1135 . 1152) (open-paren 1134 . 1135))
    )
   (semanticdb-table "ibuf-macs.el"
    :file "ibuf-macs.el"
    :fsize 10629
    :lastmodtime '(20806 7942 0 0)
    )
   (semanticdb-table "help-mode.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("button" include nil nil [1043 1060])
            ("easymenu" include nil nil [1080 1099])
            ("help-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map (make-composed-keymap button-buffer-map special-mode-map)) (define-key map [mouse-2] (quote help-follow-mouse)) (define-key map "" (quote help-go-back)) (define-key map "" (quote help-go-forward)) (define-key map [XF86Back] (quote help-go-back)) (define-key map [XF86Forward] (quote help-go-forward)) (define-key map "" (quote help-follow-symbol)) (define-key map "" (quote help-follow)) map)) nil [1102 1664])
            ("easy-menu-define" code nil nil [1666 2242])
            ("help-xref-stack" variable nil nil [2244 2514])
            ("put" code nil nil [2515 2556])
            ("make-variable-buffer-local" code nil nil [2557 2602])
            ("help-xref-forward-stack" variable nil nil [2604 2879])
            ("put" code nil nil [2880 2929])
            ("make-variable-buffer-local" code nil nil [2930 2983])
            ("help-xref-stack-item" variable nil nil [2985 3129])
            ("put" code nil nil [3130 3176])
            ("make-variable-buffer-local" code nil nil [3177 3227])
            ("help-xref-stack-forward-item" variable nil nil [3229 3375])
            ("put" code nil nil [3376 3430])
            ("make-variable-buffer-local" code nil nil [3431 3489])
            ("setq-default" code nil nil [3491 3550])
            ("setq-default" code nil nil [3551 3626])
            ("help-mode-hook" variable nil nil [3628 3716])
            ("define-button-type" code nil nil [3749 3828])
            ("help-button-action" function (:arguments ("button")) nil [3830 4007])
            ("define-button-type" code nil nil [4179 4337])
            ("define-button-type" code nil nil [4339 4497])
            ("define-button-type" code nil nil [4499 4645])
            ("define-button-type" code nil nil [4647 4820])
            ("define-button-type" code nil nil [4822 4992])
            ("define-button-type" code nil nil [4994 5167])
            ("define-button-type" code nil nil [5216 5372])
            ("define-button-type" code nil nil [5374 5538])
            ("define-button-type" code nil nil [5540 5711])
            ("define-button-type" code nil nil [5713 5944])
            ("define-button-type" code nil nil [5946 6085])
            ("define-button-type" code nil nil [6087 6238])
            ("define-button-type" code nil nil [6240 6426])
            ("define-button-type" code nil nil [6428 6602])
            ("define-button-type" code nil nil [6604 7241])
            ("define-button-type" code nil nil [7243 7843])
            ("define-button-type" code nil nil [7845 8313])
            ("define-button-type" code nil nil [8315 8844])
            ("define-button-type" code nil nil [8846 8996])
            ("define-button-type" code nil nil [8998 9170])
            ("define-button-type" code nil nil [9172 9317])
            ("define-button-type" code nil nil [9319 9482])
            ("define-button-type" code nil nil [9484 9786])
            ("bookmark-make-record-function" variable nil nil [9790 9828])
            ("define-derived-mode" code nil nil [9845 10233])
            ("help-mode-setup" function nil nil [10250 10320])
            ("help-mode-finish" function nil nil [10337 10729])
            ("help-back-label" variable (:default-value (purecopy "[back]")) nil [10973 11082])
            ("help-forward-label" variable (:default-value (purecopy "[forward]")) nil [11084 11202])
            ("help-xref-symbol-regexp" variable
               (:constant-flag t
                :default-value (purecopy (concat "\\(\\<\\(\\(variable\\|option\\)\\|" "\\(function\\|command\\)\\|" "\\(face\\)\\|" "\\(symbol\\|program\\|property\\)\\|" "\\(source \\(?:code \\)?\\(?:of\\|for\\)\\)\\)" "[ 	
]+\\)?" "`\\(\\sw\\(\\sw\\|\\s_\\)+\\)'")))
                nil [11204 11829])
            ("help-xref-mule-regexp" variable nil nil [11831 12104])
            ("help-xref-info-regexp" variable
               (:constant-flag t
                :default-value (purecopy "\\<[Ii]nfo[ 	
]+\\(node\\|anchor\\)[ 	
]+`\\([^']+\\)'"))
                nil [12107 12272])
            ("help-xref-url-regexp" variable
               (:constant-flag t
                :default-value (purecopy "\\<[Uu][Rr][Ll][ 	
]+`\\([^']+\\)'"))
                nil [12274 12409])
            ("help-setup-xref" function (:arguments ("item" "interactive-p")) nil [12426 13331])
            ("help-xref-following" variable nil nil [13333 13416])
            ("help-buffer" function nil nil [13433 13979])
            ("help-make-xrefs" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [13996 23818])
            ("help-xref-button" function (:arguments ("match-number" "type" "args")) nil [23835 24419])
            ("help-insert-xref-button" function (:arguments ("string" "type" "args")) nil [24436 24798])
            ("help-xref-on-pp" function (:arguments ("from" "to")) nil [24815 25714])
            ("help-xref-interned" function (:arguments ("symbol")) nil [25783 27762])
            ("help-xref-go-back" function (:arguments ("buffer")) nil [27805 28603])
            ("help-xref-go-forward" function (:arguments ("buffer")) nil [28605 29384])
            ("help-go-back" function (:user-visible-flag t) nil [29386 29580])
            ("help-go-forward" function (:user-visible-flag t) nil [29582 29782])
            ("help-do-xref" function (:arguments ("_pos" "function" "args")) nil [29784 30090])
            ("help-follow-mouse" function (:user-visible-flag t) nil [30147 30277])
            ("help-follow" function (:user-visible-flag t) nil [30334 30501])
            ("help-follow-symbol" function
               (:user-visible-flag t
                :arguments ("pos"))
                nil [30503 31161])
            ("help-mode-revert-buffer" function (:arguments ("_ignore-auto" "noconfirm")) nil [31163 31544])
            ("help-insert-string" function (:arguments ("string")) nil [31546 32017])
            ("declare-function" code nil nil [32042 32105])
            ("declare-function" code nil nil [32106 32218])
            ("help-bookmark-make-record" function nil nil [32220 32704])
            ("help-bookmark-jump" function (:arguments ("bookmark")) nil [32721 33184])
            ("help-mode" package nil nil [33187 33207]))          
    :file "help-mode.el"
    :pointmax 33236
    :fsize 33235
    :lastmodtime '(20806 7942 0 0)
    :unmatched-syntax '((close-paren 1099 . 1100) (symbol 1062 . 1079) (open-paren 1061 . 1062))
    )
   (semanticdb-table "shell.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("comint" include nil nil [4338 4355])
            ("pcomplete" include nil nil [4356 4376])
            ("shell" customgroup (:user-visible-flag t) nil [4418 4518])
            ("shell-directories" customgroup (:user-visible-flag t) nil [4520 4605])
            ("shell-faces" customgroup (:user-visible-flag t) nil [4607 4677])
            ("shell-dumb-shell-regexp" variable (:default-value (purecopy "cmd\\(proxy\\)?\\.exe")) nil [4694 5080])
            ("shell-prompt-pattern" variable (:default-value "^[^#$%>
]*[#$%>] *") nil [5082 5722])
            ("shell-completion-fignore" variable nil nil [5724 6072])
            ("shell-delimiter-argument-list" variable (:default-value (quote (124 38 60 62 40 41 59))) nil [6074 6442])
            ("shell-file-name-chars" variable (:default-value (if (memq system-type (quote (ms-dos windows-nt cygwin))) "~/A-Za-z0-9_^$!#%&{}@`'.,:()-" "[]~/A-Za-z0-9+@:_.$#%,={}-")) nil [6444 6819])
            ("shell-file-name-quote-list" variable (:default-value (if (memq system-type (quote (ms-dos windows-nt))) nil (append shell-delimiter-argument-list (quote (32 36 42 33 34 39 96 35 92))))) nil [6821 7237])
            ("shell-dynamic-complete-functions" variable (:default-value (quote (comint-c-a-p-replace-by-expanded-history shell-environment-variable-completion shell-command-completion shell-c-a-p-replace-by-expanded-directory pcomplete-completions-at-point shell-filename-completion comint-filename-completion))) nil [7239 7730])
            ("shell-command-regexp" variable (:default-value "[^;&|
]+") nil [7732 7931])
            ("shell-command-separator-regexp" variable (:default-value "[;&|
 	]*") nil [7933 8144])
            ("shell-completion-execonly" variable (:default-value t) nil [8146 8407])
            ("shell-popd-regexp" variable (:default-value "popd") nil [8409 8547])
            ("shell-pushd-regexp" variable (:default-value "pushd") nil [8549 8690])
            ("shell-pushd-tohome" variable nil nil [8692 8887])
            ("shell-pushd-dextract" variable nil nil [8889 9082])
            ("shell-pushd-dunique" variable nil nil [9084 9277])
            ("shell-cd-regexp" variable (:default-value "cd") nil [9279 9411])
            ("shell-chdrive-regexp" variable (:default-value (if (memq system-type (quote (ms-dos windows-nt))) "[]a-zA-Z^_`\\[\\\\]:" nil)) nil [9413 9727])
            ("shell-dirtrack-verbose" variable (:default-value t) nil [9729 10050])
            ("explicit-shell-file-name" variable nil nil [10052 10232])
            ("explicit-csh-args" variable (:default-value (if (eq system-type (quote hpux)) (quote ("-i" "-T")) (quote ("-i")))) nil [10376 10749])
            ("explicit-bash-args" variable (:default-value (let* ((prog (or (and (boundp (quote explicit-shell-file-name)) explicit-shell-file-name) (getenv "ESHELL") shell-file-name)) (name (file-name-nondirectory prog))) (if (and (not purify-flag) (equal name "bash") (file-executable-p prog) (string-match "bad option" (shell-command-to-string (concat (shell-quote-argument prog) " --noediting")))) (quote ("-i")) (quote ("--noediting" "-i"))))) nil [10907 11730])
            ("shell-input-autoexpand" variable (:default-value (quote history)) nil [11732 12355])
            ("shell-dirstack" variable nil nil [12357 12506])
            ("shell-dirtrackp" variable (:default-value t) nil [12508 12601])
            ("shell-last-dir" variable nil nil [12603 12687])
            ("shell-dirstack-query" variable nil nil [12689 12782])
            ("shell-mode-map" variable (:default-value (let ((map (nconc (make-sparse-keymap) comint-mode-map))) (define-key map "" (quote shell-forward-command)) (define-key map "" (quote shell-backward-command)) (define-key map "	" (quote completion-at-point)) (define-key map (kbd "M-RET") (quote shell-resync-dirs)) (define-key map "\277" (quote comint-dynamic-list-filename-completions)) (define-key map [menu-bar completion] (cons "Complete" (copy-keymap (lookup-key comint-mode-map [menu-bar completion])))) (define-key-after (lookup-key map [menu-bar completion]) [complete-env-variable] (quote ("Complete Env. Variable Name" . shell-dynamic-complete-environment-variable)) (quote complete-file)) (define-key-after (lookup-key map [menu-bar completion]) [expand-directory] (quote ("Expand Directory Reference" . shell-replace-by-expanded-directory)) (quote complete-expand)) map)) nil [12784 13677])
            ("shell-mode-hook" variable (:default-value (quote nil)) nil [13679 13777])
            ("shell-font-lock-keywords" variable (:default-value (quote (("[ 	]\\([+-][^ 	
]+\\)" 1 font-lock-comment-face) ("^[^ 	
]+:.*" . font-lock-string-face) ("^\\[[1-9][0-9]*\\]" . font-lock-string-face)))) nil [13779 14023])
            ("shell--unquote&requote-argument" function (:arguments ("qstr" "upos")) nil [14047 15773])
            ("shell--unquote-argument" function (:arguments ("str")) nil [15775 15858])
            ("shell--requote-argument" function (:arguments ("upos" "qstr")) nil [15859 16039])
            ("shell--parse-pcomplete-arguments" function nil nil [16041 17674])
            ("shell-command-completion-function" function nil nil [17676 18028])
            ("shell-completion-vars" function nil nil [18030 19695])
            ("put" code nil nil [19697 19735])
            ("define-derived-mode" code nil nil [19737 25157])
            ("shell-filter-ctrl-a-ctrl-b" function (:arguments ("string")) nil [25159 25787])
            ("shell-write-history-on-exit" function (:arguments ("process" "event")) nil [25789 26386])
            ("shell" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [26403 30164])
            ("shell-directory-tracker" function (:arguments ("str")) nil [32280 34543])
            ("shell-unquote-argument" function (:arguments ("string")) nil [34545 35413])
            ("shell-process-popd" function (:arguments ("arg")) nil [35428 35973])
            ("shell-prefixed-directory-name" function (:arguments ("dir")) nil [36043 36373])
            ("shell-process-cd" function (:arguments ("arg")) nil [36387 36709])
            ("shell-process-pushd" function (:arguments ("arg")) nil [36731 38213])
            ("shell-extract-num" function (:arguments ("str")) nil [38279 38386])
            ("defvaralias" code nil nil [38388 38439])
            ("define-minor-mode" code nil nil [38440 39103])
            ("define-obsolete-function-alias" code nil nil [39105 39190])
            ("shell-cd" function (:arguments ("dir")) nil [39192 39363])
            ("shell-resync-dirs" function (:user-visible-flag t) nil [39365 41781])
            ("defalias" code nil nil [41815 41850])
            ("shell-dirstack-message" function nil nil [42128 42978])
            ("shell-snarf-envar" function (:arguments ("var")) nil [43030 43773])
            ("shell-copy-environment-variable" function
               (:user-visible-flag t
                :arguments ("variable"))
                nil [43775 44301])
            ("shell-forward-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [44303 44633])
            ("shell-backward-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [44636 45148])
            ("shell-dynamic-complete-command" function (:user-visible-flag t) nil [45150 45825])
            ("shell-command-completion" function nil nil [45827 46185])
            ("shell--command-completion-data" function nil nil [46187 48240])
            ("shell-dynamic-complete-filename" function (:user-visible-flag t) nil [48480 48761])
            ("shell-filename-completion" function nil nil [48763 49125])
            ("shell-match-partial-variable" function nil nil [49127 49530])
            ("shell-dynamic-complete-environment-variable" function (:user-visible-flag t) nil [49532 50504])
            ("shell-environment-variable-completion" function nil nil [50507 51707])
            ("shell-c-a-p-replace-by-expanded-directory" function nil nil [51710 52893])
            ("shell-replace-by-expanded-directory" function (:user-visible-flag t) nil [52895 53226])
            ("shell" package nil nil [53228 53244]))          
    :file "shell.el"
    :pointmax 53269
    :fsize 53268
    :lastmodtime '(20806 7945 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "comint.el"
    :file "comint.el"
    :fsize 161333
    :lastmodtime '(20806 7940 0 0)
    )
   (semanticdb-table "pcomplete.el"
    :file "pcomplete.el"
    :fsize 51939
    :lastmodtime '(20806 7944 0 0)
    )
   (semanticdb-table "linum.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("linum-version" variable
               (:constant-flag t
                :default-value "0.9x")
                nil [1132 1163])
            ("linum-overlays" variable nil nil [1165 1224])
            ("linum-available" variable nil nil [1225 1285])
            ("linum-before-numbering-hook" variable nil nil [1286 1389])
            ("mapc" code nil nil [1391 1460])
            ("linum" customgroup (:user-visible-flag t) nil [1462 1546])
            ("linum-format" variable (:default-value (quote dynamic)) nil [1548 2023])
            ("linum" variable
               (:default-value (quote ((t :inherit (shadow default))))
                :type "face")
                nil [2025 2151])
            ("linum-eager" variable (:default-value t) nil [2153 2416])
            ("linum-delay" variable nil nil [2418 2538])
            ("define-minor-mode" code nil nil [2555 4397])
            ("define-globalized-minor-mode" code nil nil [4414 4482])
            ("linum-on" function nil nil [4484 4547])
            ("linum-delete-overlays" function nil nil [4549 4832])
            ("linum-update-current" function nil nil [4834 4947])
            ("linum-update" function (:arguments ("buffer")) nil [4949 5364])
            ("linum-update-window" function (:arguments ("win")) nil [5366 7424])
            ("linum-after-change" function (:arguments ("beg" "end" "_len")) nil [7426 7694])
            ("linum-after-scroll" function (:arguments ("win" "_start")) nil [7696 7772])
            ("linum-schedule" function nil nil [7837 7991])
            ("linum-unload-function" function nil nil [8106 8232])
            ("linum" package nil nil [8234 8250]))          
    :file "linum.el"
    :pointmax 8275
    :fsize 8274
    :lastmodtime '(20806 7942 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "cmuscheme.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("scheme" include nil nil [4101 4118])
            ("comint" include nil nil [4119 4136])
            ("cmuscheme" customgroup (:user-visible-flag t) nil [4139 4218])
            ("inferior-scheme-mode-hook" variable nil nil [4332 4454])
            ("inferior-scheme-mode-map" variable (:default-value (let ((m (make-sparse-keymap))) (define-key m "\230" (quote scheme-send-definition)) (define-key m "" (quote scheme-send-last-sexp)) (define-key m "" (quote scheme-load-file)) (define-key m "" (quote scheme-compile-file)) (scheme-mode-commands m) m)) nil [4456 4780])
            ("define-key" code nil nil [4855 4917])
            ("define-key" code nil nil [4933 4995])
            ("define-key" code nil nil [5011 5074])
            ("define-key" code nil nil [5075 5145])
            ("define-key" code nil nil [5146 5205])
            ("define-key" code nil nil [5206 5272])
            ("define-key" code nil nil [5273 5339])
            ("define-key" code nil nil [5340 5413])
            ("define-key" code nil nil [5414 5477])
            ("define-key" code nil nil [5478 5545])
            ("define-key" code nil nil [5546 5603])
            ("define-key" code nil nil [5604 5661])
            ("define-key" code nil nil [5662 5722])
            ("let" code nil nil [5741 6894])
            ("scheme-buffer" variable nil nil [6896 6918])
            ("define-derived-mode" code nil nil [6920 8981])
            ("inferior-scheme-filter-regexp" variable (:default-value "\\`\\s *\\S ?\\S ?\\s *\\'") nil [8983 9219])
            ("scheme-input-filter" function (:arguments ("str")) nil [9221 9377])
            ("scheme-get-old-input" function nil nil [9379 9550])
            ("run-scheme" function
               (:user-visible-flag t
                :arguments ("cmd"))
                nil [9567 10673])
            ("scheme-start-file" function (:arguments ("prog")) nil [10675 11154])
            ("scheme-send-region" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [11156 11363])
            ("scheme-send-definition" function (:user-visible-flag t) nil [11365 11604])
            ("scheme-send-last-sexp" function (:user-visible-flag t) nil [11606 11785])
            ("scheme-compile-exp-command" variable (:default-value "(compile '%s)") nil [11787 11952])
            ("scheme-compile-region" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [11954 12321])
            ("scheme-compile-definition" function (:user-visible-flag t) nil [12323 12571])
            ("scheme-trace-command" variable (:default-value "(trace %s)") nil [12573 12957])
            ("scheme-untrace-command" variable (:default-value "(untrace %s)") nil [12959 13177])
            ("scheme-trace-procedure" function
               (:user-visible-flag t
                :arguments ("proc" "untrace"))
                nil [13179 13981])
            ("scheme-macro-expand-command" variable (:default-value "(expand %s)") nil [13983 14163])
            ("scheme-expand-current-form" function (:user-visible-flag t) nil [14165 14638])
            ("scheme-form-at-point" function nil nil [14640 14885])
            ("switch-to-scheme" function
               (:user-visible-flag t
                :arguments ("eob-p"))
                nil [14887 15313])
            ("scheme-send-region-and-go" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [15315 15531])
            ("scheme-send-definition-and-go" function (:user-visible-flag t) nil [15533 15730])
            ("scheme-compile-definition-and-go" function (:user-visible-flag t) nil [15732 15938])
            ("scheme-compile-region-and-go" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [15940 16157])
            ("scheme-source-modes" variable (:default-value (quote (scheme-mode))) nil [16159 16513])
            ("scheme-prev-l/c-dir/file" variable nil nil [16515 16739])
            ("scheme-load-file" function
               (:user-visible-flag t
                :arguments ("file-name"))
                nil [16741 17341])
            ("scheme-compile-file" function
               (:user-visible-flag t
                :arguments ("file-name"))
                nil [17343 17965])
            ("scheme-buffer" variable (:user-visible-flag t) nil [17969 20009])
            ("scheme-proc" function nil nil [20011 20386])
            ("scheme-get-process" function nil nil [20388 20629])
            ("scheme-interactively-start-process" function (:arguments ("_cmd")) nil [20631 20931])
            ("cmuscheme-load-hook" variable nil nil [20969 21129])
            ("run-hooks" code nil nil [21131 21163])
            ("cmuscheme" package nil nil [21165 21185]))          
    :file "cmuscheme.el"
    :pointmax 21214
    :fsize 21213
    :lastmodtime '(20806 7940 0 0)
    :unmatched-syntax 'nil
    )
   )
  :file "!drive_c!emacs-24.3!lisp!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2"
  )
