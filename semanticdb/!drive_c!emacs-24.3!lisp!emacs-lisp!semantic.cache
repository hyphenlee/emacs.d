;; Object emacs-lisp/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "emacs-lisp/"
  :tables (list 
   (semanticdb-table "byte-run.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("macro-declaration-function" variable (:default-value (function macro-declaration-function)) nil [1223 1555])
            ("defalias" code nil nil [1557 2699])
            ("defun-declarations-alist" variable (:default-value (list (list (quote advertised-calling-convention) (function (lambda (f _args arglist when) (list (quote set-advertised-calling-convention) (list (quote quote) f) (list (quote quote) arglist) (list (quote quote) when))))) (list (quote obsolete) (function (lambda (f _args new-name when) (\` (make-obsolete (quote (\, f)) (quote (\, new-name)) (\, when)))))) (list (quote compiler-macro) (function (lambda (f _args compiler-function) (if (not (symbolp compiler-function)) (error "Only symbols are supported in `compiler-macro'") (\` (put (quote (\, f)) (quote compiler-macro) (function (\, compiler-function)))))))) (list (quote doc-string) (function (lambda (f _args pos) (list (quote put) (list (quote quote) f) (quote (quote doc-string-elt)) (list (quote quote) pos))))) (list (quote indent) (function (lambda (f _args val) (list (quote put) (list (quote quote) f) (quote (quote lisp-indent-function)) (list (quote quote) val))))))) nil [2896 4315])
            ("macro-declarations-alist" variable (:default-value (cons (list (quote debug) (function (lambda (name _args spec) (list (quote progn) :autoload-end (list (quote put) (list (quote quote) name) (quote (quote edebug-form-spec)) (list (quote quote) spec)))))) defun-declarations-alist)) nil [4317 4926])
            ("put" code nil nil [4928 4961])
            ("defalias" code nil nil [4962 6681])
            ("defun" function (:arguments ("name" "arglist" "docstring" "body")) nil [6730 9096])
            ("fset" code nil nil [9202 9223])
            ("defsubst" function (:arguments ("name" "arglist" "body")) nil [10234 10705])
            ("advertised-signature-table" variable (:default-value (make-hash-table :test (quote eq) :weakness (quote key))) nil [10707 10785])
            ("set-advertised-calling-convention" function (:arguments ("function" "signature" "_when")) nil [10787 11157])
            ("make-obsolete" function (:arguments ("obsolete-name" "current-name" "when")) nil [11159 12123])
            ("define-obsolete-function-alias" function (:arguments ("obsolete-name" "current-name" "when" "docstring")) nil [12125 12942])
            ("make-obsolete-variable" function (:arguments ("obsolete-name" "current-name" "when" "access-type")) nil [12944 13775])
            ("define-obsolete-variable-alias" function (:arguments ("obsolete-name" "current-name" "when" "docstring")) nil [13778 15473])
            ("define-obsolete-face-alias" function (:arguments ("obsolete-face" "current-face" "when")) nil [15803 16189])
            ("dont-compile" function (:arguments ("body")) nil [16191 16478])
            ("eval-when-compile" function (:arguments ("body")) nil [16721 17146])
            ("eval-and-compile" function (:arguments ("body")) nil [17148 17344])
            ("put" code nil nil [17346 17393])
            ("with-no-warnings" function (:arguments ("body")) nil [17394 17579])
            ("make-obsolete-variable" code nil nil [18874 18983])
            ("make-obsolete" code nil nil [18984 19075]))          
    :file "byte-run.el"
    :pointmax 19103
    :fsize 19102
    :lastmodtime '(20806 7940 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "cl.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("cl-lib" include nil nil [1047 1064])
            ("macroexp" include nil nil [1065 1084])
            ("cl-unload-function" function nil nil [3580 3738])
            ("dolist" code nil nil [3775 4488])
            ("unless" code nil nil [4664 4772])
            ("unless" code nil nil [4773 4877])
            ("dolist" code nil nil [4879 10141])
            ("cl-closure-vars" variable nil nil [10301 10329])
            ("cl--function-convert-cache" variable nil nil [10330 10369])
            ("cl--function-convert" function (:arguments ("f")) nil [10371 12684])
            ("lexical-let" function (:arguments ("bindings" "body")) nil [12686 14716])
            ("lexical-let*" function (:arguments ("bindings" "body")) nil [14718 15248])
            ("flet" function (:arguments ("bindings" "body")) nil [15327 17081])
            ("labels" function (:arguments ("bindings" "body")) nil [17083 18027])
            ("cl--symbol-function" function (:arguments ("symbol")) nil [18223 18571])
            ("gv-define-setter" code nil nil [18572 18702])
            ("letf" function (:arguments ("bindings" "body")) nil [18704 19339])
            ("cl--gv-adapt" function (:arguments ("cl-gv" "do")) nil [19341 20231])
            ("define-setf-expander" function (:arguments ("name" "arglist" "body")) nil [20233 21136])
            ("defsetf" function (:arguments ("name" "arg1" "args")) nil [21138 22753])
            ("make-obsolete" code nil nil [24667 24719])
            ("define-modify-macro" function (:arguments ("name" "arglist" "func" "doc")) nil [24721 25480])
            ("define-obsolete-function-alias" code nil nil [25582 25650])
            ("define-obsolete-variable-alias" code nil nil [25651 25743])
            ("define-obsolete-function-alias" code nil nil [25744 25820])
            ("cl-not-hash-table" function (:arguments ("x" "y" "_z")) nil [25958 26107])
            ("cl-builtin-gethash" variable (:default-value (symbol-function (quote gethash))) nil [26109 26163])
            ("make-obsolete-variable" code nil nil [26164 26219])
            ("cl-builtin-remhash" variable (:default-value (symbol-function (quote remhash))) nil [26220 26274])
            ("make-obsolete-variable" code nil nil [26275 26330])
            ("cl-builtin-clrhash" variable (:default-value (symbol-function (quote clrhash))) nil [26331 26385])
            ("make-obsolete-variable" code nil nil [26386 26441])
            ("cl-builtin-maphash" variable (:default-value (symbol-function (quote maphash))) nil [26442 26496])
            ("make-obsolete-variable" code nil nil [26498 26553])
            ("define-obsolete-function-alias" code nil nil [26554 26620])
            ("define-obsolete-function-alias" code nil nil [26621 26685])
            ("define-obsolete-function-alias" code nil nil [26686 26746])
            ("define-obsolete-function-alias" code nil nil [26747 26807])
            ("define-obsolete-function-alias" code nil nil [26808 26868])
            ("define-obsolete-function-alias" code nil nil [26869 26929])
            ("define-obsolete-function-alias" code nil nil [26930 26990])
            ("define-obsolete-function-alias" code nil nil [26991 27067])
            ("define-obsolete-function-alias" code nil nil [27068 27138])
            ("define-obsolete-function-alias" code nil nil [27139 27217])
            ("define-obsolete-function-alias" code nil nil [27219 27315])
            ("define-obsolete-function-alias" code nil nil [27316 27392])
            ("define-obsolete-function-alias" code nil nil [27393 27466])
            ("define-obsolete-function-alias" code nil nil [27467 27533])
            ("cl-maclisp-member" function (:arguments ("item" "list")) nil [27535 27690])
            ("cl-struct-setf-expander" function (:arguments ("x" "name" "accessor" "pred-form" "pos")) nil [27741 28675])
            ("cl" package nil nil [28677 28690])
            ("run-hooks" code nil nil [28692 28717]))          
    :file "cl.el"
    :pointmax 28739
    :fsize 28740
    :lastmodtime '(20806 7940 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "cl-lib.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("macroexp" include nil nil [3838 3857])
            ("cl-optimize-speed" variable (:default-value 1) nil [3859 3887])
            ("cl-optimize-safety" variable (:default-value 1) nil [3888 3917])
            ("define-obsolete-variable-alias" code nil nil [3934 4145])
            ("cl-custom-print-functions" variable nil nil [4162 4648])
            ("cl-incf" function (:arguments ("place" "x")) nil [4761 5134])
            ("cl-decf" function (:arguments ("place" "x")) nil [5136 5494])
            ("cl-pushnew" function (:arguments ("x" "place" "keys")) nil [5496 6646])
            ("cl--set-elt" function (:arguments ("seq" "n" "val")) nil [6648 6743])
            ("cl--set-buffer-substring" function (:arguments ("start" "end" "val")) nil [6745 6885])
            ("cl--set-substring" function (:arguments ("str" "start" "end" "val")) nil [6887 7171])
            ("defalias" code nil nil [7197 7236])
            ("defalias" code nil nil [7237 7271])
            ("cl--defalias" function (:arguments ("cl-f" "el-f" "doc")) nil [7471 7601])
            ("cl--defalias" code nil nil [7603 7790])
            ("cl--defalias" code nil nil [7792 7989])
            ("cl-multiple-value-list" function (:arguments ("expression")) nil [7991 8276])
            ("cl-multiple-value-apply" function (:arguments ("function" "expression")) nil [8278 8600])
            ("defalias" code nil nil [8602 8789])
            ("cl--defalias" code nil nil [8791 9077])
            ("cl--compiling-file" variable nil nil [9098 9129])
            ("cl--compiling-file" function nil nil [9130 9383])
            ("cl-proclaims-deferred" variable nil nil [9385 9419])
            ("cl-proclaim" function (:arguments ("spec")) nil [9421 9599])
            ("cl-declaim" function (:arguments ("specs")) nil [9601 10092])
            ("cl-random-time" function nil nil [10155 10332])
            ("cl--gensym-counter" variable (:default-value (* (logand (cl-random-time) 1023) 100)) nil [10334 10400])
            ("cl-floatp-safe" function (:arguments ("object")) nil [10417 10634])
            ("cl-plusp" function (:arguments ("number")) nil [10636 10715])
            ("cl-minusp" function (:arguments ("number")) nil [10717 10797])
            ("cl-oddp" function (:arguments ("integer")) nil [10799 10884])
            ("cl-evenp" function (:arguments ("integer")) nil [10886 10973])
            ("cl--random-state" variable (:default-value (vector (quote cl-random-state-tag) -1 30 (cl-random-time))) nil [10975 11053])
            ("cl-most-positive-float" variable (:constant-flag t) nil [11055 11300])
            ("cl-most-negative-float" variable (:constant-flag t) nil [11302 11476])
            ("cl-least-positive-float" variable (:constant-flag t) nil [11478 11720])
            ("cl-least-negative-float" variable (:constant-flag t) nil [11722 11905])
            ("cl-least-positive-normalized-float" variable (:constant-flag t) nil [11907 12319])
            ("cl-least-negative-normalized-float" variable (:constant-flag t) nil [12321 12515])
            ("cl-float-epsilon" variable (:constant-flag t) nil [12517 12772])
            ("cl-float-negative-epsilon" variable (:constant-flag t) nil [12774 12973])
            ("cl--defalias" code nil nil [13001 13043])
            ("declare-function" code nil nil [13045 13108])
            ("cl-mapcar" function (:arguments ("cl-func" "cl-x" "cl-rest")) nil [13110 13831])
            ("cl--defalias" code nil nil [13833 13863])
            ("cl--defalias" code nil nil [13886 13915])
            ("cl--defalias" code nil nil [13916 13947])
            ("cl--defalias" code nil nil [13948 13976])
            ("cl--defalias" code nil nil [13977 14006])
            ("cl--defalias" code nil nil [14008 14084])
            ("cl--defalias" code nil nil [14085 14164])
            ("cl-fifth" function (:arguments ("x")) nil [14166 14317])
            ("cl-sixth" function (:arguments ("x")) nil [14319 14470])
            ("cl-seventh" function (:arguments ("x")) nil [14472 14627])
            ("cl-eighth" function (:arguments ("x")) nil [14629 14782])
            ("cl-ninth" function (:arguments ("x")) nil [14784 14935])
            ("cl-tenth" function (:arguments ("x")) nil [14937 15088])
            ("cl-caaar" function (:arguments ("x")) nil [15090 15238])
            ("cl-caadr" function (:arguments ("x")) nil [15240 15388])
            ("cl-cadar" function (:arguments ("x")) nil [15390 15538])
            ("cl-caddr" function (:arguments ("x")) nil [15540 15688])
            ("cl-cdaar" function (:arguments ("x")) nil [15690 15838])
            ("cl-cdadr" function (:arguments ("x")) nil [15840 15988])
            ("cl-cddar" function (:arguments ("x")) nil [15990 16138])
            ("cl-cdddr" function (:arguments ("x")) nil [16140 16288])
            ("cl-caaaar" function (:arguments ("x")) nil [16290 16458])
            ("cl-caaadr" function (:arguments ("x")) nil [16460 16628])
            ("cl-caadar" function (:arguments ("x")) nil [16630 16798])
            ("cl-caaddr" function (:arguments ("x")) nil [16800 16968])
            ("cl-cadaar" function (:arguments ("x")) nil [16970 17138])
            ("cl-cadadr" function (:arguments ("x")) nil [17140 17308])
            ("cl-caddar" function (:arguments ("x")) nil [17310 17478])
            ("cl-cadddr" function (:arguments ("x")) nil [17480 17648])
            ("cl-cdaaar" function (:arguments ("x")) nil [17650 17818])
            ("cl-cdaadr" function (:arguments ("x")) nil [17820 17988])
            ("cl-cdadar" function (:arguments ("x")) nil [17990 18158])
            ("cl-cdaddr" function (:arguments ("x")) nil [18160 18328])
            ("cl-cddaar" function (:arguments ("x")) nil [18330 18498])
            ("cl-cddadr" function (:arguments ("x")) nil [18500 18668])
            ("cl-cdddar" function (:arguments ("x")) nil [18670 18838])
            ("cl-cddddr" function (:arguments ("x")) nil [18840 19008])
            ("cl-list*" function (:arguments ("arg" "rest")) nil [19339 19847])
            ("cl-ldiff" function (:arguments ("list" "sublist")) nil [19849 20059])
            ("cl-copy-list" function (:arguments ("list")) nil [20061 20357])
            ("declare-function" code nil nil [20414 20468])
            ("declare-function" code nil nil [20469 20525])
            ("declare-function" code nil nil [20526 20583])
            ("declare-function" code nil nil [20584 20638])
            ("declare-function" code nil nil [20639 20681])
            ("cl-adjoin" function (:arguments ("cl-item" "cl-list" "cl-keys")) nil [20683 21302])
            ("cl-subst" function (:arguments ("cl-new" "cl-old" "cl-tree" "cl-keys")) nil [21304 21755])
            ("cl--do-subst" function (:arguments ("cl-new" "cl-old" "cl-tree")) nil [21757 22067])
            ("cl-acons" function (:arguments ("key" "value" "alist")) nil [22069 22232])
            ("cl-pairlis" function (:arguments ("keys" "values" "alist")) nil [22234 22550])
            ("gv-define-simple-setter" code nil nil [22905 22971])
            ("gv-define-setter" code nil nil [22972 23094])
            ("gv-define-simple-setter" code nil nil [23095 23148])
            ("gv-define-setter" code nil nil [23149 23231])
            ("gv-define-simple-setter" code nil nil [23232 23299])
            ("gv-define-simple-setter" code nil nil [23300 23351])
            ("gv-define-simple-setter" code nil nil [23352 23411])
            ("gv-define-simple-setter" code nil nil [23412 23469])
            ("gv-define-simple-setter" code nil nil [23470 23531])
            ("gv-define-setter" code nil nil [23532 23627])
            ("gv-define-simple-setter" code nil nil [23628 23687])
            ("gv-define-simple-setter" code nil nil [23688 23794])
            ("gv-define-simple-setter" code nil nil [23795 23864])
            ("gv-define-simple-setter" code nil nil [23865 23917])
            ("gv-define-setter" code nil nil [23918 24004])
            ("gv-define-setter" code nil nil [24005 24105])
            ("gv-define-setter" code nil nil [24106 24178])
            ("gv-define-setter" code nil nil [24179 24265])
            ("gv-define-setter" code nil nil [24266 24352])
            ("gv-define-simple-setter" code nil nil [24353 24406])
            ("gv-define-simple-setter" code nil nil [24407 24465])
            ("gv-define-simple-setter" code nil nil [24466 24534])
            ("gv-define-simple-setter" code nil nil [24535 24600])
            ("gv-define-simple-setter" code nil nil [24601 24657])
            ("gv-define-simple-setter" code nil nil [24658 24699])
            ("gv-define-simple-setter" code nil nil [24700 24751])
            ("gv-define-simple-setter" code nil nil [24752 24811])
            ("gv-define-simple-setter" code nil nil [24812 24869])
            ("gv-define-simple-setter" code nil nil [24870 24911])
            ("gv-define-simple-setter" code nil nil [24912 24960])
            ("gv-define-simple-setter" code nil nil [24961 25015])
            ("gv-define-setter" code nil nil [25016 25154])
            ("gv-define-simple-setter" code nil nil [25155 25196])
            ("gv-define-simple-setter" code nil nil [25197 25247])
            ("gv-define-setter" code nil nil [25248 25340])
            ("gv-define-setter" code nil nil [25341 25433])
            ("gv-define-setter" code nil nil [25434 25539])
            ("gv-define-simple-setter" code nil nil [25540 25599])
            ("gv-define-simple-setter" code nil nil [25600 25657])
            ("gv-define-simple-setter" code nil nil [25658 25713])
            ("gv-define-simple-setter" code nil nil [25714 25769])
            ("gv-define-simple-setter" code nil nil [25770 25823])
            ("gv-define-simple-setter" code nil nil [25824 25893])
            ("gv-define-simple-setter" code nil nil [25894 25949])
            ("gv-define-simple-setter" code nil nil [25950 26023])
            ("gv-define-setter" code nil nil [26024 26126])
            ("gv-define-setter" code nil nil [26127 26229])
            ("gv-define-simple-setter" code nil nil [26230 26309])
            ("gv-define-simple-setter" code nil nil [26310 26369])
            ("gv-define-expander" code nil nil [26768 27107])
            ("gv-define-expander" code nil nil [27109 27500])
            ("progn" code nil nil [27537 28054])
            ("load" code nil nil [28056 28087])
            ("cl-lib" package nil nil [28089 28106]))          
    :file "cl-lib.el"
    :pointmax 28188
    :fsize 28187
    :lastmodtime '(20806 7940 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "macroexp.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("macroexpand-all-environment" variable nil nil [1230 1270])
            ("macroexp--cons" function (:arguments ("car" "cdr" "original-cons")) nil [1272 1485])
            ("macroexp--accumulate" function (:arguments ("var+list" "body")) nil [1719 2775])
            ("macroexp--all-forms" function (:arguments ("forms" "skip")) nil [2777 3118])
            ("macroexp--all-clauses" function (:arguments ("clauses" "skip")) nil [3120 3493])
            ("macroexp--compiler-macro" function (:arguments ("handler" "form")) nil [3495 3690])
            ("macroexp--funcall-if-compiled" function (:arguments ("_form")) nil [3692 4020])
            ("put" code nil nil [4021 4163])
            ("macroexp--warn-and-return" function (:arguments ("msg" "form")) nil [4165 4751])
            ("macroexp--obsolete-warning" function (:arguments ("fun" "obsolescence-data" "type")) nil [4753 5160])
            ("macroexp--expand-all" function (:arguments ("form")) nil [5162 10549])
            ("macroexpand-all" function (:arguments ("form" "environment")) nil [10566 10960])
            ("macroexp-progn" function (:arguments ("exps")) nil [11001 11131])
            ("macroexp-unprogn" function (:arguments ("exp")) nil [11133 11282])
            ("macroexp-let*" function (:arguments ("bindings" "exp")) nil [11284 11525])
            ("macroexp-if" function (:arguments ("test" "then" "else")) nil [11527 12280])
            ("macroexp-let2" function (:arguments ("test" "var" "exp" "exps")) nil [12282 13113])
            ("macroexp--maxsize" function (:arguments ("exp" "size")) nil [13115 13721])
            ("macroexp-small-p" function (:arguments ("exp")) nil [13723 13839])
            ("macroexp--const-symbol-p" function (:arguments ("symbol" "any-value")) nil [13841 14402])
            ("macroexp-const-p" function (:arguments ("exp")) nil [14404 14908])
            ("macroexp-copyable-p" function (:arguments ("exp")) nil [14910 15047])
            ("macroexp--backtrace" function nil nil [15488 15761])
            ("macroexp--trim-backtrace-frame" function (:arguments ("frame")) nil [15763 16250])
            ("macroexp--pending-eager-loads" variable nil nil [16252 16357])
            ("internal-macroexpand-for-load" function (:arguments ("form")) nil [16359 17820])
            ("add-hook" code nil nil [18253 18508])
            ("macroexp" package nil nil [18511 18530]))          
    :file "macroexp.el"
    :pointmax 18558
    :fsize 18570
    :lastmodtime '(20806 7941 0 0)
    :unmatched-syntax '((close-paren 18508 . 18509) (symbol 18233 . 18250) (open-paren 18232 . 18233))
    )
   (semanticdb-table "syntax.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("cl-lib" include nil nil [1629 1646])
            ("font-lock-beginning-of-syntax-function" variable nil nil [1649 1696])
            ("syntax-propertize-function" variable nil nil [1750 2999])
            ("syntax-propertize-chunk-size" variable (:default-value 500) nil [3001 3042])
            ("syntax-propertize-extend-region-functions" variable (:default-value (quote (syntax-propertize-wholelines))) nil [3044 3854])
            ("make-variable-buffer-local" code nil nil [3985 4056])
            ("syntax-propertize-wholelines" function (:arguments ("start" "end")) nil [4058 4256])
            ("syntax-propertize-multiline" function (:arguments ("beg" "end")) nil [4258 4738])
            ("syntax-propertize--done" variable (:default-value -1) nil [4740 4839])
            ("make-variable-buffer-local" code nil nil [4840 4893])
            ("syntax-propertize--shift-groups" function (:arguments ("re" "n")) nil [4895 5127])
            ("syntax-propertize-precompile-rules" function (:arguments ("rules")) nil [5129 5905])
            ("syntax-propertize-rules" function (:arguments ("rules")) nil [5907 13118])
            ("syntax-propertize-via-font-lock" function (:arguments ("keywords")) nil [13120 13634])
            ("syntax-propertize" function (:arguments ("pos")) nil [13636 15406])
            ("syntax-ppss-depth" function (:arguments ("ppss")) nil [15461 15511])
            ("syntax-ppss-toplevel-pos" function (:arguments ("ppss")) nil [15513 16438])
            ("syntax-ppss-context" function (:arguments ("ppss")) nil [16440 16550])
            ("syntax-ppss-max-span" variable (:default-value 20000) nil [16552 16771])
            ("syntax-begin-function" variable nil nil [16773 16984])
            ("syntax-ppss-cache" variable nil nil [16986 17073])
            ("make-variable-buffer-local" code nil nil [17074 17121])
            ("syntax-ppss-last" variable nil nil [17122 17188])
            ("make-variable-buffer-local" code nil nil [17189 17235])
            ("defalias" code nil nil [17237 17307])
            ("syntax-ppss-flush-cache" function (:arguments ("beg" "ignored")) nil [17308 18535])
            ("syntax-ppss-stats" variable (:default-value [(0 . 0.0) (0 . 0.0) (0 . 0.0) (0 . 0.0) (0 . 0.0) (1 . 2500.0)]) nil [18537 18630])
            ("syntax-ppss-stats" function nil nil [18631 18797])
            ("syntax-ppss" function (:arguments ("pos")) nil [18799 25129])
            ("syntax-ppss-debug" function nil nil [25155 25379])
            ("syntax" package nil nil [25963 25980]))          
    :file "syntax.el"
    :pointmax 26006
    :fsize 26005
    :lastmodtime '(20806 7941 0 0)
    :unmatched-syntax '((close-paren 1646 . 1647) (symbol 1611 . 1628) (open-paren 1610 . 1611))
    )
   (semanticdb-table "float-sup.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("float-pi" variable
               (:constant-flag t
                :default-value (* 4 (atan 1)))
                nil [1051 1119])
            ("pi" variable
               (:constant-flag t
                :default-value float-pi)
                nil [1120 1198])
            ("internal-make-var-non-special" code nil nil [1199 1234])
            ("float-e" variable
               (:constant-flag t
                :default-value (exp 1))
                nil [1236 1295])
            ("degrees-to-radians" variable
               (:constant-flag t
                :default-value (/ float-pi 180.0))
                nil [1297 1388])
            ("radians-to-degrees" variable
               (:constant-flag t
                :default-value (/ 180.0 float-pi))
                nil [1389 1479])
            ("degrees-to-radians" function (:arguments ("x")) nil [1550 1655])
            ("radians-to-degrees" function (:arguments ("x")) nil [1656 1761])
            ("lisp-float-type" package nil nil [1763 1789]))          
    :file "float-sup.el"
    :pointmax 1818
    :fsize 1817
    :lastmodtime '(20806 7940 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "timer.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("cl-lib" include nil nil [1285 1302])
            ("cl-defstruct" code nil nil [1305 1580])
            ("timerp" function (:arguments ("object")) nil [1582 1687])
            ("timer--time" function (:arguments ("timer")) nil [1713 1856])
            ("gv-define-simple-setter" code nil nil [1858 2345])
            ("timer-set-time" function (:arguments ("timer" "time" "delta")) nil [2348 2743])
            ("timer-set-idle-time" function (:arguments ("timer" "secs" "repeat")) nil [2745 3260])
            ("timer-next-integral-multiple-of-time" function (:arguments ("time" "secs")) nil [3262 4267])
            ("timer-relative-time" function (:arguments ("time" "secs" "usecs" "psecs")) nil [4269 4709])
            ("timer--time-less-p" function (:arguments ("t1" "t2")) nil [4711 4853])
            ("timer-inc-time" function (:arguments ("timer" "secs" "usecs" "psecs")) nil [4855 5186])
            ("timer-set-time-with-usecs" function (:arguments ("timer" "time" "usecs" "delta")) nil [5188 5841])
            ("timer-set-function" function (:arguments ("timer" "function" "args")) nil [5843 6102])
            ("timer--activate" function (:arguments ("timer" "triggered-p" "reuse-cell" "idle")) nil [6105 7089])
            ("timer-activate" function (:arguments ("timer" "triggered-p" "reuse-cell")) nil [7091 7607])
            ("timer-activate-when-idle" function (:arguments ("timer" "dont-wait" "reuse-cell")) nil [7609 8487])
            ("defalias" code nil nil [8489 8530])
            ("cancel-timer" function (:arguments ("timer")) nil [8532 8765])
            ("cancel-timer-internal" function (:arguments ("timer")) nil [8767 9189])
            ("cancel-function-timers" function
               (:user-visible-flag t
                :arguments ("function"))
                nil [9191 9729])
            ("timer-event-last" variable nil nil [9778 9836])
            ("timer-event-last-1" variable nil nil [9837 9905])
            ("timer-event-last-2" variable nil nil [9906 9975])
            ("timer-max-repeats" variable (:default-value 10) nil [9977 10354])
            ("timer-until" function (:arguments ("timer" "time")) nil [10356 10613])
            ("timer-event-handler" function (:arguments ("timer")) nil [10615 12403])
            ("timeout-event-p" function (:arguments ("event")) nil [12466 12590])
            ("declare-function" code nil nil [12594 12645])
            ("run-at-time" function
               (:user-visible-flag t
                :arguments ("time" "repeat" "function" "args"))
                nil [12647 14940])
            ("run-with-timer" function
               (:user-visible-flag t
                :arguments ("secs" "repeat" "function" "args"))
                nil [14942 15428])
            ("add-timeout" function (:arguments ("secs" "function" "object" "repeat")) nil [15430 15734])
            ("run-with-idle-timer" function
               (:user-visible-flag t
                :arguments ("secs" "repeat" "function" "args"))
                nil [15736 16887])
            ("with-timeout-timers" variable nil nil [16890 16993])
            ("with-timeout" function (:arguments ("list" "body")) nil [16995 18474])
            ("with-timeout-suspend" function nil nil [18476 18939])
            ("with-timeout-unsuspend" function (:arguments ("timer-spec-list")) nil [18941 19284])
            ("y-or-n-p-with-timeout" function (:arguments ("prompt" "seconds" "default-value")) nil [19286 19526])
            ("timer-duration-words" variable
               (:constant-flag t
                :default-value (list (cons "microsec" 1e-006) (cons "microsecond" 1e-006) (cons "millisec" 0.001) (cons "millisecond" 0.001) (cons "sec" 1) (cons "second" 1) (cons "min" 60) (cons "minute" 60) (cons "hour" (* 60 60)) (cons "day" (* 24 60 60)) (cons "week" (* 7 24 60 60)) (cons "fortnight" (* 14 24 60 60)) (cons "month" (* 30 24 60 60)) (cons "year" (* 365.25 24 60 60))))
                nil [19529 20045])
            ("timer-duration" function (:arguments ("string")) nil [20047 20749])
            ("timer" package nil nil [20752 20768]))          
    :file "timer.el"
    :pointmax 20793
    :fsize 20792
    :lastmodtime '(20806 7941 0 0)
    :unmatched-syntax '((close-paren 1302 . 1303) (symbol 1267 . 1284) (open-paren 1266 . 1267))
    )
   (semanticdb-table "regexp-opt.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("regexp-opt" function (:arguments ("strings" "paren")) nil [3665 4922])
            ("regexp-opt-depth" function (:arguments ("regexp")) nil [4939 5764])
            ("regexp-opt-group" function (:arguments ("strings" "paren" "lax")) nil [5793 9518])
            ("regexp-opt-charset" function (:arguments ("chars")) nil [9521 11350])
            ("regexp-opt" package nil nil [11352 11373]))          
    :file "regexp-opt.el"
    :pointmax 11403
    :fsize 11402
    :lastmodtime '(20806 7941 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "tabulated-list.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("tabulated-list-format" variable nil nil [1666 2691])
            ("make-variable-buffer-local" code nil nil [2692 2743])
            ("put" code nil nil [2744 2791])
            ("tabulated-list-use-header-line" variable (:default-value t) nil [2793 2898])
            ("make-variable-buffer-local" code nil nil [2899 2959])
            ("tabulated-list-entries" variable nil nil [2961 3837])
            ("make-variable-buffer-local" code nil nil [3838 3890])
            ("put" code nil nil [3891 3939])
            ("tabulated-list-padding" variable nil nil [3941 4153])
            ("make-variable-buffer-local" code nil nil [4154 4206])
            ("put" code nil nil [4207 4255])
            ("tabulated-list-revert-hook" variable nil nil [4257 4412])
            ("tabulated-list-printer" variable (:default-value (quote tabulated-list-print-entry)) nil [4414 4710])
            ("make-variable-buffer-local" code nil nil [4711 4763])
            ("tabulated-list-sort-key" variable nil nil [4765 5173])
            ("make-variable-buffer-local" code nil nil [5174 5227])
            ("put" code nil nil [5228 5277])
            ("tabulated-list-get-id" function (:arguments ("pos")) nil [5279 5553])
            ("tabulated-list-get-entry" function (:arguments ("pos")) nil [5555 5836])
            ("tabulated-list-put-tag" function (:arguments ("tag" "advance")) nil [5838 6745])
            ("tabulated-list-mode-map" variable (:default-value (let ((map (copy-keymap special-mode-map))) (set-keymap-parent map button-buffer-map) (define-key map "n" (quote next-line)) (define-key map "p" (quote previous-line)) (define-key map "S" (quote tabulated-list-sort)) (define-key map [follow-link] (quote mouse-face)) (define-key map [mouse-2] (quote mouse-select-window)) map)) nil [6747 7153])
            ("tabulated-list-sort-button-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [header-line mouse-1] (quote tabulated-list-col-sort)) (define-key map [header-line mouse-2] (quote tabulated-list-col-sort)) (define-key map [mouse-1] (quote tabulated-list-col-sort)) (define-key map [mouse-2] (quote tabulated-list-col-sort)) (define-key map "" (quote tabulated-list-sort)) (define-key map [follow-link] (quote mouse-face)) map)) nil [7155 7640])
            ("tabulated-list-glyphless-char-display" variable (:default-value (let ((table (make-char-table (quote glyphless-char-display) nil))) (set-char-table-parent table glyphless-char-display) (aset table 9650 (cons nil "^")) (aset table 9660 (cons nil "v")) table)) nil [7642 8029])
            ("tabulated-list--header-string" variable nil nil [8031 8073])
            ("tabulated-list--header-overlay" variable nil nil [8074 8117])
            ("tabulated-list-init-header" function nil nil [8119 10262])
            ("tabulated-list-print-fake-header" function nil nil [10264 10768])
            ("tabulated-list-revert" function
               (:user-visible-flag t
                :arguments ("ignored"))
                nil [10770 11145])
            ("tabulated-list--column-number" function (:arguments ("name")) nil [11147 11444])
            ("tabulated-list-print" function (:arguments ("remember-pos")) nil [11446 13440])
            ("tabulated-list-print-entry" function (:arguments ("id" "cols")) nil [13442 14101])
            ("tabulated-list-print-col" function (:arguments ("n" "col-desc" "x")) nil [14103 16070])
            ("tabulated-list-delete-entry" function nil nil [16072 16713])
            ("tabulated-list-set-col" function (:arguments ("col" "desc" "change-entry-data")) nil [16715 18362])
            ("tabulated-list-col-sort" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [18364 18771])
            ("tabulated-list-sort" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [18773 19122])
            ("tabulated-list--sort-by-column-name" function (:arguments ("name")) nil [19124 19517])
            ("define-derived-mode" code nil nil [19545 21464])
            ("put" code nil nil [21466 21513])
            ("tabulated-list" package nil nil [21515 21540]))          
    :file "tabulated-list.el"
    :pointmax 21620
    :fsize 21623
    :lastmodtime '(20806 7941 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "lisp-mode.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("font-lock-comment-face" variable nil nil [1022 1053])
            ("font-lock-doc-face" variable nil nil [1054 1081])
            ("font-lock-keywords-case-fold-search" variable nil nil [1082 1126])
            ("font-lock-string-face" variable nil nil [1127 1157])
            ("lisp-mode-abbrev-table" variable nil nil [1159 1194])
            ("define-abbrev-table" code nil nil [1195 1275])
            ("emacs-lisp-mode-abbrev-table" variable nil nil [1277 1318])
            ("define-abbrev-table" code nil nil [1319 1499])
            ("emacs-lisp-mode-syntax-table" variable (:default-value (let ((table (make-syntax-table)) (i 0)) (while (< i 48) (modify-syntax-entry i "_   " table) (setq i (1+ i))) (setq i (1+ 57)) (while (< i 65) (modify-syntax-entry i "_   " table) (setq i (1+ i))) (setq i (1+ 90)) (while (< i 97) (modify-syntax-entry i "_   " table) (setq i (1+ i))) (setq i (1+ 122)) (while (< i 128) (modify-syntax-entry i "_   " table) (setq i (1+ i))) (modify-syntax-entry 32 "    " table) (modify-syntax-entry 2208 "    " table) (modify-syntax-entry 9 "    " table) (modify-syntax-entry 12 "    " table) (modify-syntax-entry 10 ">   " table) (modify-syntax-entry 59 "<   " table) (modify-syntax-entry 96 "'   " table) (modify-syntax-entry 39 "'   " table) (modify-syntax-entry 44 "'   " table) (modify-syntax-entry 64 "'   " table) (modify-syntax-entry 46 "_   " table) (modify-syntax-entry 35 "'   " table) (modify-syntax-entry 34 "\"    " table) (modify-syntax-entry 92 "\\   " table) (modify-syntax-entry 40 "()  " table) (modify-syntax-entry 41 ")(  " table) (modify-syntax-entry 91 "(]  " table) (modify-syntax-entry 93 ")[  " table) table)) nil [1501 3113])
            ("lisp-mode-syntax-table" variable (:default-value (let ((table (copy-syntax-table emacs-lisp-mode-syntax-table))) (modify-syntax-entry 91 "_   " table) (modify-syntax-entry 93 "_   " table) (modify-syntax-entry 35 "' 14" table) (modify-syntax-entry 124 "\" 23bn" table) table)) nil [3115 3434])
            ("lisp-imenu-generic-expression" variable (:default-value (list (list nil (purecopy (concat "^\\s-*(" (eval-when-compile (regexp-opt (quote ("defun" "defun*" "defsubst" "defmacro" "defadvice" "define-skeleton" "define-minor-mode" "define-global-minor-mode" "define-globalized-minor-mode" "define-derived-mode" "define-generic-mode" "define-compiler-macro" "define-modify-macro" "defsetf" "define-setf-expander" "define-method-combination" "defgeneric" "defmethod")) t)) "\\s-+\\(\\(\\sw\\|\\s_\\)+\\)")) 2) (list (purecopy "Variables") (purecopy (concat "^\\s-*(" (eval-when-compile (regexp-opt (quote ("defconst" "defconstant" "defcustom" "defparameter" "define-symbol-macro")) t)) "\\s-+\\(\\(\\sw\\|\\s_\\)+\\)")) 2) (list (purecopy "Variables") (purecopy (concat "^\\s-*(defvar\\s-+\\(\\(\\sw\\|\\s_\\)+\\)" "[[:space:]
]+[^)]")) 1) (list (purecopy "Types") (purecopy (concat "^\\s-*(" (eval-when-compile (regexp-opt (quote ("defgroup" "deftheme" "deftype" "defstruct" "defclass" "define-condition" "define-widget" "defface" "defpackage")) t)) "\\s-+'?\\(\\(\\sw\\|\\s_\\)+\\)")) 2))) nil [3436 4784])
            ("put" code nil nil [4849 4882])
            ("put" code nil nil [4883 4917])
            ("put" code nil nil [4918 4951])
            ("put" code nil nil [4952 4985])
            ("put" code nil nil [4986 5019])
            ("put" code nil nil [5020 5056])
            ("put" code nil nil [5057 5097])
            ("lisp-doc-string-elt-property" variable (:default-value (quote doc-string-elt)) nil [5099 5216])
            ("lisp-font-lock-syntactic-face-function" function (:arguments ("state")) nil [5218 7030])
            ("lisp-mode-variables" function (:arguments ("lisp-syntax" "keywords-case-insensitive")) nil [7032 9848])
            ("lisp-outline-level" function nil nil [9850 10032])
            ("lisp-mode-shared-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "" (quote indent-sexp)) (define-key map "" (quote backward-delete-char-untabify)) map)) nil [10034 10516])
            ("emacs-lisp-mode-map" variable (:default-value (let ((map (make-sparse-keymap "Emacs-Lisp")) (menu-map (make-sparse-keymap "Emacs-Lisp")) (lint-map (make-sparse-keymap)) (prof-map (make-sparse-keymap)) (tracing-map (make-sparse-keymap))) (set-keymap-parent map lisp-mode-shared-map) (define-key map "	" (quote completion-at-point)) (define-key map "" (quote eval-defun)) (define-key map "" (quote indent-pp-sexp)) (bindings--define-key map [menu-bar emacs-lisp] (cons "Emacs-Lisp" menu-map)) (bindings--define-key menu-map [eldoc] (quote (menu-item "Auto-Display Documentation Strings" eldoc-mode :button (:toggle bound-and-true-p eldoc-mode) :help "Display the documentation string for the item under cursor"))) (bindings--define-key menu-map [checkdoc] (quote (menu-item "Check Documentation Strings" checkdoc :help "Check documentation strings for style requirements"))) (bindings--define-key menu-map [re-builder] (quote (menu-item "Construct Regexp" re-builder :help "Construct a regexp interactively"))) (bindings--define-key menu-map [tracing] (cons "Tracing" tracing-map)) (bindings--define-key tracing-map [tr-a] (quote (menu-item "Untrace All" untrace-all :help "Untrace all currently traced functions"))) (bindings--define-key tracing-map [tr-uf] (quote (menu-item "Untrace Function..." untrace-function :help "Untrace function, and possibly activate all remaining advice"))) (bindings--define-key tracing-map [tr-sep] menu-bar-separator) (bindings--define-key tracing-map [tr-q] (quote (menu-item "Trace Function Quietly..." trace-function-background :help "Trace the function with trace output going quietly to a buffer"))) (bindings--define-key tracing-map [tr-f] (quote (menu-item "Trace Function..." trace-function :help "Trace the function given as an argument"))) (bindings--define-key menu-map [profiling] (cons "Profiling" prof-map)) (bindings--define-key prof-map [prof-restall] (quote (menu-item "Remove Instrumentation for All Functions" elp-restore-all :help "Restore the original definitions of all functions being profiled"))) (bindings--define-key prof-map [prof-restfunc] (quote (menu-item "Remove Instrumentation for Function..." elp-restore-function :help "Restore an instrumented function to its original definition"))) (bindings--define-key prof-map [sep-rem] menu-bar-separator) (bindings--define-key prof-map [prof-resall] (quote (menu-item "Reset Counters for All Functions" elp-reset-all :help "Reset the profiling information for all functions being profiled"))) (bindings--define-key prof-map [prof-resfunc] (quote (menu-item "Reset Counters for Function..." elp-reset-function :help "Reset the profiling information for a function"))) (bindings--define-key prof-map [prof-res] (quote (menu-item "Show Profiling Results" elp-results :help "Display current profiling results"))) (bindings--define-key prof-map [prof-pack] (quote (menu-item "Instrument Package..." elp-instrument-package :help "Instrument for profiling all function that start with a prefix"))) (bindings--define-key prof-map [prof-func] (quote (menu-item "Instrument Function..." elp-instrument-function :help "Instrument a function for profiling"))) (bindings--define-key menu-map [lint] (cons "Linting" lint-map)) (bindings--define-key lint-map [lint-di] (quote (menu-item "Lint Directory..." elint-directory :help "Lint a directory"))) (bindings--define-key lint-map [lint-f] (quote (menu-item "Lint File..." elint-file :help "Lint a file"))) (bindings--define-key lint-map [lint-b] (quote (menu-item "Lint Buffer" elint-current-buffer :help "Lint the current buffer"))) (bindings--define-key lint-map [lint-d] (quote (menu-item "Lint Defun" elint-defun :help "Lint the function at point"))) (bindings--define-key menu-map [edebug-defun] (quote (menu-item "Instrument Function for Debugging" edebug-defun :help "Evaluate the top level form point is in, stepping through with Edebug" :keys "C-u C-M-x"))) (bindings--define-key menu-map [separator-byte] menu-bar-separator) (bindings--define-key menu-map [disas] (quote (menu-item "Disassemble Byte Compiled Object..." disassemble :help "Print disassembled code for OBJECT in a buffer"))) (bindings--define-key menu-map [byte-recompile] (quote (menu-item "Byte-recompile Directory..." byte-recompile-directory :help "Recompile every `.el' file in DIRECTORY that needs recompilation"))) (bindings--define-key menu-map [emacs-byte-compile-and-load] (quote (menu-item "Byte-compile and Load" emacs-lisp-byte-compile-and-load :help "Byte-compile the current file (if it has changed), then load compiled code"))) (bindings--define-key menu-map [byte-compile] (quote (menu-item "Byte-compile This File" emacs-lisp-byte-compile :help "Byte compile the file containing the current buffer"))) (bindings--define-key menu-map [separator-eval] menu-bar-separator) (bindings--define-key menu-map [ielm] (quote (menu-item "Interactive Expression Evaluation" ielm :help "Interactively evaluate Emacs Lisp expressions"))) (bindings--define-key menu-map [eval-buffer] (quote (menu-item "Evaluate Buffer" eval-buffer :help "Execute the current buffer as Lisp code"))) (bindings--define-key menu-map [eval-region] (quote (menu-item "Evaluate Region" eval-region :help "Execute the region as Lisp code" :enable mark-active))) (bindings--define-key menu-map [eval-sexp] (quote (menu-item "Evaluate Last S-expression" eval-last-sexp :help "Evaluate sexp before point; print value in minibuffer"))) (bindings--define-key menu-map [separator-format] menu-bar-separator) (bindings--define-key menu-map [comment-region] (quote (menu-item "Comment Out Region" comment-region :help "Comment or uncomment each line in the region" :enable mark-active))) (bindings--define-key menu-map [indent-region] (quote (menu-item "Indent Region" indent-region :help "Indent each nonblank line in the region" :enable mark-active))) (bindings--define-key menu-map [indent-line] (quote (menu-item "Indent Line" lisp-indent-line))) map)) nil [10518 16837])
            ("emacs-lisp-byte-compile" function (:user-visible-flag t) nil [16839 17068])
            ("emacs-lisp-byte-compile-and-load" function (:user-visible-flag t) nil [17070 17546])
            ("emacs-lisp-mode-hook" variable nil nil [17548 17734])
            ("lisp-mode-hook" variable nil nil [17736 17871])
            ("lisp-interaction-mode-hook" variable nil nil [17873 18027])
            ("define-derived-mode" code nil nil [18029 18543])
            ("emacs-list-byte-code-comment-re" variable
               (:constant-flag t
                :default-value (concat "\\(#\\)@\\([0-9]+\\) " "\\(?:[^(]\\|([^\"]\\)"))
                nil [18596 18786])
            ("emacs-lisp-byte-code-comment" function (:arguments ("end" "_point")) nil [18789 20061])
            ("emacs-lisp-byte-code-syntax-propertize" function (:arguments ("start" "end")) nil [20063 20324])
            ("add-to-list" code nil nil [20326 20399])
            ("define-derived-mode" code nil nil [20400 20726])
            ("lisp-mode-map" variable (:default-value (let ((map (make-sparse-keymap)) (menu-map (make-sparse-keymap "Lisp"))) (set-keymap-parent map lisp-mode-shared-map) (define-key map "" (quote lisp-eval-defun)) (define-key map "" (quote run-lisp)) (bindings--define-key map [menu-bar lisp] (cons "Lisp" menu-map)) (bindings--define-key menu-map [run-lisp] (quote (menu-item "Run inferior Lisp" run-lisp :help "Run an inferior Lisp process, input and output via buffer `*inferior-lisp*'"))) (bindings--define-key menu-map [ev-def] (quote (menu-item "Eval defun" lisp-eval-defun :help "Send the current defun to the Lisp process made by M-x run-lisp"))) (bindings--define-key menu-map [ind-sexp] (quote (menu-item "Indent sexp" indent-sexp :help "Indent each line of the list starting just after point"))) map)) nil [20752 21679])
            ("define-derived-mode" code nil nil [21681 22413])
            ("lisp-find-tag-default" function nil nil [22415 22607])
            ("defalias" code nil nil [22636 22675])
            ("lisp-eval-defun" function
               (:user-visible-flag t
                :arguments ("and-go"))
                nil [22723 22890])
            ("lisp-interaction-mode-map" variable (:default-value (let ((map (make-sparse-keymap)) (menu-map (make-sparse-keymap "Lisp-Interaction"))) (set-keymap-parent map lisp-mode-shared-map) (define-key map "" (quote eval-defun)) (define-key map "" (quote indent-pp-sexp)) (define-key map "	" (quote completion-at-point)) (define-key map "
" (quote eval-print-last-sexp)) (bindings--define-key map [menu-bar lisp-interaction] (cons "Lisp-Interaction" menu-map)) (bindings--define-key menu-map [eval-defun] (quote (menu-item "Evaluate Defun" eval-defun :help "Evaluate the top-level form containing point, or after point"))) (bindings--define-key menu-map [eval-print-last-sexp] (quote (menu-item "Evaluate and Print" eval-print-last-sexp :help "Evaluate sexp before point; print value into current buffer"))) (bindings--define-key menu-map [edebug-defun-lisp-interaction] (quote (menu-item "Instrument Function for Debugging" edebug-defun :help "Evaluate the top level form point is in, stepping through with Edebug" :keys "C-u C-M-x"))) (bindings--define-key menu-map [indent-pp-sexp] (quote (menu-item "Indent or Pretty-Print" indent-pp-sexp :help "Indent each line of the list starting just after point, or prettyprint it"))) (bindings--define-key menu-map [complete-symbol] (quote (menu-item "Complete Lisp Symbol" completion-at-point :help "Perform completion on Lisp symbol preceding point"))) map)) nil [22892 24438])
            ("define-derived-mode" code nil nil [24440 25097])
            ("eval-print-last-sexp" function (:user-visible-flag t) nil [25099 25575])
            ("last-sexp-setup-props" function (:arguments ("beg" "end" "value" "alt1" "alt2")) nil [25578 26353])
            ("last-sexp-toggle-display" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [26356 27129])
            ("prin1-char" function (:arguments ("char")) nil [27131 28248])
            ("preceding-sexp" function nil nil [28251 29847])
            ("eval-last-sexp-1" function (:arguments ("eval-last-sexp-arg-internal")) nil [29850 30262])
            ("eval-last-sexp-print-value" function (:arguments ("value")) nil [30265 30956])
            ("eval-last-sexp-fake-value" variable (:default-value (make-symbol "t")) nil [30959 31011])
            ("eval-sexp-add-defvars" function (:arguments ("exp" "pos")) nil [31013 31795])
            ("eval-last-sexp" function
               (:user-visible-flag t
                :arguments ("eval-last-sexp-arg-internal"))
                nil [31797 32622])
            ("eval-defun-1" function (:arguments ("form")) nil [32624 34996])
            ("eval-defun-2" function nil nil [34998 36640])
            ("eval-defun" function
               (:user-visible-flag t
                :arguments ("edebug-it"))
                nil [36642 38179])
            ("define-obsolete-function-alias" code nil nil [38238 38326])
            ("define-obsolete-function-alias" code nil nil [38327 38401])
            ("lisp-indent-offset" variable nil nil [38403 38564])
            ("put" code nil nil [38565 38656])
            ("lisp-indent-function" variable (:default-value (quote lisp-indent-function)) nil [38658 39030])
            ("lisp-indent-line" function
               (:user-visible-flag t
                :arguments ("whole-exp"))
                nil [39032 40242])
            ("calculate-lisp-indent-last-sexp" variable nil nil [40244 40284])
            ("calculate-lisp-indent" function (:arguments ("parse-start")) nil [40286 46968])
            ("lisp-indent-function" function (:arguments ("indent-point" "state")) nil [46970 49734])
            ("lisp-body-indent" variable (:default-value 2) nil [49736 49868])
            ("put" code nil nil [49869 49923])
            ("lisp-indent-specform" function (:arguments ("count" "state" "indent-point" "normal-indent")) nil [49925 52227])
            ("lisp-indent-defform" function (:arguments ("state" "indent-point")) nil [52229 52455])
            ("put" code nil nil [52675 52719])
            ("put" code nil nil [52720 52756])
            ("put" code nil nil [52757 52793])
            ("put" code nil nil [52794 52830])
            ("put" code nil nil [52831 52876])
            ("put" code nil nil [52877 52924])
            ("put" code nil nil [52925 52975])
            ("put" code nil nil [52976 53010])
            ("put" code nil nil [53011 53046])
            ("put" code nil nil [53047 53083])
            ("put" code nil nil [53084 53117])
            ("put" code nil nil [53118 53154])
            ("put" code nil nil [53155 53200])
            ("put" code nil nil [53201 53246])
            ("put" code nil nil [53247 53304])
            ("indent-sexp" function
               (:user-visible-flag t
                :arguments ("endpos"))
                nil [53306 57117])
            ("indent-pp-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [57119 57573])
            ("emacs-lisp-docstring-fill-column" variable (:default-value 65) nil [57614 57927])
            ("lisp-fill-paragraph" function
               (:user-visible-flag t
                :arguments ("justify"))
                nil [57929 60611])
            ("indent-code-rigidly" function
               (:user-visible-flag t
                :arguments ("start" "end" "arg" "nochange-regexp"))
                nil [60613 61777])
            ("lisp-mode" package nil nil [61779 61799]))          
    :file "lisp-mode.el"
    :pointmax 61828
    :fsize 61827
    :lastmodtime '(20806 7941 0 0)
    :unmatched-syntax '((close-paren 18786 . 18787) (symbol 18577 . 18593) (open-paren 18576 . 18577))
    )
   (semanticdb-table "lisp.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("defun-prompt-regexp" variable nil nil [1054 1303])
            ("make-variable-buffer-local" code nil nil [1304 1353])
            ("parens-require-spaces" variable (:default-value t) nil [1355 1544])
            ("forward-sexp-function" variable nil nil [1546 1710])
            ("forward-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [1712 2185])
            ("backward-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [2187 2509])
            ("mark-sexp" function
               (:user-visible-flag t
                :arguments ("arg" "allow-extend"))
                nil [2511 3336])
            ("forward-list" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [3338 3700])
            ("backward-list" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [3702 4027])
            ("down-list" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [4029 4471])
            ("backward-up-list" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [4473 4775])
            ("up-list" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [4777 5566])
            ("kill-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [5568 5919])
            ("backward-kill-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [5921 6220])
            ("kill-backward-up-list" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [6238 6731])
            ("beginning-of-defun-function" variable nil nil [6734 7303])
            ("beginning-of-defun" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [7305 8631])
            ("beginning-of-defun-raw" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [8633 12030])
            ("end-of-defun-function" variable (:default-value (lambda nil (forward-sexp 1))) nil [12032 12400])
            ("buffer-end" function (:arguments ("arg")) nil [12402 12633])
            ("end-of-defun" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [12635 14677])
            ("mark-defun" function
               (:user-visible-flag t
                :arguments ("allow-extend"))
                nil [14679 16002])
            ("narrow-to-defun" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [16004 17454])
            ("insert-pair-alist" variable (:default-value (quote ((40 41) (91 93) (123 125) (60 62) (34 34) (39 39) (96 39)))) nil [17456 17860])
            ("insert-pair" function
               (:user-visible-flag t
                :arguments ("arg" "open" "close"))
                nil [17862 20114])
            ("insert-parentheses" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [20116 20680])
            ("delete-pair" function (:user-visible-flag t) nil [20682 20862])
            ("raise-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [20864 21320])
            ("move-past-close-and-reindent" function (:user-visible-flag t) nil [21322 22319])
            ("check-parens" function (:user-visible-flag t) nil [22321 23215])
            ("field-complete" function (:arguments ("table" "predicate")) nil [23218 23711])
            ("lisp-complete-symbol" function
               (:user-visible-flag t
                :arguments ("predicate"))
                nil [23713 24751])
            ("lisp-completion-at-point" function (:arguments ("predicate")) nil [24754 26269]))          
    :file "lisp.el"
    :pointmax 26293
    :fsize 26292
    :lastmodtime '(20806 7941 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "backquote.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("backquote" package nil nil [1375 1395])
            ("backquote-list*-function" function (:arguments ("first" "list")) nil [1448 2034])
            ("backquote-list*-macro" function (:arguments ("first" "list")) nil [2036 2689])
            ("defalias" code nil nil [2691 2759])
            ("backquote-backquote-symbol" variable
               (:constant-flag t
                :default-value (quote \`))
                nil [2890 2993])
            ("backquote-unquote-symbol" variable
               (:constant-flag t
                :default-value (quote \,))
                nil [2995 3094])
            ("backquote-splice-symbol" variable
               (:constant-flag t
                :default-value (quote \,@))
                nil [3096 3193])
            ("backquote" function (:arguments ("structure")) nil [3195 3762])
            ("defalias" code nil nil [3799 3842])
            ("backquote-delay-process" function (:arguments ("s" "level")) nil [4088 4452])
            ("backquote-process" function (:arguments ("s" "level")) nil [4454 7797])
            ("backquote-listify" function (:arguments ("list" "old-tail")) nil [7981 8756]))          
    :file "backquote.el"
    :pointmax 8785
    :fsize 8784
    :lastmodtime '(20806 7940 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "map-ynp.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("declare-function" code nil nil [1423 1503])
            ("map-y-or-n-p" function (:arguments ("prompter" "actor" "list" "help" "action-alist" "no-cursor-in-echo-area")) nil [1505 9885]))          
    :file "map-ynp.el"
    :pointmax 9912
    :fsize 9911
    :lastmodtime '(20806 7941 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "cl-macs.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("cl-lib" include nil nil [1557 1574])
            ("macroexp" include nil nil [1575 1594])
            ("gv" include nil nil [1670 1683])
            ("cl-pop2" function (:arguments ("place")) nil [1685 1812])
            ("cl-optimize-safety" variable nil nil [1814 1841])
            ("cl-optimize-speed" variable nil nil [1842 1868])
            ("cl--compiler-macro-list*" function (:arguments ("_form" "arg" "others")) nil [2075 2286])
            ("cl--compiler-macro-cXXr" function (:arguments ("form" "x")) nil [2303 2871])
            ("cl--simple-funcs" variable
               (:constant-flag t
                :default-value (quote (car cdr nth aref elt if and or + - 1+ 1- min max car-safe cdr-safe progn prog1 prog2)))
                nil [3017 3139])
            ("cl--safe-funcs" variable
               (:constant-flag t
                :default-value (quote (* / % length memq list vector vectorp < > <= >= = error)))
                nil [3140 3229])
            ("cl--simple-expr-p" function (:arguments ("x" "size")) nil [3231 3734])
            ("cl--simple-exprs-p" function (:arguments ("xs")) nil [3736 3849])
            ("cl--safe-expr-p" function (:arguments ("x")) nil [3851 4227])
            ("cl--const-expr-p" function (:arguments ("x")) nil [4292 4550])
            ("cl--const-expr-val" function (:arguments ("x")) nil [4552 4638])
            ("cl--expr-contains" function (:arguments ("x" "y")) nil [4640 5285])
            ("cl--expr-contains-any" function (:arguments ("x" "y")) nil [5287 5388])
            ("cl--expr-depends-p" function (:arguments ("x" "y")) nil [5390 5582])
            ("cl--gensym-counter" variable nil nil [5598 5625])
            ("cl-gensym" function (:arguments ("prefix")) nil [5641 5998])
            ("cl-gentemp" function (:arguments ("prefix")) nil [6015 6380])
            ("def-edebug-spec" code nil nil [6407 6476])
            ("def-edebug-spec" code nil nil [6478 6553])
            ("def-edebug-spec" code nil nil [6555 6873])
            ("def-edebug-spec" code nil nil [6875 6950])
            ("def-edebug-spec" code nil nil [6952 7042])
            ("cl--lambda-list-keywords" variable
               (:constant-flag t
                :default-value (quote (&optional &rest &key &allow-other-keys &aux &whole &body &environment)))
                nil [7044 7154])
            ("cl--bind-block" variable nil nil [7156 7179])
            ("cl--bind-defs" variable nil nil [7180 7202])
            ("cl--bind-enquote" variable nil nil [7203 7228])
            ("cl--bind-inits" variable nil nil [7229 7252])
            ("cl--bind-lets" variable nil nil [7253 7275])
            ("cl--bind-forms" variable nil nil [7276 7299])
            ("cl--transform-lambda" function (:arguments ("form" "bind-block")) nil [7301 10316])
            ("cl-defun" function (:arguments ("name" "args" "body")) nil [10333 11078])
            ("def-edebug-spec" code nil nil [11244 11759])
            ("def-edebug-spec" code nil nil [11761 11818])
            ("def-edebug-spec" code nil nil [11820 12343])
            ("cl-defmacro" function (:arguments ("name" "args" "body")) nil [12360 12902])
            ("def-edebug-spec" code nil nil [12904 13068])
            ("def-edebug-spec" code nil nil [13122 13376])
            ("cl-function" function (:arguments ("func")) nil [13393 13834])
            ("declare-function" code nil nil [13836 13907])
            ("cl--make-usage-var" function (:arguments ("x")) nil [13909 14105])
            ("cl--make-usage-args" function (:arguments ("arglist")) nil [14107 15817])
            ("cl--do-arglist" function (:arguments ("args" "expr" "num")) nil [15819 21455])
            ("cl--arglist-args" function (:arguments ("args")) nil [21457 21916])
            ("cl-destructuring-bind" function (:arguments ("args" "expr" "body")) nil [21933 22486])
            ("cl-not-toplevel" variable nil nil [22519 22547])
            ("cl-eval-when" function (:arguments ("when" "body")) nil [22564 23479])
            ("cl--compile-time-too" function (:arguments ("form")) nil [23481 23997])
            ("cl-load-time-value" function (:arguments ("form" "_read-only")) nil [24014 24830])
            ("cl-case" function (:arguments ("expr" "clauses")) nil [24885 26194])
            ("cl-ecase" function (:arguments ("expr" "clauses")) nil [26211 26459])
            ("cl-typecase" function (:arguments ("expr" "clauses")) nil [26476 27512])
            ("cl-etypecase" function (:arguments ("expr" "clauses")) nil [27529 27790])
            ("cl-block" function (:arguments ("name" "body")) nil [27831 28578])
            ("cl-return" function (:arguments ("result")) nil [28595 28793])
            ("cl-return-from" function (:arguments ("name" "result")) nil [28810 29315])
            ("cl--loop-args" variable nil nil [29344 29366])
            ("cl--loop-accum-var" variable nil nil [29367 29394])
            ("cl--loop-accum-vars" variable nil nil [29395 29423])
            ("cl--loop-bindings" variable nil nil [29424 29450])
            ("cl--loop-body" variable nil nil [29451 29473])
            ("cl--loop-destr-temps" variable nil nil [29474 29503])
            ("cl--loop-finally" variable nil nil [29504 29529])
            ("cl--loop-finish-flag" variable nil nil [29530 29559])
            ("cl--loop-first-flag" variable nil nil [29560 29588])
            ("cl--loop-initially" variable nil nil [29589 29616])
            ("cl--loop-map-form" variable nil nil [29617 29643])
            ("cl--loop-name" variable nil nil [29644 29666])
            ("cl--loop-result" variable nil nil [29667 29691])
            ("cl--loop-result-explicit" variable nil nil [29692 29725])
            ("cl--loop-result-var" variable nil nil [29726 29754])
            ("cl--loop-steps" variable nil nil [29755 29778])
            ("cl--loop-symbol-macs" variable nil nil [29779 29808])
            ("cl-loop" function (:arguments ("loop-args")) nil [29825 34115])
            ("cl-parse-loop-clause" function nil nil [38684 55965])
            ("cl--loop-let" function (:arguments ("specs" "body" "par")) nil [55967 57194])
            ("cl--loop-handle-accum" function (:arguments ("def" "func")) nil [57196 57740])
            ("cl--loop-build-ands" function (:arguments ("clauses")) nil [57742 58937])
            ("cl-do" function (:arguments ("steps" "endtest" "body")) nil [58996 59341])
            ("cl-do*" function (:arguments ("steps" "endtest" "body")) nil [59358 59575])
            ("cl-expand-do-loop" function (:arguments ("steps" "endtest" "body" "star")) nil [59577 60283])
            ("cl-dolist" function (:arguments ("spec" "body")) nil [60300 60774])
            ("cl-dotimes" function (:arguments ("spec" "body")) nil [60791 61207])
            ("cl-do-symbols" function (:arguments ("spec" "body")) nil [61224 61740])
            ("cl-do-all-symbols" function (:arguments ("spec" "body")) nil [61757 62024])
            ("cl-psetq" function (:arguments ("args")) nil [62060 62347])
            ("cl-progv" function (:arguments ("symbols" "values" "body")) nil [62398 63382])
            ("cl--labels-convert-cache" variable nil nil [63384 63421])
            ("cl--labels-convert" function (:arguments ("f")) nil [63423 64222])
            ("cl-flet" function (:arguments ("bindings" "body")) nil [64239 65197])
            ("cl-flet*" function (:arguments ("bindings" "body")) nil [65214 65609])
            ("cl-labels" function (:arguments ("bindings" "body")) nil [65626 66608])
            ("cl-macrolet" function (:arguments ("bindings" "body")) nil [66714 67507])
            ("cl--old-macroexpand" variable
               (:constant-flag t
                :default-value (if (and (boundp (quote cl--old-macroexpand)) (eq (symbol-function (quote macroexpand)) (function cl--sm-macroexpand))) cl--old-macroexpand (symbol-function (quote macroexpand))))
                nil [67509 67726])
            ("cl--sm-macroexpand" function (:arguments ("exp" "env")) nil [67728 72022])
            ("cl-symbol-macrolet" function (:arguments ("bindings" "body")) nil [72039 73083])
            ("cl-multiple-value-bind" function (:arguments ("vars" "form" "body")) nil [73122 73856])
            ("cl-multiple-value-setq" function (:arguments ("vars" "form")) nil [73873 74831])
            ("cl-locally" function (:arguments ("body")) nil [74868 74972])
            ("cl-the" function (:arguments ("_type" "form")) nil [74988 75144])
            ("cl-proclaim-history" variable (:default-value t) nil [75146 75176])
            ("cl-declare-stack" variable (:default-value t) nil [75203 75230])
            ("cl-do-proclaim" function (:arguments ("spec" "hist")) nil [75261 76764])
            ("cl-proclaims-deferred" variable nil nil [76828 76858])
            ("let" code nil nil [76859 76976])
            ("cl-declare" function (:arguments ("specs")) nil [76993 77384])
            ("cl-psetf" function (:arguments ("args")) nil [77490 78339])
            ("cl-remf" function (:arguments ("place" "tag")) nil [78356 78823])
            ("cl-shiftf" function (:arguments ("place" "args")) nil [78840 79327])
            ("cl-rotatef" function (:arguments ("args")) nil [79344 80256])
            ("cl--letf" function (:arguments ("bindings" "simplebinds" "binds" "body")) nil [80426 82697])
            ("cl-letf" function (:arguments ("bindings" "body")) nil [82714 83507])
            ("cl-letf*" function (:arguments ("bindings" "body")) nil [83524 83889])
            ("cl-callf" function (:arguments ("func" "place" "args")) nil [83906 84361])
            ("cl-callf2" function (:arguments ("func" "arg1" "place" "args")) nil [84378 85026])
            ("cl-defstruct" function (:arguments ("struct" "descs")) nil [85060 95692])
            ("cl-deftype" function (:arguments ("name" "arglist" "body")) nil [95736 96080])
            ("cl--make-type-test" function (:arguments ("val" "type")) nil [96082 97735])
            ("cl--object" variable nil nil [97737 97756])
            ("cl-typep" function (:arguments ("object" "type")) nil [97772 98004])
            ("cl-check-type" function (:arguments ("form" "type" "string")) nil [98021 98731])
            ("cl-assert" function (:arguments ("form" "show-args" "string" "args")) nil [98748 99844])
            ("cl-define-compiler-macro" function (:arguments ("func" "args" "body")) nil [99883 101407])
            ("cl-compiler-macroexpand" function (:arguments ("form")) nil [101424 102078])
            ("cl--active-block-names" variable nil nil [102121 102156])
            ("cl-define-compiler-macro" code nil nil [102158 102746])
            ("cl-define-compiler-macro" code nil nil [102748 102941])
            ("cl-defsubst" function (:arguments ("name" "args" "body")) nil [102958 104228])
            ("cl--defsubst-expand" function (:arguments ("argns" "body" "simple" "whole" "unsafe" "argvs")) nil [104230 105380])
            ("cl--compiler-macro-member" function (:arguments ("form" "a" "list" "keys")) nil [105458 105772])
            ("cl--compiler-macro-assoc" function (:arguments ("form" "a" "list" "keys")) nil [105774 106187])
            ("cl--compiler-macro-adjoin" function (:arguments ("form" "a" "list" "keys")) nil [106204 106420])
            ("cl--compiler-macro-get" function (:arguments ("_form" "sym" "prop" "def")) nil [106422 106564])
            ("cl-define-compiler-macro" code nil nil [106566 106775])
            ("dolist" code nil nil [106777 107327])
            ("cl-proclaim" code nil nil [107357 107507])
            ("mapc" code nil nil [107547 107783])
            ("mapc" code nil nil [107833 107994])
            ("run-hooks" code nil nil [107997 108027])
            ("cl-macs" package nil nil [108130 108148]))          
    :file "cl-macs.el"
    :pointmax 108175
    :fsize 108177
    :lastmodtime '(20806 7940 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "gv.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("macroexp" include nil nil [3158 3177])
            ("gv-get" function (:arguments ("place" "do")) nil [3434 5001])
            ("gv-letplace" function (:arguments ("vars" "place" "body")) nil [5018 5669])
            ("gv-define-expander" function (:arguments ("name" "handler")) nil [5739 6429])
            ("gv--defun-declaration" function (:arguments ("symbol" "name" "args" "handler" "fix")) nil [6446 7278])
            ("push" code nil nil [7295 7403])
            ("push" code nil nil [7419 7523])
            ("gv--defsetter" function (:arguments ("name" "setter" "do" "args" "vars")) nil [8044 8727])
            ("gv-define-setter" function (:arguments ("name" "arglist" "body")) nil [8744 9576])
            ("gv-define-simple-setter" function (:arguments ("name" "setter" "fix-return")) nil [9593 10476])
            ("setf" function (:arguments ("args")) nil [10543 11237])
            ("put" code nil nil [12459 12511])
            ("put" code nil nil [12617 12816])
            ("gv-define-simple-setter" code nil nil [12857 12892])
            ("gv-define-simple-setter" code nil nil [12893 12929])
            ("gv-define-simple-setter" code nil nil [12930 12966])
            ("gv-define-setter" code nil nil [13017 13072])
            ("gv-define-setter" code nil nil [13073 13128])
            ("gv-define-setter" code nil nil [13129 13184])
            ("gv-define-setter" code nil nil [13185 13240])
            ("gv-define-setter" code nil nil [13241 13358])
            ("gv-define-simple-setter" code nil nil [13359 13392])
            ("gv-define-setter" code nil nil [13393 13464])
            ("put" code nil nil [13539 13701])
            ("gv-define-simple-setter" code nil nil [13702 13748])
            ("gv-define-simple-setter" code nil nil [13749 13796])
            ("gv-define-simple-setter" code nil nil [13797 13839])
            ("put" code nil nil [13841 14159])
            ("gv-define-simple-setter" code nil nil [14204 14255])
            ("gv-define-simple-setter" code nil nil [14256 14322])
            ("gv-define-simple-setter" code nil nil [14323 14390])
            ("gv-define-simple-setter" code nil nil [14391 14448])
            ("gv-define-simple-setter" code nil nil [14449 14505])
            ("gv-define-simple-setter" code nil nil [14506 14555])
            ("gv-define-setter" code nil nil [14556 14661])
            ("gv-define-setter" code nil nil [14662 14767])
            ("gv-define-simple-setter" code nil nil [14768 14827])
            ("gv-define-simple-setter" code nil nil [14828 14887])
            ("gv-define-simple-setter" code nil nil [14888 14951])
            ("gv-define-simple-setter" code nil nil [14952 15001])
            ("gv-define-simple-setter" code nil nil [15002 15059])
            ("gv-define-simple-setter" code nil nil [15060 15136])
            ("gv-define-simple-setter" code nil nil [15137 15204])
            ("gv-define-simple-setter" code nil nil [15205 15264])
            ("gv-define-simple-setter" code nil nil [15265 15328])
            ("gv-define-simple-setter" code nil nil [15329 15384])
            ("gv-define-simple-setter" code nil nil [15385 15440])
            ("put" code nil nil [15671 15889])
            ("let" code nil nil [15891 16223])
            ("put" code nil nil [16225 17266])
            ("put" code nil nil [17268 18946])
            ("put" code nil nil [18985 19346])
            ("put" code nil nil [19348 19795])
            ("gv" package nil nil [20423 20436]))          
    :file "gv.el"
    :pointmax 20457
    :fsize 20456
    :lastmodtime '(20806 7940 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "package.el"
    :major-mode 'emacs-lisp-mode
    :tags nil
    :file "package.el"
    :pointmax 67920
    :fsize 67919
    :lastmodtime '(20806 7941 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "advice.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("advice-preload" package nil nil [74083 74108])
            ("advice-preload" include (:directory "advice.el") nil [74149 74186])
            ("macroexp" include nil nil [74187 74206])
            ("cl-lib" include nil nil [74285 74302])
            ("advice" customgroup (:user-visible-flag t) nil [74361 74521])
            ("ad-version" variable
               (:constant-flag t
                :default-value "2.14")
                nil [74523 74551])
            ("ad-redefinition-action" variable (:default-value (quote warn)) nil [74568 75334])
            ("ad-default-compilation-action" variable (:default-value (quote maybe)) nil [75351 76019])
            ("ad-substitute-tree" function (:arguments ("sUbTrEe-TeSt" "fUnCtIoN" "tReE")) nil [76195 77063])
            ("ad-save-real-definition" function (:arguments ("function")) nil [77380 78071])
            ("ad-save-real-definitions" function nil nil [78073 78409])
            ("ad-save-real-definitions" code nil nil [78411 78437])
            ("ad-advised-functions" variable nil nil [79093 79126])
            ("ad-pushnew-advised-function" function (:arguments ("function")) nil [79128 79415])
            ("ad-pop-advised-function" function (:arguments ("function")) nil [79417 79632])
            ("ad-do-advised-functions" function (:arguments ("varform" "body")) nil [79634 80099])
            ("ad-get-advice-info" function (:arguments ("function")) nil [80101 80171])
            ("ad-get-advice-info-macro" function (:arguments ("function")) nil [80173 80254])
            ("ad-set-advice-info" function (:arguments ("function" "advice-info")) nil [80256 80356])
            ("ad-copy-advice-info" function (:arguments ("function")) nil [80358 80446])
            ("ad-is-advised" function (:arguments ("function")) nil [80448 80649])
            ("ad-initialize-advice-info" function (:arguments ("function")) nil [80651 80887])
            ("ad-get-advice-info-field" function (:arguments ("function" "field")) nil [80889 81062])
            ("ad-set-advice-info-field" function (:arguments ("function" "field" "value")) nil [81064 81559])
            ("ad-is-active" function (:arguments ("function")) nil [81621 81755])
            ("ad-make-advice" function (:arguments ("name" "protect" "enable" "definition")) nil [81897 82258])
            ("ad-advice-name" function (:arguments ("advice")) nil [82358 82413])
            ("ad-advice-protected" function (:arguments ("advice")) nil [82414 82476])
            ("ad-advice-enabled" function (:arguments ("advice")) nil [82477 82537])
            ("ad-advice-definition" function (:arguments ("advice")) nil [82538 82601])
            ("ad-advice-set-enabled" function (:arguments ("advice" "flag")) nil [82603 82681])
            ("ad-class-p" function (:arguments ("thing")) nil [82683 82742])
            ("ad-name-p" function (:arguments ("thing")) nil [82743 82798])
            ("ad-position-p" function (:arguments ("thing")) nil [82799 82884])
            ("ad-advice-classes" variable (:default-value (quote (before around after activation deactivation))) nil [82985 83058])
            ("ad-has-enabled-advice" function (:arguments ("function" "class")) nil [83060 83289])
            ("ad-has-redefining-advice" function (:arguments ("function")) nil [83291 83651])
            ("ad-has-any-advice" function (:arguments ("function")) nil [83653 83909])
            ("ad-get-enabled-advices" function (:arguments ("function" "class")) nil [83911 84210])
            ("ad-activate-internal" function (:arguments ("function" "compile")) nil [85506 85644])
            ("ad-activate-internal-off" function (:arguments ("function" "compile")) nil [85683 85825])
            ("ad-activate-on-top-level" variable (:default-value t) nil [85895 85930])
            ("ad-with-auto-activation-disabled" function (:arguments ("body")) nil [85932 86041])
            ("ad-safe-fset" function (:arguments ("symbol" "definition")) nil [86043 86232])
            ("ad-make-origname" function (:arguments ("function")) nil [86762 86895])
            ("ad-get-orig-definition" function (:arguments ("function")) nil [86897 87073])
            ("ad-set-orig-definition" function (:arguments ("function" "definition")) nil [87075 87211])
            ("ad-clear-orig-definition" function (:arguments ("function")) nil [87213 87323])
            ("declare-function" code nil nil [87397 87448])
            ("ad-read-advised-function" function (:arguments ("prompt" "predicate" "default")) nil [87450 89136])
            ("ad-advice-class-completion-table" variable (:default-value (mapcar (lambda (class) (list (symbol-name class))) ad-advice-classes)) nil [89138 89255])
            ("ad-read-advice-class" function (:arguments ("function" "prompt" "default")) nil [89257 89954])
            ("ad-read-advice-name" function (:arguments ("function" "class" "prompt")) nil [89956 90689])
            ("ad-read-advice-specification" function (:arguments ("prompt")) nil [90691 91097])
            ("ad-last-regexp" variable nil nil [91136 91162])
            ("ad-read-regexp" function (:arguments ("prompt")) nil [91164 91505])
            ("ad-find-advice" function (:arguments ("function" "class" "name")) nil [91635 91800])
            ("ad-advice-position" function (:arguments ("function" "class" "name")) nil [91802 92116])
            ("ad-find-some-advice" function (:arguments ("function" "class" "name")) nil [92118 92868])
            ("ad-enable-advice-internal" function (:arguments ("function" "class" "name" "flag")) nil [92870 93838])
            ("ad-enable-advice" function
               (:user-visible-flag t
                :arguments ("function" "class" "name"))
                nil [93855 94274])
            ("ad-disable-advice" function
               (:user-visible-flag t
                :arguments ("function" "class" "name"))
                nil [94291 94716])
            ("ad-enable-regexp-internal" function (:arguments ("regexp" "class" "flag")) nil [94718 95200])
            ("ad-enable-regexp" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [95202 95620])
            ("ad-disable-regexp" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [95622 96045])
            ("ad-remove-advice" function
               (:user-visible-flag t
                :arguments ("function" "class" "name"))
                nil [96047 96704])
            ("ad-add-advice" function (:arguments ("function" "advice" "class" "position")) nil [96721 98796])
            ("ad-macrofy" function (:arguments ("definition")) nil [98910 99039])
            ("ad-lambdafy" function (:arguments ("definition")) nil [99041 99163])
            ("ad-special-form-p" function (:arguments ("definition")) nil [99165 99443])
            ("ad-subr-p" function (:arguments ("definition")) nil [99445 99544])
            ("ad-macro-p" function (:arguments ("definition")) nil [99546 99658])
            ("ad-lambda-p" function (:arguments ("definition")) nil [99660 99786])
            ("ad-advice-p" function (:arguments ("definition")) nil [99848 99972])
            ("ad-compiled-p" function (:arguments ("definition")) nil [99974 100208])
            ("ad-compiled-code" function (:arguments ("compiled-definition")) nil [100210 100423])
            ("ad-lambda-expression" function (:arguments ("definition")) nil [100425 100697])
            ("ad-arglist" function (:arguments ("definition" "name")) nil [100699 101070])
            ("ad-docstring" function (:arguments ("definition")) nil [101072 101381])
            ("ad-interactive-form" function (:arguments ("definition")) nil [101383 101642])
            ("ad-body-forms" function (:arguments ("definition")) nil [101644 101940])
            ("ad-make-advised-definition-docstring" function (:arguments ("function")) nil [101942 102378])
            ("ad-advised-definition-p" function (:arguments ("definition")) nil [102380 102723])
            ("ad-definition-type" function (:arguments ("definition")) nil [102725 103090])
            ("ad-has-proper-definition" function (:arguments ("function")) nil [103092 103360])
            ("ad-real-definition" function (:arguments ("function")) nil [103490 103774])
            ("ad-real-orig-definition" function (:arguments ("function")) nil [103776 103998])
            ("ad-is-compilable" function (:arguments ("function")) nil [104000 104305])
            ("ad-compile-function" function
               (:user-visible-flag t
                :arguments ("function"))
                nil [104307 105196])
            ("ad-parse-arglist" function (:arguments ("arglist")) nil [105265 105927])
            ("ad-retrieve-args-form" function (:arguments ("arglist")) nil [105929 106832])
            ("ad-arg-binding-field" function (:arguments ("binding" "field")) nil [106834 107007])
            ("ad-list-access" function (:arguments ("position" "list")) nil [107009 107147])
            ("ad-element-access" function (:arguments ("position" "list")) nil [107149 107301])
            ("ad-access-argument" function (:arguments ("arglist" "index")) nil [107303 107853])
            ("ad-get-argument" function (:arguments ("arglist" "index")) nil [107855 108189])
            ("ad-set-argument" function (:arguments ("arglist" "index" "value-form")) nil [108191 108782])
            ("ad-get-arguments" function (:arguments ("arglist" "index")) nil [108784 109407])
            ("ad-set-arguments" function (:arguments ("arglist" "index" "values-form")) nil [109409 111189])
            ("ad-insert-argument-access-forms" function (:arguments ("definition" "arglist")) nil [111191 112099])
            ("ad-map-arglists" function (:arguments ("source-arglist" "target-arglist")) nil [112533 114488])
            ("ad-make-mapped-call" function (:arguments ("source-arglist" "target-arglist" "target-function")) nil [114490 114879])
            ("ad-make-single-advice-docstring" function (:arguments ("advice" "class" "style")) nil [115496 116120])
            ("help-fns" include nil nil [116122 116141])
            ("ad-make-advised-docstring" function (:arguments ("function" "style")) nil [116197 117725])
            ("ad-make-plain-docstring" function (:arguments ("function")) nil [117727 117815])
            ("ad-make-freeze-docstring" function (:arguments ("function")) nil [117816 117906])
            ("ad-advised-arglist" function (:arguments ("function")) nil [118029 118449])
            ("ad-advised-interactive-form" function (:arguments ("function")) nil [118451 118921])
            ("ad-make-advised-definition" function (:arguments ("function")) nil [118988 122154])
            ("ad-assemble-advised-definition" function (:arguments ("type" "args" "docstring" "interactive" "orig" "befores" "arounds" "afters")) nil [122156 125332])
            ("ad-make-hook-form" function (:arguments ("function" "hook-name")) nil [125387 125731])
            ("ad-get-cache-definition" function (:arguments ("function")) nil [129043 129141])
            ("ad-get-cache-id" function (:arguments ("function")) nil [129143 129233])
            ("ad-set-cache" function (:arguments ("function" "definition" "id")) nil [129235 129357])
            ("ad-clear-cache" function
               (:user-visible-flag t
                :arguments ("function"))
                nil [129359 129689])
            ("ad-make-cache-id" function (:arguments ("function")) nil [129691 130617])
            ("ad-get-cache-class-id" function (:arguments ("function" "class")) nil [130619 130891])
            ("ad-verify-cache-class-id" function (:arguments ("cache-class-id" "advices")) nil [130893 131162])
            ("ad-cache-id-verification-code" function (:arguments ("function")) nil [131560 132672])
            ("ad-verify-cache-id" function (:arguments ("function")) nil [132674 132841])
            ("ad-preactivate-advice" function (:arguments ("function" "advice" "class" "position")) nil [134166 135098])
            ("ad-make-freeze-definition" function (:arguments ("function" "advice" "class" "position")) nil [136313 139137])
            ("ad-should-compile" function (:arguments ("function" "compile")) nil [139225 139993])
            ("ad-activate-advised-definition" function (:arguments ("function" "compile")) nil [139995 141147])
            ("ad-handle-definition" function (:arguments ("function")) nil [141149 143108])
            ("ad-activate" function
               (:user-visible-flag t
                :arguments ("function" "compile"))
                nil [143203 145156])
            ("defalias" code nil nil [145158 145197])
            ("ad-deactivate" function
               (:user-visible-flag t
                :arguments ("function"))
                nil [145199 146094])
            ("ad-update" function
               (:user-visible-flag t
                :arguments ("function" "compile"))
                nil [146096 146452])
            ("ad-unadvise" function
               (:user-visible-flag t
                :arguments ("function"))
                nil [146454 146883])
            ("ad-recover" function
               (:user-visible-flag t
                :arguments ("function"))
                nil [146885 147644])
            ("ad-activate-regexp" function
               (:user-visible-flag t
                :arguments ("regexp" "compile"))
                nil [147646 148177])
            ("ad-deactivate-regexp" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [148179 148601])
            ("ad-update-regexp" function
               (:user-visible-flag t
                :arguments ("regexp" "compile"))
                nil [148603 149128])
            ("ad-activate-all" function
               (:user-visible-flag t
                :arguments ("compile"))
                nil [149130 149383])
            ("ad-deactivate-all" function (:user-visible-flag t) nil [149385 149545])
            ("ad-update-all" function
               (:user-visible-flag t
                :arguments ("compile"))
                nil [149547 149785])
            ("ad-unadvise-all" function (:user-visible-flag t) nil [149787 149941])
            ("ad-recover-all" function (:user-visible-flag t) nil [149943 150388])
            ("ad-defadvice-flags" variable (:default-value (quote (("protect") ("disable") ("activate") ("compile") ("preactivate") ("freeze")))) nil [150438 150550])
            ("defadvice" function (:arguments ("function" "args" "body")) nil [150567 156141])
            ("ad-with-originals" function (:arguments ("functions" "body")) nil [156171 157846])
            ("ad-start-advice" function (:user-visible-flag t) nil [157992 158233])
            ("ad-stop-advice" function (:user-visible-flag t) nil [158235 158552])
            ("ad-recover-normality" function (:user-visible-flag t) nil [158554 158917])
            ("ad-start-advice" code nil nil [158919 158936])
            ("advice" package nil nil [158938 158955]))          
    :file "advice.el"
    :pointmax 158981
    :fsize 158980
    :lastmodtime '(20806 7940 0 0)
    :unmatched-syntax 'nil
    )
   )
  :file "!drive_c!emacs-24.3!lisp!emacs-lisp!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2"
  )
